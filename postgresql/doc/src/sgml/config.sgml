<!-- doc/src/sgml/config.sgml -->

<chapter id="runtime-config">
<!--==========================orignal english content==========================
  <title>Server Configuration</title>
____________________________________________________________________________-->
  <title>服务器配置</title>

<!--==========================orignal english content==========================
  <indexterm>
   <primary>configuration</primary>
   <secondary>of the server</secondary>
  </indexterm>
____________________________________________________________________________-->
  <indexterm>
   <primary>配置</primary>
   <secondary>of the server</secondary>
  </indexterm>

<!--==========================orignal english content==========================
  <para>
   There are many configuration parameters that affect the behavior of
   the database system. In the first section of this chapter we
   describe how to interact with configuration parameters. The subsequent sections
   discuss each parameter in detail.
  </para>
____________________________________________________________________________-->
  <para>
   有很多配置参数可以影响数据库系统的行为。本章的第一节中我们将描述一下如何与配置参数交互。
   后续的小节将详细地讨论每一个参数。
  </para>

  <sect1 id="config-setting">
<!--==========================orignal english content==========================
   <title>Setting Parameters</title>
____________________________________________________________________________-->
   <title>设置参数</title>

   <sect2 id="config-setting-names-values">
<!--==========================orignal english content==========================
    <title>Parameter Names and Values</title>
____________________________________________________________________________-->
    <title>参数名称和值</title>

<!--==========================orignal english content==========================
    <para>
     All parameter names are case-insensitive. Every parameter takes a
     value of one of five types: boolean, string, integer, floating point,
     or enumerated (enum).  The type determines the syntax for setting the
     parameter:
    </para>
____________________________________________________________________________-->
    <para>
     所有参数名都是大小写不敏感的。每个参数都可以接受五种类型之一的值： 布尔、字符串、整数、
     浮点数或枚举。该类型决定了设置该参数的语法：
    </para>

    <itemizedlist>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       <emphasis>Boolean:</emphasis>
       Values can be written as
       <literal>on</literal>,
       <literal>off</literal>,
       <literal>true</literal>,
       <literal>false</literal>,
       <literal>yes</literal>,
       <literal>no</literal>,
       <literal>1</literal>,
       <literal>0</literal>
       (all case-insensitive) or any unambiguous prefix of one of these.
      </para>
____________________________________________________________________________-->
      <para>
       <emphasis>布尔:</emphasis>
       值可以被写成
       <literal>on</literal>,
       <literal>off</literal>,
       <literal>true</literal>,
       <literal>false</literal>,
       <literal>yes</literal>,
       <literal>no</literal>,
       <literal>1</literal>,
       <literal>0</literal>
       （都是大小写不敏感的）或者这些值的任何无歧义前缀。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       <emphasis>String:</emphasis>
       In general, enclose the value in single quotes, doubling any single
       quotes within the value.  Quotes can usually be omitted if the value
       is a simple number or identifier, however.
      </para>
____________________________________________________________________________-->
      <para>
       <emphasis>字符串:</emphasis>
       通常值被包括在单引号内，值内部的任何单引号都需要被双写。不过，如果值是一个简单数字或者
       标识符，引号通常可以被省略。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       <emphasis>Numeric (integer and floating point):</emphasis>
       A decimal point is permitted only for floating-point parameters.
       Do not use thousands separators.  Quotes are not required.
      </para>
____________________________________________________________________________-->
      <para>
       <emphasis>数字（整数和浮点）:</emphasis>
       只对浮点参数允许一个小数点。不要使用千位分隔符。不要求引号。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       <emphasis>Numeric with Unit:</emphasis>
       Some numeric parameters have an implicit unit, because they describe
       quantities of memory or time. The unit might be kilobytes, blocks
       (typically eight kilobytes), milliseconds, seconds, or minutes.
       An unadorned numeric value for one of these settings will use the
       setting's default unit, which can be learned from
       <structname>pg_settings</>.<structfield>unit</>.
       For convenience, settings can be given with a unit specified explicitly,
       for example <literal>'120 ms'</> for a time value, and they will be
       converted to whatever the parameter's actual unit is.  Note that the
       value must be written as a string (with quotes) to use this feature.
       The unit name is case-sensitive, and there can be whitespace between
       the numeric value and the unit.

       <itemizedlist>
        <listitem>
         <para>
          Valid memory units are <literal>kB</literal> (kilobytes),
          <literal>MB</literal> (megabytes), <literal>GB</literal>
          (gigabytes), and <literal>TB</literal> (terabytes).
          The multiplier for memory units is 1024, not 1000.
         </para>
        </listitem>

        <listitem>
         <para>
          Valid time units are <literal>ms</literal> (milliseconds),
          <literal>s</literal> (seconds), <literal>min</literal> (minutes),
          <literal>h</literal> (hours), and <literal>d</literal> (days).
         </para>
        </listitem>
       </itemizedlist>
      </para>
____________________________________________________________________________-->
      <para>
       <emphasis>带单位的数字:</emphasis>
       一些数字参数具有隐含单位，因为它们描述内存或时间量。单位可能是千字节、块（通常是 8KB）、 毫秒、秒或分钟。这些设置之一的一个未修饰的数字值将使用该设置的默认单位，默认单位可以通
       过引用<structname>pg_settings</>.<structfield>unit</>来找到。为了方便，也可以
       显式地指定一个不同的单位，例如时间值可以是<literal>'120 ms'</>，并且它们将被转换到参数的实际单位。要使用这个特性，注意值必须被写成一个字符
       串（带有引号）。单位名称是大小写敏感的，并且在数字值和单位之间可以有空白。

       <itemizedlist>
        <listitem>
         <para>
          可用的内存单位是<literal>kB</literal>（千字节）、<literal>MB</literal>（兆字节）和<literal>GB</literal>（吉字节）。内存单位的乘数是 1024 而不是 1000。
         </para>
        </listitem>

        <listitem>
         <para>
          可用的时间单位是<literal>ms</literal>（毫秒）、<literal>s</literal>（秒）、<literal>min</literal>（分钟）、 <literal>h</literal>（小时）和<literal>d</literal>（天）。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       <emphasis>Enumerated:</emphasis>
       Enumerated-type parameters are written in the same way as string
       parameters, but are restricted to have one of a limited set of
       values.  The values allowable for such a parameter can be found from
       <structname>pg_settings</>.<structfield>enumvals</>.
       Enum parameter values are case-insensitive.
      </para>
____________________________________________________________________________-->
      <para>
       <emphasis>枚举:</emphasis>
       枚举类型的参数以与字符串参数相同的方式指定，但被限制到一组有限的值。 这样一个参数可用的值可以在<structname>pg_settings</>.<structfield>enumvals</>
       中找到。枚举参数值是大小写无关的。
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="config-setting-configuration-file">
<!--==========================orignal english content==========================
    <title>Parameter Interaction via the Configuration File</title>
____________________________________________________________________________-->
    <title>通过配置文件影响参数</title>

<!--==========================orignal english content==========================
    <para>
     The most fundamental way to set these parameters is to edit the file
     <filename>postgresql.conf</><indexterm><primary>postgresql.conf</></>,
     which is normally kept in the data directory.  A default copy is
     installed when the database cluster directory is initialized.
     An example of what this file might look like is:
<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
     One parameter is specified per line. The equal sign between name and
     value is optional. Whitespace is insignificant (except within a quoted
     parameter value) and blank lines are
     ignored. Hash marks (<literal>#</literal>) designate the remainder
     of the line as a comment.  Parameter values that are not simple
     identifiers or numbers must be single-quoted.  To embed a single
     quote in a parameter value, write either two quotes (preferred)
     or backslash-quote.
    </para>
____________________________________________________________________________-->
    <para>
     设置这些参数最基本的方法是编辑<filename>postgresql.conf</><indexterm><primary>postgresql.conf</></>文件， 它通常被保存在数据目录中（当数据库集簇目录被初始化时，一个默认的拷贝将会被安装在那里）。一个该文件的例子看起来是：
<programlisting>
# This is a comment
log_connections = yes
log_destination = 'syslog'
search_path = '"$user", public'
shared_buffers = 128MB
</programlisting>
     每一行指定一个参数。名称和值之间的等号是可选的。空白是无意义的（除了在一个引号引用的参数值内）并且空行被忽略。井号（<literal>#</literal>）指示该行的剩余部分是一个注释。非简单标识符或者数字的参数值必须用单引号包围。要在参数值里嵌入单引号， 要么写两个单引号（首选）或者在引号前放反斜线。
    </para>

<!--==========================orignal english content==========================
    <para>
     Parameters set in this way provide default values for the cluster.
     The settings seen by active sessions will be these values unless they
     are overridden.  The following sections describe ways in which the
     administrator or user can override these defaults.
    </para>
____________________________________________________________________________-->
    <para>
     以这种方式设定的参数为集簇提供了默认值。除非这些设置被覆盖，活动会话看到的就是这些设置。
     下面的小节描述了管理员或用户覆盖这些默认值的方法。
    </para>

<!--==========================orignal english content==========================
    <para>
     <indexterm>
      <primary>SIGHUP</primary>
     </indexterm>
     The configuration file is reread whenever the main server process
     receives a <systemitem>SIGHUP</> signal; this signal is most easily
     sent by running <literal>pg_ctl reload</> from the command line or by
     calling the SQL function <function>pg_reload_conf()</function>. The main
     server process also propagates this signal to all currently running
     server processes, so that existing sessions also adopt the new values
     (this will happen after they complete any currently-executing client
     command).  Alternatively, you can
     send the signal to a single server process directly.  Some parameters
     can only be set at server start; any changes to their entries in the
     configuration file will be ignored until the server is restarted.
     Invalid parameter settings in the configuration file are likewise
     ignored (but logged) during <systemitem>SIGHUP</> processing.
    </para>
____________________________________________________________________________-->
    <para>
     <indexterm>
      <primary>SIGHUP</primary>
     </indexterm>
     主服务器进程每次收到<systemitem>SIGHUP</>信号（最简单的方法是从命令行运行<literal>pg_ctl reload</>或调用 SQL 函数<function>pg_reload_conf()</function>来发送这个信号）后都会重新读取这个配置
     文件。主服务器进程还会把这个信号传播给所有正在运行的服务器进程，这样现有的会话也能采用新
     值（要等待它们完成当前正在执行的客户端命令之后才会发生）。另外，你可以直接向一个单一服务
     器进程发送该信号。有些参数只能在服务器启动时设置，在配置文件中对这些条目的修改将被忽略，
     直到下次服务器重启。配置文件中的非法参数设置也会在<systemitem>SIGHUP</>处理过程中被
     忽略（但是会记录日志）。
    </para>

<!--==========================orignal english content==========================
    <para>
     In addition to <filename>postgresql.conf</>,
     a <productname>PostgreSQL</productname> data directory contains a file
     <filename>postgresql.auto.conf</><indexterm><primary>postgresql.auto.conf</></>,
     which has the same format as <filename>postgresql.conf</> but should
     never be edited manually.  This file holds settings provided through
     the <xref linkend="SQL-ALTERSYSTEM"> command.  This file is automatically
     read whenever <filename>postgresql.conf</> is, and its settings take
     effect in the same way.  Settings in <filename>postgresql.auto.conf</>
     override those in <filename>postgresql.conf</>.
    </para>
____________________________________________________________________________-->
    <para>
     除<filename>postgresql.conf</>之外，<productname>PostgreSQL</productname>
     数据目录还包含一个文件
     <filename>postgresql.auto.conf</><indexterm><primary>postgresql.auto.conf</></>，它具有和<filename>postgresql.conf</>相同的格式但是不应该被手工编辑。这个
     文件保存了通过<xref linkend="SQL-ALTERSYSTEM">命令提供的设置。每当<filename>postgresql.conf</>被读
     取时这个文件会被自动读取，并且它的设置会以同样的方式生效。
     <filename>postgresql.auto.conf</>中的设置会覆盖<filename>postgresql.conf</>
     中的设置。
    </para>
    
<!--==========================orignal english content==========================
    <para>
     The system view
     <link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>
     can be helpful for pre-testing changes to the configuration file, or for
     diagnosing problems if a <systemitem>SIGHUP</> signal did not have the
     desired effects.
    </para>
____________________________________________________________________________-->
    <para>
     如果<systemitem>SIGHUP</>信号没有产生预期效果，
     那么系统表<link linkend="view-pg-file-settings"><structname>pg_file_settings</structname></link>
     有助于对配置文件的预测试更改，或者诊断问题。
    </para>
    
   </sect2>

   <sect2 id="config-setting-sql-command-interaction">
<!--==========================orignal english content==========================
    <title>Parameter Interaction via SQL</title>
____________________________________________________________________________-->
    <title>通过SQL影响参数</title>

<!--==========================orignal english content==========================
     <para>
      <productname>PostgreSQL</productname> provides three SQL
      commands to establish configuration defaults.
      The already-mentioned <xref linkend="SQL-ALTERSYSTEM"> command
      provides a SQL-accessible means of changing global defaults; it is
      functionally equivalent to editing <filename>postgresql.conf</>.
      In addition, there are two commands that allow setting of defaults
      on a per-database or per-role basis:
     </para>
____________________________________________________________________________-->
     <para>
      <productname>PostgreSQL</productname>提供了三个SQL命令来建立配置默认值。
      已经提到过的<xref linkend="SQL-ALTERSYSTEM">命令提供了一种改变全局默认值的从SQL可
      访问的方法；它在功效上等效于编辑<filename>postgresql.conf</>。此外，还有两个命令
      可以针对每个数据库或者每个角色设置默认值：
     </para>

     <itemizedlist>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       The <xref linkend="sql-alterdatabase"> command allows global
       settings to be overridden on a per-database basis.
      </para>
____________________________________________________________________________-->
      <para>
       <xref linkend="sql-alterdatabase">命令允许针对一个数据库覆盖其全局设置。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The <xref linkend="sql-alterrole"> command allows both global and
       per-database settings to be overridden with user-specific values.
      </para>
____________________________________________________________________________-->
      <para>
       <xref linkend="sql-alterrole">命令允许用用户指定的值来覆盖全局设置和数据库设置。
      </para>
     </listitem>
    </itemizedlist>

<!--==========================orignal english content==========================
     <para>
      Values set with <command>ALTER DATABASE</> and <command>ALTER ROLE</>
      are applied only when starting a fresh database session.  They
      override values obtained from the configuration files or server
      command line, and constitute defaults for the rest of the session.
      Note that some settings cannot be changed after server start, and
      so cannot be set with these commands (or the ones listed below).
    </para>
____________________________________________________________________________-->
     <para>
      只有当开始一个新的数据库会话时，用<command>ALTER DATABASE</>和
      <command>ALTER ROLE</>设置的值才会被应用。它们会覆盖从配置文件或服务器命令行
      获得的值，并且作为该会话后续的默认值。注意某些设置在服务器启动后不能被更改，并且因此
      不能被这些命令（或者下文列举的命令）设置。
    </para>

<!--==========================orignal english content==========================
     <para>
      Once a client is connected to the database, <productname>PostgreSQL</>
      provides two additional SQL commands (and equivalent functions) to
      interact with session-local configuration settings:
    </para>
____________________________________________________________________________-->
     <para>
      一旦一个客户端连接到数据库，<productname>PostgreSQL</>会提供两个额外的SQL命令（
      以及等效的函数）用以影响会话本地的配置设置：
    </para>

    <itemizedlist>
     <listitem>
<!--==========================orignal english content==========================
     <para>
      The <xref linkend="SQL-SHOW"> command allows inspection of the
      current value of all parameters.  The corresponding function is
      <function>current_setting(setting_name text)</function>.
     </para>
____________________________________________________________________________-->
     <para>
      <xref linkend="SQL-SHOW">命令允许察看所有参数的当前值。对应的函数是
      <function>current_setting(setting_name text)</function>。
     </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The <xref linkend="SQL-SET"> command allows modification of the
       current value of those parameters that can be set locally to a
       session; it has no effect on other sessions.
       The corresponding function is
       <function>set_config(setting_name, new_value, is_local)</function>.
      </para>
____________________________________________________________________________-->
      <para>
       <xref linkend="SQL-SET">命令允许修改对于一个会话可以本地设置的参数的当前值，
       它对其他会话没有影响。对应的函数是
       <function>set_config(setting_name, new_value, is_local)</function>。
      </para>
     </listitem>
    </itemizedlist>

<!--==========================orignal english content==========================
    <para>
     In addition, the system view <link
     linkend="view-pg-settings"><structname>pg_settings</></> can be
     used to view and change session-local values:
    </para>
____________________________________________________________________________-->
    <para>
     此外，系统视图<link
     linkend="view-pg-settings"><structname>pg_settings</></>可以被用来查看和改变
     会话本地的值：
    </para>

    <itemizedlist>
     <listitem>
<!--==========================orignal english content==========================
      <para>
       Querying this view is similar to using <command>SHOW ALL</> but
       provides more detail.  It is also more flexible, since it's possible
       to specify filter conditions or join against other relations.
      </para>
____________________________________________________________________________-->
      <para>
       查询这个视图与使用<command>SHOW ALL</>相似，但是可以提供更多细节。它也更加灵活，
       因为可以为它指定过滤条件或者把它与其他关系进行连接。
      </para>
     </listitem>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       Using <xref linkend="SQL-UPDATE"> on this view, specifically
       updating the <structname>setting</> column, is the equivalent
       of issuing <command>SET</> commands.  For example, the equivalent of
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
       is:
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
      </para>
____________________________________________________________________________-->
      <para>
       在这个视图上使用<xref linkend="SQL-UPDATE">并且指定更新<structname>setting</>
       列，其效果等同于发出<command>SET</>命令。例如，下面的命令
<programlisting>
SET configuration_parameter TO DEFAULT;
</programlisting>
       等效于：
<programlisting>
UPDATE pg_settings SET setting = reset_val WHERE name = 'configuration_parameter';
</programlisting>
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2>
<!--==========================orignal english content==========================
    <title>Parameter Interaction via the Shell</title>
____________________________________________________________________________-->
    <title>通过 Shell 影响参数</title>

<!--==========================orignal english content==========================
     <para>
      In addition to setting global defaults or attaching
      overrides at the database or role level, you can pass settings to
      <productname>PostgreSQL</productname> via shell facilities.
      Both the server and <application>libpq</> client library
      accept parameter values via the shell.
     </para>
____________________________________________________________________________-->
     <para>
      除了在数据库或者角色层面上设置全局默认值或者进行覆盖，你还可以通过 shell 工具把设置
      传递给<productname>PostgreSQL</productname>。服务器和<application>libpq</>
      客户端库都能通过 shell 接受参数值。
     </para>

     <itemizedlist>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       During server startup, parameter settings can be
       passed to the <command>postgres</command> command via the
       <option>-c</> command-line parameter.  For example,
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
       Settings provided in this way override those set via
       <filename>postgresql.conf</> or <command>ALTER SYSTEM</>,
       so they cannot be changed globally without restarting the server.
     </para>
____________________________________________________________________________-->
      <para>
       在服务器启动期间，可以通过<option>-c</>命令行参数把参数设置传递给
       <command>postgres</command>命令。例如：
<programlisting>
postgres -c log_connections=yes -c log_destination='syslog'
</programlisting>
       这种方式提供的设置会覆盖通过<filename>postgresql.conf</>或者
       <command>ALTER SYSTEM</>提供的设置，因此除了重启服务器之外无法从全局上改变它们。
     </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      When starting a client session via <application>libpq</>,
      parameter settings can be
      specified using the <envar>PGOPTIONS</envar> environment variable.
      Settings established in this way constitute defaults for the life
      of the session, but do not affect other sessions.
      For historical reasons, the format of <envar>PGOPTIONS</envar> is
      similar to that used when launching the <command>postgres</command>
      command; specifically, the <option>-c</> flag must be specified.
      For example,
<programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
</programlisting>
     </para>
____________________________________________________________________________-->
     <para>
      当通过<application>libpq</>启动一个客户端会话时，可以使用<envar>PGOPTIONS</envar>
      环境变量指定参数设置。这种方式建立的设置构成了会话生存期间的默认值，但是不会影响
      其他的会话。由于历史原因，<envar>PGOPTIONS</envar>的格式和启动
      <command>postgres</command>命令时用到的相似，特别是<option>-c</>标志必须被指定。
      例如：
<programlisting>
env PGOPTIONS="-c geqo=off -c statement_timeout=5min" psql
</programlisting>
     </para>

<!--==========================orignal english content==========================
     <para>
      Other clients and libraries might provide their own mechanisms,
      via the shell or otherwise, that allow the user to alter session
      settings without direct use of SQL commands.
     </para>
____________________________________________________________________________-->
     <para>
      通过 shell 或者其他方式，其他客户端和库可能提供它们自己的机制，以便允许用户在不直接
      使用SQL命令的前提下修改会话设置。
     </para>
    </listitem>
   </itemizedlist>

   </sect2>

   <sect2 id="config-includes">
<!--==========================orignal english content==========================
    <title>Managing Configuration File Contents</title>
____________________________________________________________________________-->
    <title>管理配置文件内容</title>

<!--==========================orignal english content==========================
     <para>
      <productname>PostgreSQL</> provides several features for breaking
      down complex <filename>postgresql.conf</> files into sub-files.
      These features are especially useful when managing multiple servers
      with related, but not identical, configurations.
     </para>
____________________________________________________________________________-->
     <para>
      <productname>PostgreSQL</>提供了一些特性用于把复杂的
      <filename>postgresql.conf</>文件分解成子文件。在管理多个具有相关但不完全相同
      配置的服务器时，这些特性特别有用。
     </para>

<!--==========================orignal english content==========================
     <para>
      <indexterm>
       <primary><literal>include</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      In addition to individual parameter settings,
      the <filename>postgresql.conf</> file can contain <firstterm>include
      directives</>, which specify another file to read and process as if
      it were inserted into the configuration file at this point.  This
      feature allows a configuration file to be divided into physically
      separate parts.  Include directives simply look like:
<programlisting>
include 'filename'
</programlisting>
      If the file name is not an absolute path, it is taken as relative to
      the directory containing the referencing configuration file.
      Inclusions can be nested.
     </para>
____________________________________________________________________________-->
     <para>
      <indexterm>
       <primary><literal>include</></primary>
       <secondary>in configuration file</secondary>
       </indexterm>
         除了单个参数设置，<filename>postgresql.conf</>文件可以包含<firstterm>包括指令</>，它指定要读入和处理的另一个文件，就好像该文件被插入到配置文件的这个点。这个特性允许一个配置文件被划分成物理上独立的部分。包括指令看起来像：
<programlisting>
include 'filename'
</programlisting>
         如果文件名不是一个绝对路径，它将作为包含引用配置文件的目录的相对位置。包括可以被嵌套。
     </para>

<!--==========================orignal english content==========================
     <para>
      <indexterm>
       <primary><literal>include_if_exists</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      There is also an <literal>include_if_exists</> directive, which acts
      the same as the <literal>include</> directive, except
      when the referenced file does not exist or cannot be read.  A regular
      <literal>include</> will consider this an error condition, but
      <literal>include_if_exists</> merely logs a message and continues
      processing the referencing configuration file.
     </para>
____________________________________________________________________________-->
     <para>
      <indexterm>
       <primary><literal>include_if_exists</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
         也有一个<literal>include_if_exists</>指令，它的作用和<literal>include</>指令一样，不过当被引用的文件不存在或者无法被读取时其行为不同。一个通常的<literal>include</>将认为这是一个错误情况，而<literal>include_if_exists</>仅仅记录一个消息并且继续处理引用配置文件。
     </para>

<!--==========================orignal english content==========================
     <para>
      <indexterm>
       <primary><literal>include_dir</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
      The <filename>postgresql.conf</> file can also contain
      <literal>include_dir</literal> directives, which specify an entire
      directory of configuration files to include.  These look like
<programlisting>
include_dir 'directory'
</programlisting>
      Non-absolute directory names are taken as relative to the directory
      containing the referencing configuration file.  Within the specified
      directory, only non-directory files whose names end with the
      suffix <literal>.conf</literal> will be included.  File names that
      start with the <literal>.</literal> character are also ignored, to
      prevent mistakes since such files are hidden on some platforms.  Multiple
      files within an include directory are processed in file name order
      (according to C locale rules, i.e. numbers before letters, and
      uppercase letters before lowercase ones).
     </para>
____________________________________________________________________________-->
     <para>
      <indexterm>
       <primary><literal>include_dir</></primary>
       <secondary>in configuration file</secondary>
      </indexterm>
        <filename>postgresql.conf</>文件也可以包含<literal>include_dir</literal>指令，它指定要被包含的配置文件的一整个目录。它的用法类似：
 <programlisting>
 include_dir 'directory'
 </programlisting>
        非绝对目录名被当做包含引用配置文件的目录的相对路径。在该指定目录中，只有以后缀名
        <literal>.conf</literal>结尾的非目录文件才会被包括。以<literal>.</literal>
        字符开头的文件名也会被忽略，因为在某些平台上它们是隐藏文件。一个包括目录中的多个文件
        被以文件名顺序处理（根据 C 区域规则排序，即数字在字母之前并且大写字母在小写字母
        之前）。
     </para>

<!--==========================orignal english content==========================
     <para>
      Include files or directories can be used to logically separate portions
      of the database configuration, rather than having a single large
      <filename>postgresql.conf</> file.  Consider a company that has two
      database servers, each with a different amount of memory.  There are
      likely elements of the configuration both will share, for things such
      as logging.  But memory-related parameters on the server will vary
      between the two.  And there might be server specific customizations,
      too.  One way to manage this situation is to break the custom
      configuration changes for your site into three files.  You could add
      this to the end of your <filename>postgresql.conf</> file to include
      them:
<programlisting>
include 'shared.conf'
include 'memory.conf'
include 'server.conf'
</programlisting>
      All systems would have the same <filename>shared.conf</>.  Each
      server with a particular amount of memory could share the
      same <filename>memory.conf</>; you might have one for all servers
      with 8GB of RAM, another for those having 16GB.  And
      finally <filename>server.conf</> could have truly server-specific
      configuration information in it.
     </para>
____________________________________________________________________________-->
     <para>
       包括文件或目录可以被用来在逻辑上分隔数据库配置的各个部分，而不是用一个很大的<filename>postgresql.conf</>文件。考虑一个有两台数据库服务器的公司，每一个都有不同的内存量。很可能配置的元素都会被共享，例如用于日志的参数。但是两者关于内存的参数将会不同。并且还可能会有服务器相关的自定义。一种管理这类情况的方法是将你的站点的自定义配置修改分成三个文件。你可以把下面的内容加入到你的<filename>postgresql.conf</>文件末尾来包括它们：
 <programlisting>
 include 'shared.conf'
 include 'memory.conf'
 include 'server.conf'
 </programlisting>
       所有的系统将会有相同的<filename>shared.conf</>。每个有特定内存量的服务器可以共享相同的<filename>memory.conf</>。你可能对所有 8GB 内存的服务器有一个，而对那些 16GB 内存的服务器有另一个。并且最后<filename>server.conf</>可以装有真正服务器相关的配置信息。
     </para>

<!--==========================orignal english content==========================
     <para>
      Another possibility is to create a configuration file directory and
      put this information into files there. For example, a <filename>conf.d</>
      directory could be referenced at the end of <filename>postgresql.conf</>:
<programlisting>
include_dir 'conf.d'
</programlisting>
      Then you could name the files in the <filename>conf.d</> directory
      like this:
<programlisting>
00shared.conf
01memory.conf
02server.conf
</programlisting>
       This naming convention establishes a clear order in which these
       files will be loaded.  This is important because only the last
       setting encountered for a particular parameter while the server is
       reading configuration files will be used.  In this example,
       something set in <filename>conf.d/02server.conf</> would override a
       value set in <filename>conf.d/01memory.conf</>.
     </para>
____________________________________________________________________________-->
     <para>
       另一中可能性是创建一个配置文件目录并把这个信息放到其中的文件里。例如，一个<filename>conf.d</>目录可以在<filename>postgresql.conf</>的末尾被引用：
 <programlisting>
 include_dir 'conf.d'
 </programlisting>
       然后你可以这样命名<filename>conf.d</>目录中的文件：
 <programlisting>
 00shared.conf
 01memory.conf
 02server.conf
 </programlisting>
       这种命名习惯建立了这些文件将被载入的清晰顺序。这是很重要的，因为在服务器读取配置
       文件时，对于一个特定的参数只有最后碰到的一个设置才会被使用。在这个例子中，
       <filename>conf.d/02server.conf</>设置的东西将会覆盖在
       <filename>conf.d/01memory.conf</>中相同参数的值。
     </para>

<!--==========================orignal english content==========================
     <para>
      You might instead use this approach to naming the files
      descriptively:
<programlisting>
00shared.conf
01memory-8GB.conf
02server-foo.conf
</programlisting>
      This sort of arrangement gives a unique name for each configuration file
      variation.  This can help eliminate ambiguity when several servers have
      their configurations all stored in one place, such as in a version
      control repository.  (Storing database configuration files under version
      control is another good practice to consider.)
     </para>
____________________________________________________________________________-->
     <para>
       你还可以使用这种配置目录方法，在命名文件时更有描述性：
 <programlisting>
 00shared.conf
 01memory-8GB.conf
 02server-foo.conf
 </programlisting>
       这种形式的安排为每个配置文件变体给定了一个唯一的名称。当多个服务器把它们的配置全部存储在一个位置（例如在一个版本控制仓库中）时，这可以帮助消除歧义（在版本控制下存储数据库配置文件是另一个值得考虑的好方法）。
     </para>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-file-locations">
<!--==========================orignal english content==========================
    <title>File Locations</title>
____________________________________________________________________________-->
    <title>文件位置</title>

<!--==========================orignal english content==========================
     <para>
      In addition to the <filename>postgresql.conf</filename> file
      already mentioned, <productname>PostgreSQL</productname> uses
      two other manually-edited configuration files, which control
      client authentication (their use is discussed in <xref
      linkend="client-authentication">).  By default, all three
      configuration files are stored in the database cluster's data
      directory.  The parameters described in this section allow the
      configuration files to be placed elsewhere.  (Doing so can ease
      administration.  In particular it is often easier to ensure that
      the configuration files are properly backed-up when they are
      kept separate.)
     </para>
____________________________________________________________________________-->
     <para>
      除了已经提到过的<filename>postgresql.conf</filename>文件之外，<productname>PostgreSQL</productname>还使用另外两个手工编辑的配置文件，它们控制客户端认证（其使用在<xref linkend="client-authentication">中讨论）。默认情况下，所有三个配置文件都存放在数据库集簇的数据目录中。 本节描述的参数允许配置文件放在别的地方（这么做可以简化管理，特别是如果配置文件被独立放置，可以很容易保证它得到恰当的备份）。
     </para>

     <variablelist>
     <varlistentry id="guc-data-directory" xreflabel="data_directory">
<!--==========================orignal english content==========================
      <term><varname>data_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>data_directory</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>data_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>data_directory</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         Specifies the directory to use for data storage.
         This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
         指定用于数据存储的目录。这个选项只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-config-file" xreflabel="config_file">
<!--==========================orignal english content==========================
      <term><varname>config_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>config_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>config_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>config_file</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         Specifies the main server configuration file
         (customarily called <filename>postgresql.conf</>).
         This parameter can only be set on the <command>postgres</command> command line.
       </para>
____________________________________________________________________________-->
       <para>
         指定主服务器配置文件（通常叫<filename>postgresql.conf</>）。这个参数只能在<command>postgres</command>命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hba-file" xreflabel="hba_file">
<!--==========================orignal english content==========================
      <term><varname>hba_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>hba_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>hba_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>hba_file</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         Specifies the configuration file for host-based authentication
         (customarily called <filename>pg_hba.conf</>).
         This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
         指定基于主机认证配置文件（通常叫<filename>pg_hba.conf</>）。 这个参数只能在服务器启动的时候设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ident-file" xreflabel="ident_file">
<!--==========================orignal english content==========================
      <term><varname>ident_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ident_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ident_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ident_file</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         Specifies the configuration file for
         <xref linkend="auth-username-maps"> user name mapping
         (customarily called <filename>pg_ident.conf</>).
         This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
         指定用于<xref linkend="auth-username-maps">用户名称映射的配置文件（通常叫<filename>pg_ident.conf</>）。这个参数只能在服务器启动的时候设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-external-pid-file" xreflabel="external_pid_file">
<!--==========================orignal english content==========================
      <term><varname>external_pid_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>external_pid_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>external_pid_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>external_pid_file</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of an additional process-ID (PID) file that the
        server should create for use by server administration programs.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定可被服务器创建的用于管理程序的额外进程 ID（PID）文件。这个参数只能在服务器启动的时候设置。
       </para>
      </listitem>
     </varlistentry>
     </variablelist>

<!--==========================orignal english content==========================
     <para>
      In a default installation, none of the above parameters are set
      explicitly.  Instead, the
      data directory is specified by the <option>-D</option> command-line
      option or the <envar>PGDATA</envar> environment variable, and the
      configuration files are all found within the data directory.
     </para>
____________________________________________________________________________-->
     <para>
      在默认安装中不会显式设置以上参数。相反，命令行参数<option>-D</option>或者环境变量<envar>PGDATA</envar>指定数据目录，并且上述配置文件都能在数据目录中找到。
     </para>

<!--==========================orignal english content==========================
     <para>
      If you wish to keep the configuration files elsewhere than the
      data directory, the <command>postgres</command> <option>-D</option>
      command-line option or <envar>PGDATA</envar> environment variable
      must point to the directory containing the configuration files,
      and the <varname>data_directory</> parameter must be set in
      <filename>postgresql.conf</filename> (or on the command line) to show
      where the data directory is actually located.  Notice that
      <varname>data_directory</> overrides <option>-D</option> and
      <envar>PGDATA</envar> for the location
      of the data directory, but not for the location of the configuration
      files.
     </para>
____________________________________________________________________________-->
     <para>
      如果你想把配置文件放在别的地方而不是数据目录中，那么<command>postgres</command> <option>-D</option>命令行选项或者环境变量<envar>PGDATA</envar>必须指向包含配置文件的目录，并且<filename>postgresql.conf</filename>中（或者命令行上）的<varname>data_directory</>参数必须显示数据目录实际存放的地方。请注意，<varname>data_directory</>将覆盖<option>-D</option>和<envar>PGDATA</envar>指定的数据目录位置，但是不覆盖配置文件的位置。
     </para>

<!--==========================orignal english content==========================
     <para>
      If you wish, you can specify the configuration file names and locations
      individually using the parameters <varname>config_file</>,
      <varname>hba_file</> and/or <varname>ident_file</>.
      <varname>config_file</> can only be specified on the
      <command>postgres</command> command line, but the others can be
      set within the main configuration file.  If all three parameters plus
      <varname>data_directory</> are explicitly set, then it is not necessary
      to specify <option>-D</option> or <envar>PGDATA</envar>.
     </para>
____________________________________________________________________________-->
     <para>
      如果你愿意，可以使用选项<varname>config_file</>、<varname>hba_file</>和/或<varname>ident_file</>单独指定配置文件名称和位置。<varname>config_file</>只能在<command>postgres</command>命令行上指定，但是其他文件可以在主配置文件中设置。如果所有三个参数外加<varname>data_directory</>被显式地设置，则不必指定<option>-D</option>或<envar>PGDATA</envar>。
     </para>

<!--==========================orignal english content==========================
     <para>
      When setting any of these parameters, a relative path will be interpreted
      with respect to the directory in which <command>postgres</command>
      is started.
     </para>
____________________________________________________________________________-->
     <para>
      在设置任何这些参数时，相对路径将被解释为相对于<command>postgres</command>启动路径的路径。
     </para>
   </sect1>

   <sect1 id="runtime-config-connection">
<!--==========================orignal english content==========================
    <title>Connections and Authentication</title>
____________________________________________________________________________-->
    <title>连接和认证</title>

    <sect2 id="runtime-config-connection-settings">
<!--==========================orignal english content==========================
     <title>Connection Settings</title>
____________________________________________________________________________-->
     <title>连接设置</title>

     <variablelist>

     <varlistentry id="guc-listen-addresses" xreflabel="listen_addresses">
<!--==========================orignal english content==========================
      <term><varname>listen_addresses</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>listen_addresses</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>listen_addresses</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>listen_addresses</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         Specifies the TCP/IP address(es) on which the server is
         to listen for connections from client applications.
         The value takes the form of a comma-separated list of host names
         and/or numeric IP addresses.  The special entry <literal>*</>
         corresponds to all available IP interfaces.  The entry
         <literal>0.0.0.0</> allows listening for all IPv4 addresses and
         <literal>::</> allows listening for all IPv6 addresses.
         If the list is empty, the server does not listen on any IP interface
         at all, in which case only Unix-domain sockets can be used to connect
         to it.
         The default value is <systemitem class="systemname">localhost</>,
         which allows only local TCP/IP <quote>loopback</> connections to be
         made.  While client authentication (<xref
         linkend="client-authentication">) allows fine-grained control
         over who can access the server, <varname>listen_addresses</varname>
         controls which interfaces accept connection attempts, which
         can help prevent repeated malicious connection requests on
         insecure network interfaces.  This parameter can only be set
         at server start.
       </para>
____________________________________________________________________________-->
       <para>
         指定服务器在哪些 TCP/IP 地址上监听客户端连接。值的形式是一个逗号分隔的主机名和/或数字 IP 地址列表。特殊项<literal>*</>对应所有可用 IP 接口。项<literal>0.0.0.0</>允许监听所有 IPv4 地址并且<literal>::</>允许监听所有 IPv6 地址。如果列表为空，服务器将根本不会监听任何 IP 接口，在这种情况中只能使用 Unix 域套接字来连接它。默认值是<systemitem class="systemname">localhost</>，它只允许建立本地 TCP/IP <quote>环回</>连接。虽然客户端认证（<xref linkend="client-authentication">）允许细粒度地控制谁能访问服务器，<varname>listen_addresses</varname>控制哪些接口接受连接尝试，这能帮助在不安全网络接口上阻止重复的恶意连接请求。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-port" xreflabel="port">
<!--==========================orignal english content==========================
      <term><varname>port</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>port</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>port</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>port</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The TCP port the server listens on; 5432 by default.  Note that the
        same port number is used for all IP addresses the server listens on.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        服务器监听的 TCP 端口；默认是 5432 。请注意服务器会同一个端口号监听所有的 IP 地址。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-connections" xreflabel="max_connections">
<!--==========================orignal english content==========================
      <term><varname>max_connections</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_connections</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_connections</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_connections</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Determines the maximum number of concurrent connections to the
        database server. The default is typically 100 connections, but
        might be less if your kernel settings will not support it (as
        determined during <application>initdb</>).  This parameter can
        only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        决定数据库的最大并发连接数。默认值通常是 100 个连接，但是如果内核设置不支持（<application>initdb</>时决定），可能会比这个 数少。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
____________________________________________________________________________-->
       <para>
        当运行一个后备服务器时，你必须设置这个参数等于或大于主服务器上的参数。否则，后备服务器上可能无法允许查询。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-superuser-reserved-connections"
     xreflabel="superuser_reserved_connections">
<!--==========================orignal english content==========================
      <term><varname>superuser_reserved_connections</varname>
      (<type>integer</type>)
      <indexterm>
       <primary><varname>superuser_reserved_connections</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>superuser_reserved_connections</varname>
      (<type>integer</type>)
      <indexterm>
       <primary><varname>superuser_reserved_connections</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Determines the number of connection <quote>slots</quote> that
        are reserved for connections by <productname>PostgreSQL</>
        superusers.  At most <xref linkend="guc-max-connections">
        connections can ever be active simultaneously.  Whenever the
        number of active concurrent connections is at least
        <varname>max_connections</> minus
        <varname>superuser_reserved_connections</varname>, new
        connections will be accepted only for superusers, and no
        new replication connections will be accepted.
       </para>
____________________________________________________________________________-->
       <para>
        决定为<productname>PostgreSQL</>超级用户连接而保留的连接<quote>槽</quote>数。 同时活跃的并发连接最多<xref linkend="guc-max-connections">个。任何时候，活跃的并发连接数最多为<varname>max_connections</>减去 <varname>superuser_reserved_connections</varname>，新连接就只能由超级用户发起了，并且不会有新的复制连接被接受。
       </para>

<!--==========================orignal english content==========================
       <para>
        The default value is three connections. The value must be less
        than the value of <varname>max_connections</varname>. This
        parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        默认值是 3 。这个值必须小于<varname>max_connections</varname>的值。 这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-directories" xreflabel="unix_socket_directories">
<!--==========================orignal english content==========================
      <term><varname>unix_socket_directories</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_directories</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>unix_socket_directories</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_directories</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the directory of the Unix-domain socket(s) on which the
        server is to listen for connections from client applications.
        Multiple sockets can be created by listing multiple directories
        separated by commas.  Whitespace between entries is
        ignored; surround a directory name with double quotes if you need
        to include whitespace or commas in the name.
        An empty value
        specifies not listening on any Unix-domain sockets, in which case
        only TCP/IP sockets can be used to connect to the server.
        The default value is normally
        <filename>/tmp</filename>, but that can be changed at build time.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定服务器用于监听来自客户端应用的连接的 Unix 域套接字目录。通过列出用逗号分隔的多个目录可以建立多个套接字。项之间的空白被忽略，如果你需要在名字中包括空白或逗号，在目录名周围放上双引号。一个空值指定在任何 Unix 域套接字上都不监听，在这种情况中只能使用 TCP/IP 套接字来连接到服务器。默认值通常是<filename>/tmp</filename>，但是在编译时可以被改变。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        In addition to the socket file itself, which is named
        <literal>.s.PGSQL.<replaceable>nnnn</></literal> where
        <replaceable>nnnn</> is the server's port number, an ordinary file
        named <literal>.s.PGSQL.<replaceable>nnnn</>.lock</literal> will be
        created in each of the <varname>unix_socket_directories</> directories.
        Neither file should ever be removed manually.
       </para>
____________________________________________________________________________-->
       <para>
        除了套接字文件本身（名为<literal>.s.PGSQL.<replaceable>nnnn</></literal>，其中<replaceable>nnnn</>是服务器的端口号），一个名为<literal>.s.PGSQL.<replaceable>nnnn</>.lock</literal>的普通文件会在每一个<varname>unix_socket_directories</>目录中被创建。任何一个都不应该被手工移除。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter is irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
____________________________________________________________________________-->
       <para>
        Windows下没有 Unix 域套接字，因此这个参数与 Windows 无关。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-group" xreflabel="unix_socket_group">
<!--==========================orignal english content==========================
      <term><varname>unix_socket_group</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_group</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>unix_socket_group</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>unix_socket_group</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the owning group of the Unix-domain socket(s).  (The owning
        user of the sockets is always the user that starts the
        server.)  In combination with the parameter
        <varname>unix_socket_permissions</varname> this can be used as
        an additional access control mechanism for Unix-domain connections.
        By default this is the empty string, which uses the default
        group of the server user.  This parameter can only be set at
        server start.
       </para>
____________________________________________________________________________-->
       <para>
        设置 Unix 域套接字的所属组（套接字的所属用户总是启动服务器的用户）。可以与选项<varname>unix_socket_permissions</varname>一起用于对 Unix域连接进行访问控制。默认是一个空字符串，表示服务器用户的默认组。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter is irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
____________________________________________________________________________-->
       <para>
        Windows 下没有 Unix 域套接字，因此这个参数与 Windows 无关。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-unix-socket-permissions" xreflabel="unix_socket_permissions">
<!--==========================orignal english content==========================
      <term><varname>unix_socket_permissions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>unix_socket_permissions</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>unix_socket_permissions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>unix_socket_permissions</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the access permissions of the Unix-domain socket(s).  Unix-domain
        sockets use the usual Unix file system permission set.
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
       </para>
____________________________________________________________________________-->
       <para>
        设置 Unix 域套接字的访问权限。Unix 域套接字使用普通的 Unix 文件系统权限集。这个参数值应该是数字的形式，也就是系统调用<function>chmod</function>和<function>umask</function>接受的 形式（如果使用自定义的八进制格式，数字必须以一个<literal>0</literal>（零）开头）。
       </para>

<!--==========================orignal english content==========================
       <para>
        The default permissions are <literal>0777</literal>, meaning
        anyone can connect. Reasonable alternatives are
        <literal>0770</literal> (only user and group, see also
        <varname>unix_socket_group</varname>) and <literal>0700</literal>
        (only user). (Note that for a Unix-domain socket, only write
        permission matters, so there is no point in setting or revoking
        read or execute permissions.)
       </para>
____________________________________________________________________________-->
       <para>
        默认的权限是<literal>0777</literal>，意思是任何人都可以连接。合理的候选是<literal>0770</literal>（只有用户和同组的人可以访问， 又见<varname>unix_socket_group</varname>）和<literal>0700</literal>（只有用户自己可以访问）（请注意，对于 Unix 域套接字，只有写权限有麻烦，因此没有对读取和执行权限的设置和收回）。
       </para>

<!--==========================orignal english content==========================
       <para>
        This access control mechanism is independent of the one
        described in <xref linkend="client-authentication">.
       </para>
____________________________________________________________________________-->
       <para>
        这个访问控制机制与<xref linkend="client-authentication">中的用户认证没有关系。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter is irrelevant on systems, notably Solaris as of Solaris
        10, that ignore socket permissions entirely.  There, one can achieve a
        similar effect by pointing <varname>unix_socket_directories</> to a
        directory having search permission limited to the desired audience.
        This parameter is also irrelevant on Windows, which does not have
        Unix-domain sockets.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数与完全忽略套接字权限的系统无关，尤其是自版本10以上的Solaris。
        在那些系统上，可以通过把<varname>unix_socket_directories</>指向一个把搜索权限
        限制给指定用户的目录来实现相似的效果。
        因为 Windows 下没有 Unix 域套接字，因此这个参数也与 Windows 无关。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour" xreflabel="bonjour">
<!--==========================orignal english content==========================
      <term><varname>bonjour</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bonjour</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>bonjour</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>bonjour</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables advertising the server's existence via
        <productname>Bonjour</productname>.  The default is off.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        通过<productname>Bonjour</productname>广告服务器的存在。默认值是关闭。
        这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bonjour-name" xreflabel="bonjour_name">
<!--==========================orignal english content==========================
      <term><varname>bonjour_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>bonjour_name</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>bonjour_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>bonjour_name</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the <productname>Bonjour</productname> service
        name.  The computer name is used if this parameter is set to the
        empty string <literal>''</> (which is the default).  This parameter is
        ignored if the server was not compiled with
        <productname>Bonjour</productname> support.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定<productname>Bonjour</productname>服务名称。空字符串<literal>''</>（默认值）表示使用计算机名。 如果编译时没有打开<productname>Bonjour</productname>支持那么将忽略这个参数。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-idle" xreflabel="tcp_keepalives_idle">
<!--==========================orignal english content==========================
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_idle</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>tcp_keepalives_idle</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_idle</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the number of seconds of inactivity after which TCP
        should send a keepalive message to the client.  A value of 0 uses
        the system default.
        This parameter is supported only on systems that support the
        <symbol>TCP_KEEPIDLE</> or <symbol>TCP_KEEPALIVE</> symbols, and on
        Windows; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
____________________________________________________________________________-->
       <para>
        指定不活动多少秒之后通过 TCP 向客户端发送一个 keepalive 消息。 0 值表示使用默认值。这个参数只有在支持<symbol>TCP_KEEPIDLE</>或<symbol>TCP_KEEPALIVE</>符号的系统或 Windows 上才可以使用。在其他系统上，它必须为零。在通过 Unix 域套接字连接的会话中，这个参数被忽略并且总是读作零。
       </para>
       <note>
<!--==========================orignal english content==========================
        <para>
         On Windows, a value of 0 will set this parameter to 2 hours,
         since Windows does not provide a way to read the system default value.
        </para>
____________________________________________________________________________-->
        <para>
         在 Windows 上，值若为 0，系统会将该参数设置为 2 小时，因为 Windows 不支持读取系统默认值。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-interval" xreflabel="tcp_keepalives_interval">
<!--==========================orignal english content==========================
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_interval</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>tcp_keepalives_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_interval</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the number of seconds after which a TCP keepalive message
        that is not acknowledged by the client should be retransmitted.
        A value of 0 uses the system default.
        This parameter is supported only on systems that support the
        <symbol>TCP_KEEPINTVL</> symbol, and on Windows; on other systems, it
        must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
____________________________________________________________________________-->
       <para>
        指定在多少秒之后重发一个还没有被客户端告知已收到的 TCP keepalive 消息。0 值表示使用系统默认值。这个参数只有在支持<symbol>TCP_KEEPINTVL</>符号的系统或 Windows 上才可以使用。在其他系统上，必须为零。在通过 Unix域套接字连接的会话中，这个参数被忽略并总被读作零。
       </para>
       <note>
<!--==========================orignal english content==========================
        <para>
         On Windows, a value of 0 will set this parameter to 1 second,
         since Windows does not provide a way to read the system default value.
        </para>
____________________________________________________________________________-->
        <para>
         在 Windows 上，值若为 0，系统会将该参数设置为 1 秒，因为 Windows 不支持读取系统默认值。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-tcp-keepalives-count" xreflabel="tcp_keepalives_count">
<!--==========================orignal english content==========================
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_count</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>tcp_keepalives_count</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>tcp_keepalives_count</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the number of TCP keepalives that can be lost before
        the server's connection to the client is considered dead.  A value of 0
        uses the system default.  This parameter is
        supported only on systems that support the <symbol>TCP_KEEPCNT</>
        symbol; on other systems, it must be zero.
        In sessions connected via a Unix-domain socket, this parameter is
        ignored and always reads as zero.
       </para>
____________________________________________________________________________-->
       <para>
        指定与客户端的服务器连接被认为死掉之前允许丢失的 TCP keepalive 数量。0 值表示使用系统默认值。这个参数只有在支持<symbol>TCP_KEEPCNT</>符号的系统上才可以使用。在其他系统上，必须为零。在通过 Unix 域套接字连接的会话中，这个参数被忽略并总被读作零。
       </para>
       <note>
<!--==========================orignal english content==========================
        <para>
         This parameter is not supported on Windows, and must be zero.
        </para>
____________________________________________________________________________-->
        <para>
         Windows 不支持该参数，且必须为零。
        </para>
       </note>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-connection-security">
<!--==========================orignal english content==========================
     <title>Security and Authentication</title>
____________________________________________________________________________-->
     <title>安全和认证</title>

     <variablelist>
     <varlistentry id="guc-authentication-timeout" xreflabel="authentication_timeout">
<!--==========================orignal english content==========================
      <term><varname>authentication_timeout</varname> (<type>integer</type>)
      <indexterm><primary>timeout</><secondary>client authentication</></indexterm>
      <indexterm><primary>client authentication</><secondary>timeout during</></indexterm>
      <indexterm>
       <primary><varname>authentication_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>authentication_timeout</varname> (<type>integer</type>)
      <indexterm><primary>timeout</><secondary>client authentication</></indexterm>
      <indexterm><primary>client authentication</><secondary>timeout during</></indexterm>
      <indexterm>
       <primary><varname>authentication_timeout</>配置参数</primary>
      </indexterm></term>

      <listitem>
<!--==========================orignal english content==========================
       <para>
        Maximum time to complete client authentication, in seconds. If a
        would-be client has not completed the authentication protocol in
        this much time, the server closes the connection. This prevents
        hung clients from occupying a connection indefinitely.
        The default is one minute (<literal>1m</>).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        完成客户端认证的最长时间，以秒计。如果一个客户端没有在这段时间里完成 认证协议，服务器将关闭连接。这样就避免了出问题的客户端无限制地占有一个连接。默认值是 1分钟（<literal>1m</>）。这个参数只能在服务器命令行上或者在<filename>postgresql.conf</>文件中设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl" xreflabel="ssl">
<!--==========================orignal english content==========================
      <term><varname>ssl</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ssl</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables <acronym>SSL</> connections. Please read
        <xref linkend="ssl-tcp"> before using this. The default
        is <literal>off</>. This parameter can only be set at server
        start.  <acronym>SSL</> communication is only possible with
        TCP/IP connections.
       </para>
____________________________________________________________________________-->
       <para>
        启用<acronym>SSL</>连接。请在使用这个参数之前阅读<xref linkend="ssl-tcp">。默认是<literal>off</>。 这个选项只能在服务器启动时设置。<acronym>SSL</>通信只能和 TCP/IP 连接一起使用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ca-file" xreflabel="ssl_ca_file">
<!--==========================orignal english content==========================
      <term><varname>ssl_ca_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ca_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_ca_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ca_file</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of the file containing the SSL server certificate
        authority (CA).  The default is empty, meaning no CA file is loaded,
        and client certificate verification is not performed.  (In previous
        releases of PostgreSQL, the name of this file was hard-coded
        as <filename>root.crt</filename>.)  Relative paths are relative to the
        data directory.  This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定包含 SSL 服务器证书颁发机构（CA）的文件名。默认值为空，表示不载入 CA 文件，并且不执行客户端证书验证（在之前的 PostgreSQL 发布中，这个文件的名字被硬编码成<filename>root.crt</filename>）。相对路径是相对于数据目录。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-cert-file" xreflabel="ssl_cert_file">
<!--==========================orignal english content==========================
      <term><varname>ssl_cert_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_cert_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_cert_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_cert_file</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of the file containing the SSL server certificate.
        The default is <filename>server.crt</filename>.  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定包含 SSL 服务器证书的文件名。默认值是<filename>server.crt</filename>。相对路径是相对于数据目录的。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-crl-file" xreflabel="ssl_crl_file">
<!--==========================orignal english content==========================
      <term><varname>ssl_crl_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_crl_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_crl_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_crl_file</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of the file containing the SSL server certificate
        revocation list (CRL).  The default is empty, meaning no CRL file is
        loaded.  (In previous releases of PostgreSQL, the name of this file was
        hard-coded as <filename>root.crl</filename>.)  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定包含 SSL 服务器证书撤销列表（CRL）的文件名。默认值为空，意味着不载入 CRL 文件（在之前的 PostgreSQL 发布中，这个文件的名称被硬编码为<filename>root.crl</filename>）。相对路径是相对于数据目录。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-key-file" xreflabel="ssl_key_file">
<!--==========================orignal english content==========================
      <term><varname>ssl_key_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_key_file</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_key_file</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_key_file</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of the file containing the SSL server private key.
        The default is <filename>server.key</filename>.  Relative paths are
        relative to the data directory.  This parameter can only be set at
        server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定包含 SSL 服务器私钥的文件名。默认值为<filename>server.key</filename>。  相对路径是相对于数据目录。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ciphers" xreflabel="ssl_ciphers">
<!--==========================orignal english content==========================
      <term><varname>ssl_ciphers</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ciphers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_ciphers</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ciphers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies a list of <acronym>SSL</> cipher suites that are allowed to be
        used on secure connections.  See
        the <citerefentry><refentrytitle>ciphers</></citerefentry> manual page
        in the <application>OpenSSL</> package for the syntax of this setting
        and a list of supported values.  The default value is
        <literal>HIGH:MEDIUM:+3DES:!aNULL</>.  It is usually reasonable,
        unless you have specific security requirements.
       </para>
____________________________________________________________________________-->
       <para>
        指定一个<acronym>SSL</>密码列表，用于安全连接。这个设置的语法和所支持的值列表可以
        参见<application>OpenSSL</>包中的
        <citerefentry><refentrytitle>ciphers</></citerefentry>手册页。默认值是
        <literal>HIGH:MEDIUM:+3DES:!aNULL</>。它通常是合理的，除非你有特别的安全性需求。
       </para>

<!--==========================orignal english content==========================
       <para>
        Explanation of the default value:
        <variablelist>
         <varlistentry>
          <term><literal>HIGH</literal></term>
          <listitem>
           <para>
            Cipher suites that use ciphers from <literal>HIGH</> group (e.g.,
            AES, Camellia, 3DES)
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>MEDIUM</literal></term>
          <listitem>
           <para>
            Cipher suites that use ciphers from <literal>MEDIUM</> group
            (e.g., RC4, SEED)
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>+3DES</literal></term>
          <listitem>
           <para>
            The OpenSSL default order for <literal>HIGH</> is problematic
            because it orders 3DES higher than AES128.  This is wrong because
            3DES offers less security than AES128, and it is also much
            slower.  <literal>+3DES</> reorders it after all other
            <literal>HIGH</> and <literal>MEDIUM</> ciphers.
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>!aNULL</literal></term>
          <listitem>
           <para>
            Disables anonymous cipher suites that do no authentication.  Such
            cipher suites are vulnerable to man-in-the-middle attacks and
            therefore should not be used.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>
____________________________________________________________________________-->
       <para>
        默认值的解释：
        <variablelist>
         <varlistentry>
          <term><literal>HIGH</literal></term>
          <listitem>
           <para>
            使用来自<literal>HIGH</>组的密码的密码组（例如 AES, Camellia, 3DES）
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>MEDIUM</literal></term>
          <listitem>
           <para>
            使用来自<literal>MEDIUM</>组的密码的密码组（例如 RC4, SEED）
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>+3DES</literal></term>
          <listitem>
           <para>
            OpenSSL 对<literal>HIGH</>的默认排序是有问题的，因为它认为 3DES 比
            AES128 更高。这是错误的，因为 3DES 提供的安全性比 AES128 低，并且它也更加慢。
            <literal>+3DES</>把它重新排序在所有其他<literal>HIGH</>和
            <literal>MEDIUM</>密码之后。
           </para>
          </listitem>
         </varlistentry>

         <varlistentry>
          <term><literal>!aNULL</literal></term>
          <listitem>
           <para>
            禁用不做认证的匿名密码组。这类密码组容易收到中间人攻击，因此不应被使用。
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </para>

<!--==========================orignal english content==========================
       <para>
        Available cipher suite details will vary across OpenSSL versions.  Use
        the command
        <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal> to
        see actual details for the currently installed <application>OpenSSL</>
        version.  Note that this list is filtered at run time based on the
        server key type.
       </para>
____________________________________________________________________________-->
       <para>
        可用的密码组细节可能会随着 OpenSSL 版本变化。可使用命令
        <literal>openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</literal>来查看
        当前安装的<application>OpenSSL</>版本的实际细节。注意这个列表是根据服务器密钥类型
        在运行时过滤过的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-prefer-server-ciphers" xreflabel="ssl_prefer_server_ciphers">
<!--==========================orignal english content==========================
      <term><varname>ssl_prefer_server_ciphers</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>ssl_prefer_server_ciphers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_prefer_server_ciphers</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>ssl_prefer_server_ciphers</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies whether to use the server's SSL cipher preferences, rather
        than the client's.  The default is true.
       </para>
____________________________________________________________________________-->
       <para>
        指定是否使用服务器的 SSL 密码首选项，而不是用客户端的。默认为真。
       </para>

<!--==========================orignal english content==========================
       <para>
        Older PostgreSQL versions do not have this setting and always use the
        client's preferences.  This setting is mainly for backward
        compatibility with those versions.  Using the server's preferences is
        usually better because it is more likely that the server is appropriately
        configured.
       </para>
____________________________________________________________________________-->
       <para>
        老的PostgreSQL版本没有这个设置并且总是使用客户端的首选项。这个设置主要用于与那些版本
        的向后兼容性。使用服务器的首选项通常会更好，因为服务器更可能会被合适地配置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-ssl-ecdh-curve" xreflabel="ssl_ecdh_curve">
<!--==========================orignal english content==========================
      <term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ecdh_curve</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ssl_ecdh_curve</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>ssl_ecdh_curve</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the name of the curve to use in <acronym>ECDH</> key
        exchange.  It needs to be supported by all clients that connect.
        It does not need to be same curve as used by server's Elliptic
        Curve key.  The default is <literal>prime256v1</>.
       </para>
____________________________________________________________________________-->
       <para>
        指定用在<acronym>ECDH</>密钥交换中的曲线名称。它需要被所有连接的客户端支持。
        它不需要与服务器椭圆曲线密钥使用的曲线相同。默认值是<literal>prime256v1</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        OpenSSL names for most common curves:
        <literal>prime256v1</> (NIST P-256),
        <literal>secp384r1</> (NIST P-384),
        <literal>secp521r1</> (NIST P-521).
       </para>
____________________________________________________________________________-->
       <para>
        OpenSSL 命名了最常见的曲线：
        <literal>prime256v1</> (NIST P-256)、
        <literal>secp384r1</> (NIST P-384)、
        <literal>secp521r1</> (NIST P-521)。
       </para>

<!--==========================orignal english content==========================
       <para>
        The full list of available curves can be shown with the command
        <command>openssl ecparam -list_curves</command>.  Not all of them
        are usable in <acronym>TLS</> though.
       </para>
____________________________________________________________________________-->
       <para>
        <command>openssl ecparam -list_curves</command>命令可以显示可用曲线的完
        整列表。不过并不是所有的都在<acronym>TLS</>中可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-password-encryption" xreflabel="password_encryption">
<!--==========================orignal english content==========================
      <term><varname>password_encryption</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>password_encryption</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>password_encryption</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>password_encryption</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When a password is specified in <xref
        linkend="sql-createuser"> or
        <xref linkend="sql-alterrole">
        without writing either <literal>ENCRYPTED</> or
        <literal>UNENCRYPTED</>, this parameter determines whether the
        password is to be encrypted. The default is <literal>on</>
        (encrypt the password).
       </para>
____________________________________________________________________________-->
       <para>
        当在<xref linkend="sql-createuser">或<xref linkend="sql-alterrole">中指定了一个密码，而没有写<literal>ENCRYPTED</>或<literal>UNENCRYPTED</>时，这个参数决定是否密码会被加密。默认值是<literal>on</>（加密密码）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-server-keyfile" xreflabel="krb_server_keyfile">
<!--==========================orignal english content==========================
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>krb_server_keyfile</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>krb_server_keyfile</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>krb_server_keyfile</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the location of the Kerberos server key file. See
        <xref linkend="gssapi-auth">
        for details. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        设置 Kerberos 服务器密钥文件的位置。详见<xref linkend="gssapi-auth">。这个参数只能在 <filename>postgresql.conf</>文件中或服务器命令行上进行设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-krb-caseins-users" xreflabel="krb_caseins_users">
<!--==========================orignal english content==========================
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>krb_caseins_users</varname> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>krb_caseins_users</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>krb_caseins_users</varname>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets whether GSSAPI user names should be treated
        case-insensitively.
        The default is <literal>off</> (case sensitive). This parameter can only be
        set in the <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        设置 Kerberos 和 GSSAPI 用户名是否应区分大小写。默认是<literal>off</>（区分大小写）。这个参数只能在 <filename>postgresql.conf</>文件中或服务器命令行上进行设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-db-user-namespace" xreflabel="db_user_namespace">
<!--==========================orignal english content==========================
      <term><varname>db_user_namespace</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>db_user_namespace</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>db_user_namespace</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>db_user_namespace</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This parameter enables per-database user names.  It is off by default.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        允许针对每个数据库的用户名。默认是关闭的。这个参数只能在 <filename>postgresql.conf</>文件中或服务器命令行上进行设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        If this is on, you should create users as <replaceable>username@dbname</>.
        When <replaceable>username</> is passed by a connecting client,
        <literal>@</> and the database name are appended to the user
        name and that database-specific user name is looked up by the
        server. Note that when you create users with names containing
        <literal>@</> within the SQL environment, you will need to
        quote the user name.
       </para>
____________________________________________________________________________-->
       <para>
        如果打开这个参数，你应该以<literal>username@dbname</>的方式创建用户。 当一个<literal>username</>被连接着的客户端传递时，<literal>@</>和数据库名被增加到用户名中并且那个数据库相关的用户名会被服务器查找。注意，当你在 SQL 环境里创建包含<literal>@</>的用户名时， 你需要用引号包围用户名。
       </para>

<!--==========================orignal english content==========================
       <para>
        With this parameter enabled, you can still create ordinary global
        users.  Simply append <literal>@</> when specifying the user
        name in the client, e.g. <literal>joe@</>.  The <literal>@</>
        will be stripped off before the user name is looked up by the
        server.
       </para>
____________________________________________________________________________-->
       <para>
        打开这个参数之后，你还是能够创建普通的全局用户。只要在客户端指定用户名时附加一个<literal>@</>，例如<literal>joe@</>。 在服务器查找这个用户名之前，这个<literal>@</>会被剥除。
       </para>

<!--==========================orignal english content==========================
       <para>
        <varname>db_user_namespace</> causes the client's and
        server's user name representation to differ.
        Authentication checks are always done with the server's user name
        so authentication methods must be configured for the
        server's user name, not the client's.  Because
        <literal>md5</> uses the user name as salt on both the
        client and server, <literal>md5</> cannot be used with
        <varname>db_user_namespace</>.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>db_user_namespace</>导致客户端和服务器的用户名表示变得不同。 认证检查总是使用服务器用户名来完成，因此认证方法必须为服务器的用户名配置，而不是客户端的用户名。因为在客户端和服务器上<literal>md5</>都使用用户名作为盐粒，<literal>md5</>不能和<varname>db_user_namespace</>一起使用。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         This feature is intended as a temporary measure until a
         complete solution is found.  At that time, this option will
         be removed.
        </para>
____________________________________________________________________________-->
        <para>
         这个特性只是一种临时方法，直到找到一个完全的解决方案。那个时候， 这个选项将被删除。
        </para>
       </note>
      </listitem>
     </varlistentry>

    </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-resource">
<!--==========================orignal english content==========================
    <title>Resource Consumption</title>
____________________________________________________________________________-->
    <title>资源消耗</title>

    <sect2 id="runtime-config-resource-memory">
<!--==========================orignal english content==========================
     <title>Memory</title>
____________________________________________________________________________-->
     <title>内存</title>

     <variablelist>
     <varlistentry id="guc-shared-buffers" xreflabel="shared_buffers">
<!--==========================orignal english content==========================
      <term><varname>shared_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>shared_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>shared_buffers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the amount of memory the database server uses for shared
        memory buffers.  The default is typically 128 megabytes
        (<literal>128MB</>), but might be less if your kernel settings will
        not support it (as determined during <application>initdb</>).
        This setting must be at least 128 kilobytes.  (Non-default
        values of <symbol>BLCKSZ</symbol> change the minimum.)  However,
        settings significantly higher than the minimum are usually needed
        for good performance.  This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        设置数据库服务器将使用的共享内存缓冲区量。默认通常是 128 兆字节（<literal>128MB</>），但是如果你的内核设置不支持（在<application>initdb</>时决定），那么可以会更少。这个设置必须至少为 128 千字节（<symbol>BLCKSZ</symbol>的非默认值将改变最小值）。不过为了更好的性能，通常会使用明显高于最小值的设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        If you have a dedicated database server with 1GB or more of RAM, a
        reasonable starting value for <varname>shared_buffers</varname> is 25%
        of the memory in your system.  There are some workloads where even
        large settings for <varname>shared_buffers</varname> are effective, but
        because <productname>PostgreSQL</productname> also relies on the
        operating system cache, it is unlikely that an allocation of more than
        40% of RAM to <varname>shared_buffers</varname> will work better than a
        smaller amount.  Larger settings for <varname>shared_buffers</varname>
        usually require a corresponding increase in
        <varname>max_wal_size</varname>, in order to spread out the
        process of writing large quantities of new or changed data over a
        longer period of time.
       </para>
____________________________________________________________________________-->
       <para>
        如果有一个专用的 1GB 或更多内存的数据库服务器，
        一个合理的<varname>shared_buffers</varname>开始值是系统内存的 25%。
        即使很大的<varname>shared_buffers</varname>有效，
        也会造成一些工作负载， 
        但因为<productname>PostgreSQL</productname>同样依赖操作系统的高速缓冲区，
        将<varname>shared_buffers</varname>设置为超过 40% 
        的RAM不太可能比一个小点值工作得更好。
        为了能把对写大量新的或改变的数据的处理分布在一个较长的时间段内，
        <varname>shared_buffers</varname>更大的
        设置通常要求对<varname>max_wal_size</varname>也做相应增加。
       </para>

<!--==========================orignal english content==========================
       <para>
        On systems with less than 1GB of RAM, a smaller percentage of RAM is
        appropriate, so as to leave adequate space for the operating system.
        Also, on Windows, large values for <varname>shared_buffers</varname>
        aren't as effective.  You may find better results keeping the setting
        relatively low and using the operating system cache more instead.  The
        useful range for <varname>shared_buffers</varname> on Windows systems
        is generally from 64MB to 512MB.
       </para>
____________________________________________________________________________-->
       <para>
        如果系统内存小于 1GB，一个较小的 RAM 百分数是合适的，这样可以为操作系统留下足够的空间。 同时，在 Windows 上，<varname>shared_buffers</varname>设置得较大也不一定有效。你会发现保持相对低的设置并且更多使用操作系统高速缓存会得到更好的结果。Windows 上可用的<varname>shared_buffers</varname>值通常是从 64MB 到 512 MB。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-huge-pages" xreflabel="huge_pages">
<!--==========================orignal english content==========================
      <term><varname>huge_pages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>huge_pages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>huge_pages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>huge_pages</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables/disables the use of huge memory pages. Valid values are
        <literal>try</literal> (the default), <literal>on</literal>,
        and <literal>off</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        启用/禁用巨型内存页面的使用。可用的值是
        <literal>try</literal>（默认）、<literal>on</literal>、
        和<literal>off</literal>。
       </para>

<!--==========================orignal english content==========================
       <para>
        At present, this feature is supported only on Linux. The setting is
        ignored on other systems when set to <literal>try</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        当前，只有 Linux 上支持这个特性。在其他系统上这个参数被设置为
        <literal>try</literal>时，它会被忽略。
       </para>

<!--==========================orignal english content==========================
       <para>
        The use of huge pages results in smaller page tables and less CPU time
        spent on memory management, increasing performance. For more details,
        see <xref linkend="linux-huge-pages">.
       </para>
____________________________________________________________________________-->
       <para>
        巨型页面的使用会导致更小的页面表以及花费在内存管理上的 CPU 时间更少，从而提高性能。
        详见<xref linkend="linux-huge-pages">。
       </para>

<!--==========================orignal english content==========================
       <para>
        With <varname>huge_pages</varname> set to <literal>try</literal>,
        the server will try to use huge pages, but fall back to using
        normal allocation if that fails. With <literal>on</literal>, failure
        to use huge pages will prevent the server from starting up. With
        <literal>off</literal>, huge pages will not be used.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>huge_pages</varname>被设置为<literal>try</literal>时，服务器将
        尝试使用巨型页面，如果失败则会转回去使用正常的分配。如果设置为
        <literal>on</literal>，使用巨型页面失败会阻止服务器启动。如果设置为
        <literal>off</literal>，则不会使用巨型页面。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-buffers" xreflabel="temp_buffers">
<!--==========================orignal english content==========================
      <term><varname>temp_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>temp_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_buffers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the maximum number of temporary buffers used by each database
        session.  These are session-local buffers used only for access to
        temporary tables.  The default is eight megabytes
        (<literal>8MB</>).  The setting can be changed within individual
        sessions, but only before the first use of temporary tables
        within the session; subsequent attempts to change the value will
        have no effect on that session.
       </para>
____________________________________________________________________________-->
       <para>
        设置每个数据库会话使用的临时缓冲区的最大数目。这些都是会话的本地缓冲区，只用于访问临时表。默认是 8 兆字节（<literal>8MB</>）。这个设置可以在独立的会话内部被改变，但是只有在会话第一次使用临时表之前才能改变； 在会话中随后企图改变该值是无效的。
       </para>

<!--==========================orignal english content==========================
       <para>
        A session will allocate temporary buffers as needed up to the limit
        given by <varname>temp_buffers</>.  The cost of setting a large
        value in sessions that do not actually need many temporary
        buffers is only a buffer descriptor, or about 64 bytes, per
        increment in <varname>temp_buffers</>.  However if a buffer is
        actually used an additional 8192 bytes will be consumed for it
        (or in general, <symbol>BLCKSZ</symbol> bytes).
       </para>
____________________________________________________________________________-->
       <para>
        一个会话将按照<varname>temp_buffers</>给出的限制根据需要分配临时缓冲区。如果在一个并不需要大量临时缓冲区的会话里设置一个大的数值， 其开销只是一个缓冲区描述符，或者说<varname>temp_buffers</>每增加一则增加大概 64 字节。不过，如果一个缓冲区被实际使用，那么它就会额外消耗 8192 字节（或者<symbol>BLCKSZ</symbol>字节）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-prepared-transactions" xreflabel="max_prepared_transactions">
<!--==========================orignal english content==========================
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_prepared_transactions</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_prepared_transactions</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_prepared_transactions</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the maximum number of transactions that can be in the
        <quote>prepared</> state simultaneously (see <xref
        linkend="sql-prepare-transaction">).
        Setting this parameter to zero (which is the default)
        disables the prepared-transaction feature.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        设置可以同时处于<quote>prepared</>状态的事务的最大数目（见<xref linkend="sql-prepare-transaction">）。把这个参数设置 为零（这是默认设置）将禁用预备事务特性。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        If you are not planning to use prepared transactions, this parameter
        should be set to zero to prevent accidental creation of prepared
        transactions.  If you are using prepared transactions, you will
        probably want <varname>max_prepared_transactions</varname> to be at
        least as large as <xref linkend="guc-max-connections">, so that every
        session can have a prepared transaction pending.
       </para>
____________________________________________________________________________-->
       <para>
        如果你不打算使用预备事务，可以把这个参数设置为零来防止意外创建预备事务。如果你正在使用预备事务，你将希望把<varname>max_prepared_transactions</varname>至少设置为<xref linkend="guc-max-connections">一样大，因此每一个会话可以有一个预备事务待处理。
       </para>

<!--==========================orignal english content==========================
       <para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
____________________________________________________________________________-->
       <para>
        当运行一个后备服务器时，这个参数必须至少与主服务器上的一样大。否则，后备服务器上将不会执行查询。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-work-mem" xreflabel="work_mem">
<!--==========================orignal english content==========================
      <term><varname>work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>work_mem</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the amount of memory to be used by internal sort operations
        and hash tables before writing to temporary disk files. The value
        defaults to four megabytes (<literal>4MB</>).
        Note that for a complex query, several sort or hash operations might be
        running in parallel; each operation will be allowed to use as much memory
        as this value specifies before it starts to write data into temporary
        files. Also, several running sessions could be doing such operations
        concurrently.  Therefore, the total memory used could be many
        times the value of <varname>work_mem</varname>; it is necessary to
        keep this fact in mind when choosing the value. Sort operations are
        used for <literal>ORDER BY</>, <literal>DISTINCT</>, and
        merge joins.
        Hash tables are used in hash joins, hash-based aggregation, and
        hash-based processing of <literal>IN</> subqueries.
       </para>
____________________________________________________________________________-->
       <para>
        指定在写到临时磁盘文件之前被内部排序操作和哈希表使用的内存量。该值默认为四兆字节（<literal>4MB</>）。注意对于一个复杂查询， 可能会并行运行好几个排序或者哈希操作；每个操作都会被允许使用这个参数指定的内存量，然后才会开始写数据到临时文件。同样，几个正在运行的会话可能并发进行这样的操作。因此被使用的总内存可能是<varname>work_mem</varname>值的好几倍，在选择这个值时一定要记住这一点。<literal>ORDER BY</>、<literal>DISTINCT</>和归并连接都要用到排序操作。哈希连接、基于哈希的聚集以及基于哈希的<literal>IN</>子查询处理中都要用到哈希表。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-maintenance-work-mem" xreflabel="maintenance_work_mem">
<!--==========================orignal english content==========================
      <term><varname>maintenance_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>maintenance_work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>maintenance_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>maintenance_work_mem</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum amount of memory to be used by maintenance
        operations, such as <command>VACUUM</command>, <command>CREATE
        INDEX</>, and <command>ALTER TABLE ADD FOREIGN KEY</>.  It defaults
        to 64 megabytes (<literal>64MB</>).  Since only one of these
        operations can be executed at a time by a database session, and
        an installation normally doesn't have many of them running
        concurrently, it's safe to set this value significantly larger
        than <varname>work_mem</varname>.  Larger settings might improve
        performance for vacuuming and for restoring database dumps.
       </para>
____________________________________________________________________________-->
       <para>
        指定在维护性操作（例如<command>VACUUM</command>、<command>CREATE INDEX</>和<command>ALTER TABLE ADD FOREIGN KEY</>）中使用的 最大的内存量。其默认值是 64 兆字节（<literal>64MB</>）。因为在一个数据库会话中，一个时刻只有一个这样的操作可以被执行，并且一个数据库安装通常不会有太多这样的操作并发执行， 把这个数值设置得比<varname>work_mem</varname>大很多是安全的。 更大的设置可以改进清理和恢复数据库转储的性能。
       </para>
<!--==========================orignal english content==========================
       <para>
        Note that when autovacuum runs, up to
        <xref linkend="guc-autovacuum-max-workers"> times this memory
        may be allocated, so be careful not to set the default value
        too high.  It may be useful to control for this by separately
        setting <xref linkend="guc-autovacuum-work-mem">.
       </para>
____________________________________________________________________________-->
       <para>
        注意当自动清理运行时，可能会分配最高达这个内存的
        <xref linkend="guc-autovacuum-max-workers">倍，
        因此要小心不要把该默认值设置得太高。
        通过独立地设置<xref linkend="guc-autovacuum-work-mem">
        可能会对控制这种情况有所帮助。 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-replacement-sort-tuples" xreflabel="replacement_sort_tuples">
<!--==========================orignal english content==========================
      <term><varname>replacement_sort_tuples</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>replacement_sort_tuples</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>replacement_sort_tuples</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>replacement_sort_tuples</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When the number of tuples to be sorted is smaller than this number,
        a sort will produce its first output run using replacement selection
        rather than quicksort.  This may be useful in memory-constrained
        environments where tuples that are input into larger sort operations
        have a strong physical-to-logical correlation.  Note that this does
        not include input tuples with an <emphasis>inverse</emphasis>
        correlation.  It is possible for the replacement selection algorithm
        to generate one long run that requires no merging, where use of the
        default strategy would result in many runs that must be merged
        to produce a final sorted output.  This may allow sort
        operations to complete sooner.
       </para>
____________________________________________________________________________-->
       <para>
        当要被排序的元组数比这个数字小时，排序将会使用替换选择而不是快速排序
        来产生其第一个输出。在内存受限的环境中这可能会有用，
        这种环境中被输入到大型排序操作中的元组具有很强的物理逻辑关联。注意，
        这不包括具有<emphasis>逆</emphasis>相关的输入元组。
        替换选择算法可能会产生一次不需要合并的长时间运行，
        其中使用默认策略会导致很多次运行并且必须被合并来产生最终的有序输出。
        这可以允许排序操作更快完成。 
       </para>
<!--==========================orignal english content==========================
       <para>
        The default is 150,000 tuples.  Note that higher values are typically
        not much more effective, and may be counter-productive, since the
        priority queue is sensitive to the size of available CPU cache, whereas
        the default strategy sorts runs using a <firstterm>cache
        oblivious</firstterm> algorithm.  This property allows the default sort
        strategy to automatically and transparently make effective use
        of available CPU cache.
       </para>
____________________________________________________________________________-->
       <para>
        默认是 150,000 个元组。注意，更高的值通常不会更有效，并且可能产生反效果，
        因为优先队列对于可用的 CPU 高速缓存的尺寸很敏感，
        然而默认策略会使用一种<firstterm>高速缓存透明</firstterm>算法运行。
        这种性质允许默认的排序策略自动且透明地利用可用的 CPU 高速缓存。
       </para>
<!--==========================orignal english content==========================
       <para>
        Setting <varname>maintenance_work_mem</varname> to its default
        value usually prevents utility command external sorts (e.g.,
        sorts used by <command>CREATE INDEX</> to build B-Tree
        indexes) from ever using replacement selection sort, unless the
        input tuples are quite wide.
       </para>
____________________________________________________________________________-->
       <para>
        把<varname>maintenance_work_mem</varname>设置为其默认值通常会阻止工具命令外部排序
        （例如<command>CREATE INDEX</>用来构建 B-树索引的排序）使用替换选择排序，
        除非外部元组非常宽。 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-work-mem" xreflabel="autovacuum_work_mem">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_work_mem</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_work_mem</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_work_mem</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum amount of memory to be used by each
        autovacuum worker process.  It defaults to -1, indicating that
        the value of <xref linkend="guc-maintenance-work-mem"> should
        be used instead.  The setting has no effect on the behavior of
        <command>VACUUM</command> when run in other contexts.
       </para>
____________________________________________________________________________-->
       <para>
        指定每个自动清理工作者进程能使用的最大内存量。其默认值为 -1，表示转而使用
        <xref linkend="guc-maintenance-work-mem">的值。当运行在其他上下文环境中时，
        这个设置对<command>VACUUM</command>的行为没有影响。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-stack-depth" xreflabel="max_stack_depth">
<!--==========================orignal english content==========================
      <term><varname>max_stack_depth</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_stack_depth</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_stack_depth</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_stack_depth</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum safe depth of the server's execution stack.
        The ideal setting for this parameter is the actual stack size limit
        enforced by the kernel (as set by <literal>ulimit -s</> or local
        equivalent), less a safety margin of a megabyte or so.  The safety
        margin is needed because the stack depth is not checked in every
        routine in the server, but only in key potentially-recursive routines
        such as expression evaluation.  The default setting is two
        megabytes (<literal>2MB</>), which is conservatively small and
        unlikely to risk crashes.  However, it might be too small to allow
        execution of complex functions.  Only superusers can change this
        setting.
       </para>
____________________________________________________________________________-->
       <para>
        指定服务器的执行堆栈的最大安全深度。这个参数的理想设置是由内核强制的实际栈尺寸限制（<literal>ulimit -s</>所设置的或者本地等价物），减去大约一兆字节的安全边缘。需要这个安全边缘是因为在服务器中并非所有例程都检查栈深度，只是在关键的可能递规的例程（例如表达式计算）中才进行检查。默认设置是两兆字节（<literal>2MB</>），这个值相对比较小并且不可能导致崩溃。但是，这个值可能太小了，以至于无法执行复杂的函数。只有超级用户可以修改这个设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting <varname>max_stack_depth</> higher than
        the actual kernel limit will mean that a runaway recursive function
        can crash an individual backend process.  On platforms where
        <productname>PostgreSQL</productname> can determine the kernel limit,
        the server will not allow this variable to be set to an unsafe
        value.  However, not all platforms provide the information,
        so caution is recommended in selecting a value.
       </para>
____________________________________________________________________________-->
       <para>
        把<varname>max_stack_depth</>参数设置得高于实际的内核限制将意味着一个失控的递归函数可能会导致一个独立的后端进程崩溃。 在<productname>PostgreSQL</productname>能够检测内核限制的平台上， 服务器将不允许把这个参数设置为一个不安全的值。不过，并非所有平台都能提供该信息，所以我们还是建议你在选择值时要小心。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-dynamic-shared-memory-type" xreflabel="dynamic_shared_memory_type">
<!--==========================orignal english content==========================
      <term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>dynamic_shared_memory_type</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>dynamic_shared_memory_type</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>dynamic_shared_memory_type</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the dynamic shared memory implementation that the server
        should use.  Possible values are <literal>posix</> (for POSIX shared
        memory allocated using <literal>shm_open</>), <literal>sysv</literal>
        (for System V shared memory allocated via <literal>shmget</>),
        <literal>windows</> (for Windows shared memory), <literal>mmap</>
        (to simulate shared memory using memory-mapped files stored in the
        data directory), and <literal>none</> (to disable this feature).
        Not all values are supported on all platforms; the first supported
        option is the default for that platform.  The use of the
        <literal>mmap</> option, which is not the default on any platform,
        is generally discouraged because the operating system may write
        modified pages back to disk repeatedly, increasing system I/O load;
        however, it may be useful for debugging, when the
        <literal>pg_dynshmem</> directory is stored on a RAM disk, or when
        other shared memory facilities are not available.
       </para>
____________________________________________________________________________-->
       <para>
        指定服务器应该使用的动态共享内存实现。可能的值是<literal>posix</>（用于使用
        <literal>shm_open</>分配的 POSIX 共享内存）、<literal>sysv</literal>
        （用于通过<literal>shmget</>分配的 System V 共享内存）、
        <literal>windows</>（用于 Windows 共享内存）、<literal>mmap</>
        （使用存储在数据目录中的内存映射文件模拟共享内存）以及<literal>none</>（禁用
        这个特性）。并非所有平台上都支持所有值，平台上第一个支持的选项就是其默认值。
        在任何平台上<literal>mmap</>选项都不是默认值，通常不鼓励使用它，因为操作系统会
        反复地把修改过的页面写回到磁盘上，从而增加了系统的I/O负载。不过当
        <literal>pg_dynshmem</>目录被存储在一个 RAM 盘时或者没有其他共享内存功能可用时，
        它还是有用的。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-disk">
<!--==========================orignal english content==========================
     <title>Disk</title>
____________________________________________________________________________-->
     <title>磁盘</title>

     <variablelist>
     <varlistentry id="guc-temp-file-limit" xreflabel="temp_file_limit">
<!--==========================orignal english content==========================
      <term><varname>temp_file_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_file_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>temp_file_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>temp_file_limit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum amount of disk space that a process can use
        for temporary files, such as sort and hash temporary files, or the
        storage file for a held cursor.  A transaction attempting to exceed
        this limit will be canceled.
        The value is specified in kilobytes, and <literal>-1</> (the
        default) means no limit.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        指定一个会话能用于临时文件（如排序和哈希临时文件，或者用于保持游标的存储文件）的最大磁盘空间量。一个试图超过这个限制的事务将被取消。这个值以千字节计，并且<literal>-1</>（默认值）意味着没有限制。只有超级用户能够修改这个设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        This setting constrains the total space used at any instant by all
        temporary files used by a given <productname>PostgreSQL</> process.
        It should be noted that disk space used for explicit temporary
        tables, as opposed to temporary files used behind-the-scenes in query
        execution, does <emphasis>not</emphasis> count against this limit.
       </para>
____________________________________________________________________________-->
       <para>
        这个设置约束着一个给定<productname>PostgreSQL</>会话在任何瞬间所使用的所有临时文件的总空间。应该注意的是，与在查询执行中在幕后使用的临时文件相反，显式临时表所用的磁盘空间<emphasis>不</emphasis>被这个设置所限制。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>

     <sect2 id="runtime-config-resource-kernel">
<!--==========================orignal english content==========================
     <title>Kernel Resource Usage</title>
____________________________________________________________________________-->
     <title>内核资源使用</title>

     <variablelist>
     <varlistentry id="guc-max-files-per-process" xreflabel="max_files_per_process">
<!--==========================orignal english content==========================
      <term><varname>max_files_per_process</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_files_per_process</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_files_per_process</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_files_per_process</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the maximum number of simultaneously open files allowed to each
        server subprocess. The default is one thousand files. If the kernel is enforcing
        a safe per-process limit, you don't need to worry about this setting.
        But on some platforms (notably, most BSD systems), the kernel will
        allow individual processes to open many more files than the system
        can actually support if many processes all try to open
        that many files. If you find yourself seeing <quote>Too many open
        files</> failures, try reducing this setting.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        设置每个服务器子进程允许同时打开的最大文件数目。默认是 1000 个文件。如果内核强制一个安全的针对每个进程的限制，那么你不用操心这个设置。但是在 一些平台上（特别是大多数 BSD 系统），如果很多进程都尝试打开很多文件，内核将允许独立进程打开比个系统真正可以支持的数目大得多得文件数。如果你发现自己看到了<quote>Too many open files</>这样的失败，可尝试减小这个设置。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-resource-vacuum-cost">
<!--==========================orignal english content==========================
     <title>Cost-based Vacuum Delay</title>
____________________________________________________________________________-->
     <title>基于代价的清理延迟</title>

<!--==========================orignal english content==========================
     <para>
      During the execution of <xref linkend="sql-vacuum">
      and <xref linkend="sql-analyze">
      commands, the system maintains an
      internal counter that keeps track of the estimated cost of the
      various I/O operations that are performed.  When the accumulated
      cost reaches a limit (specified by
      <varname>vacuum_cost_limit</varname>), the process performing
      the operation will sleep for a short period of time, as specified by
      <varname>vacuum_cost_delay</varname>. Then it will reset the
      counter and continue execution.
     </para>
____________________________________________________________________________-->
     <para>
      在<xref linkend="sql-vacuum">和<xref linkend="sql-analyze">命令的执行过程中，系统维持着一个内部计数器来跟踪各种被执行的I/O操作的估算开销。当累计的代价达到一个限制（由<varname>vacuum_cost_limit</varname>指定），执行这些操作的进程将按照<varname>vacuum_cost_delay</varname>所指定的休眠一小段时间。然后它将重置计数器并继续执行。
     </para>

<!--==========================orignal english content==========================
     <para>
      The intent of this feature is to allow administrators to reduce
      the I/O impact of these commands on concurrent database
      activity. There are many situations where it is not
      important that maintenance commands like
      <command>VACUUM</command> and <command>ANALYZE</command> finish
      quickly; however, it is usually very important that these
      commands do not significantly interfere with the ability of the
      system to perform other database operations. Cost-based vacuum
      delay provides a way for administrators to achieve this.
     </para>
____________________________________________________________________________-->
     <para>
      这个特性的出发点是允许管理员降低这些命令对并发的数据库活动产生的I/O影响。在很多情况下，<command>VACUUM</command>和<command>ANALYZE</command>等维护命令能否快速完成并不重要，而非常重要的是这些命令不会对系统执行其他数据库操作的能力产生显著的影响。基于代价的清理延迟提供了一种方式让管理员能够保证这一点。
     </para>

<!--==========================orignal english content==========================
     <para>
      This feature is disabled by default for manually issued
      <command>VACUUM</command> commands. To enable it, set the
      <varname>vacuum_cost_delay</varname> variable to a nonzero
      value.
     </para>
____________________________________________________________________________-->
     <para>
      对于手动发出的<command>VACUUM</command>命令，该特性默认被禁用。要启用它，只要把<varname>vacuum_cost_delay</varname>变量设为一个非零值。
     </para>

     <variablelist>
      <varlistentry id="guc-vacuum-cost-delay" xreflabel="vacuum_cost_delay">
<!--==========================orignal english content==========================
       <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_delay</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>vacuum_cost_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_delay</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The length of time, in milliseconds, that the process will sleep
         when the cost limit has been exceeded.
         The default value is zero, which disables the cost-based vacuum
         delay feature.  Positive values enable cost-based vacuuming.
         Note that on many systems, the effective resolution
         of sleep delays is 10 milliseconds; setting
         <varname>vacuum_cost_delay</varname> to a value that is
         not a multiple of 10 might have the same results as setting it
         to the next higher multiple of 10.
        </para>
____________________________________________________________________________-->
        <para>
         进程超过代价限制后将休眠的时间长度，以毫秒计。其默认值为0，这将禁用基于代价的清理延迟特性。正值将启用基于代价的清理。注意在很多系统上，实际的休眠延迟单位是10毫秒，将<varname>vacuum_cost_delay</varname>设置成不为10的倍数的值和将它设置为比该值大的10的倍数的效果相同。
        </para>

<!--==========================orignal english content==========================
        <para>
         When using cost-based vacuuming, appropriate values for
         <varname>vacuum_cost_delay</> are usually quite small, perhaps
         10 or 20 milliseconds.  Adjusting vacuum's resource consumption
         is best done by changing the other vacuum cost parameters.
        </para>
____________________________________________________________________________-->
        <para>
         在使用基于代价的清理时，<varname>vacuum_cost_delay</>的合适值通常很小，也许是10或20毫秒。调整清理时资源消耗最好的方法是调整其他清理代价参数。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-hit" xreflabel="vacuum_cost_page_hit">
<!--==========================orignal english content==========================
       <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_hit</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>vacuum_cost_page_hit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_hit</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The estimated cost for vacuuming a buffer found in the shared buffer
         cache. It represents the cost to lock the buffer pool, lookup
         the shared hash table and scan the content of the page. The
         default value is one.
        </para>
____________________________________________________________________________-->
        <para>
         清理一个在共享缓存中找到的缓冲区的估计代价。它表示锁住缓冲池、查找共享哈希表和扫描页内容的代价。默认值为1。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-miss" xreflabel="vacuum_cost_page_miss">
<!--==========================orignal english content==========================
       <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_miss</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>vacuum_cost_page_miss</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_miss</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The estimated cost for vacuuming a buffer that has to be read from
         disk.  This represents the effort to lock the buffer pool,
         lookup the shared hash table, read the desired block in from
         the disk and scan its content. The default value is 10.
        </para>
____________________________________________________________________________-->
        <para>
         清理一个必须从磁盘上读取的缓冲区的代价。它表示锁住缓冲池、查找共享哈希表、从磁盘读取需要的块以及扫描其内容的代价。默认值为10。        
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-page-dirty" xreflabel="vacuum_cost_page_dirty">
<!--==========================orignal english content==========================
       <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_dirty</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>vacuum_cost_page_dirty</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_page_dirty</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The estimated cost charged when vacuum modifies a block that was
         previously clean. It represents the extra I/O required to
         flush the dirty block out to disk again. The default value is
         20.
        </para>
____________________________________________________________________________-->
        <para>
         当清理修改一个之前干净的块时需要花费的估计代价。它表示再次把脏块刷出到磁盘所需要的额外I/O。默认值为20。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-vacuum-cost-limit" xreflabel="vacuum_cost_limit">
<!--==========================orignal english content==========================
       <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_limit</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>vacuum_cost_limit</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>vacuum_cost_limit</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The accumulated cost that will cause the vacuuming process to sleep.
         The default value is 200.
        </para>
____________________________________________________________________________-->
        <para>
         将导致清理进程休眠的累计代价。默认值为200。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
<!--==========================orignal english content==========================
      <para>
       There are certain operations that hold critical locks and should
       therefore complete as quickly as possible.  Cost-based vacuum
       delays do not occur during such operations.  Therefore it is
       possible that the cost accumulates far higher than the specified
       limit.  To avoid uselessly long delays in such cases, the actual
       delay is calculated as <varname>vacuum_cost_delay</varname> *
       <varname>accumulated_balance</varname> /
       <varname>vacuum_cost_limit</varname> with a maximum of
       <varname>vacuum_cost_delay</varname> * 4.
      </para>
____________________________________________________________________________-->
      <para>
       有些操作会保持关键性的锁，这样可以尽快完成。基于代价的清理延迟在这类操作期间不会发生。因此有可能代价会累计至大大超过指定的限制。为了防止在这种情况下的无意义的长时间延迟，实际延迟的计算方式是<varname>vacuum_cost_delay</varname> *
       <varname>accumulated_balance</varname> /
       <varname>vacuum_cost_limit</varname>，且最大值是<varname>vacuum_cost_delay</varname> * 4。
      </para>
     </note>
    </sect2>

    <sect2 id="runtime-config-resource-background-writer">
<!--==========================orignal english content==========================
     <title>Background Writer</title>
____________________________________________________________________________-->
     <title>后台写入器</title>

<!--==========================orignal english content==========================
     <para>
      There is a separate server
      process called the <firstterm>background writer</>, whose function
      is to issue writes of <quote>dirty</> (new or modified) shared
      buffers.  It writes shared buffers so server processes handling
      user queries seldom or never need to wait for a write to occur.
      However, the background writer does cause a net overall
      increase in I/O load, because while a repeatedly-dirtied page might
      otherwise be written only once per checkpoint interval, the
      background writer might write it several times as it is dirtied
      in the same interval.  The parameters discussed in this subsection
      can be used to tune the behavior for local needs.
     </para>
____________________________________________________________________________-->
     <para>
      有一个独立的服务器进程，叫做<firstterm>后台写入器</>，它的功能就是发出写<quote>脏</>（新的或修改过的）共享缓冲区的命令。它写出共享缓冲区，这样让处理用户查询的服务器进程很少或者永不等待写动作的发生。不过，后台写入器确实会增加 I/O 的总负荷，因为虽然在每个检查点间隔中一个重复弄脏的页面可能只会写出一次，但在同一个间隔中后台写入器可能会把它写出好几次。在这一小节讨论的参数可以被用于调节本地需求的行为。
     </para>

     <variablelist>
      <varlistentry id="guc-bgwriter-delay" xreflabel="bgwriter_delay">
<!--==========================orignal english content==========================
       <term><varname>bgwriter_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_delay</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>bgwriter_delay</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_delay</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Specifies the delay between activity rounds for the
         background writer.  In each round the writer issues writes
         for some number of dirty buffers (controllable by the
         following parameters).  It then sleeps for <varname>bgwriter_delay</>
         milliseconds, and repeats.  When there are no dirty buffers in the
         buffer pool, though, it goes into a longer sleep regardless of
         <varname>bgwriter_delay</>.  The default value is 200
         milliseconds (<literal>200ms</>). Note that on many systems, the
         effective resolution of sleep delays is 10 milliseconds; setting
         <varname>bgwriter_delay</> to a value that is not a multiple of 10
         might have the same results as setting it to the next higher multiple
         of 10.  This parameter can only be set in the
         <filename>postgresql.conf</> file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         指定后台写入器活动轮次之间的延迟。在每个轮次中，写入器都会为一定数量的脏缓冲区发出写操作（可以用下面的参数控制）。然后它就休眠 <varname>bgwriter_delay</>毫秒， 然后重复动作。默认值是 200 毫秒（<literal>200ms</>）。注意在许多系统上，休眠延迟的有效解析度是 10 毫秒；因此，为<varname>bgwriter_delay</>设置一个 不是 10 的倍数的值与把它设置为下一个更高的 10 的倍数是一样的效果。这个选项只能在服务器命令行上或者在<filename>postgresql.conf</>文件中设置。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-maxpages" xreflabel="bgwriter_lru_maxpages">
<!--==========================orignal english content==========================
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_maxpages</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>bgwriter_lru_maxpages</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_maxpages</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         In each round, no more than this many buffers will be written
         by the background writer.  Setting this to zero disables
         background writing.  (Note that checkpoints, which are managed by
         a separate, dedicated auxiliary process, are unaffected.)
         The default value is 100 buffers.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         在每个轮次中，不超过这么多个缓冲区将被后台写入器写出。把这个参数设置为零可禁用后台写出（注意被一个独立、专用辅助进程管理的检查点不受影响）。默认值是 100 个缓冲区。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-lru-multiplier" xreflabel="bgwriter_lru_multiplier">
<!--==========================orignal english content==========================
       <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_multiplier</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>bgwriter_lru_multiplier</varname> (<type>floating point</type>)
       <indexterm>
        <primary><varname>bgwriter_lru_multiplier</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         The number of dirty buffers written in each round is based on the
         number of new buffers that have been needed by server processes
         during recent rounds.  The average recent need is multiplied by
         <varname>bgwriter_lru_multiplier</> to arrive at an estimate of the
         number of buffers that will be needed during the next round.  Dirty
         buffers are written until there are that many clean, reusable buffers
         available.  (However, no more than <varname>bgwriter_lru_maxpages</>
         buffers will be written per round.)
         Thus, a setting of 1.0 represents a <quote>just in time</> policy
         of writing exactly the number of buffers predicted to be needed.
         Larger values provide some cushion against spikes in demand,
         while smaller values intentionally leave writes to be done by
         server processes.
         The default is 2.0.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         每一轮次要写的脏缓冲区的数目基于最近几个轮次中服务器进程需要的新缓冲区的数目。 最近所需的平均值乘以<varname>bgwriter_lru_multiplier</>可以估算下一轮次中将会需要的缓冲区数目。脏缓冲区将被写出直到有很多干净可重用的缓冲区（然而，每一轮次中写出的缓冲区数不超过<varname>bgwriter_lru_maxpages</>）。 因此，设置为 1.0 表示一种<quote>刚刚好的</>策略，这种策略会写出正好符合预测值的数目的缓冲区。 更大大的值可以为需求高峰提供某种缓冲，而更小的值则需要服务进程来处理一些写出操作。默认值是 2.0。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-bgwriter-flush-after" xreflabel="bgwriter_flush_after">
<!--==========================orignal english content==========================
       <term><varname>bgwriter_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_flush_after</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>bgwriter_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>bgwriter_flush_after</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Whenever more than <varname>bgwriter_flush_after</varname> bytes have
         been written by the bgwriter, attempt to force the OS to issue these
         writes to the underlying storage.  Doing so will limit the amount of
         dirty data in the kernel's page cache, reducing the likelihood of
         stalls when an fsync is issued at the end of a checkpoint, or when
         the OS writes data back in larger batches in the background.  Often
         that will result in greatly reduced transaction latency, but there
         also are some cases, especially with workloads that are bigger than
         <xref linkend="guc-shared-buffers">, but smaller than the OS's page
         cache, where performance might degrade.  This setting may have no
         effect on some platforms.  The valid range is between
         <literal>0</literal>, which disables controlled writeback, and
         <literal>2MB</literal>.  The default is <literal>512kB</> on Linux,
         <literal>0</> elsewhere.  (Non-default values of
         <symbol>BLCKSZ</symbol> change the default and maximum.)
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         不管何时 bgwriter 写入了超过<varname>bgwriter_flush_after</varname>字节，
         尝试强制 OS 把这些写发送到底层存储上。这样做将限制内核页缓存中脏数据的量，
         降低了在检查点末尾发出一个 fsync 时或者 OS 在后台大批量写回数据时卡住的可能性。
         那常常会导致大幅度压缩的事务延迟，但是也有一些情况（特别是负载超过
         <xref linkend="guc-shared-buffers">但小于 OS 页面高速缓存）的性能会降低。
         这种设置可能会在某些平台上没有效果。合法的范围在<literal>0</literal>
         （禁用受控写回）和<literal>2MB</literal>之间。Linux 上的默认值是
         <literal>512kB</>，其他平台上是<literal>0</>（非默认的<symbol>BLCKSZ</symbol>
         值会改变默认值和最大值）。这个参数只能在<filename>postgresql.conf</>
         文件中或者服务器命令行上设置。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

<!--==========================orignal english content==========================
     <para>
      Smaller values of <varname>bgwriter_lru_maxpages</varname> and
      <varname>bgwriter_lru_multiplier</varname> reduce the extra I/O load
      caused by the background writer, but make it more likely that server
      processes will have to issue writes for themselves, delaying interactive
      queries.
     </para>
____________________________________________________________________________-->
     <para>
      较小的<varname>bgwriter_lru_maxpages</varname>和<varname>bgwriter_lru_multiplier</varname>可以降低由后台写入器造成的额外 I/O 开销。但更可能的是，服务器进程将必须自己发出写入操作，这会延迟交互式查询。
     </para>
    </sect2>

    <sect2 id="runtime-config-resource-async-behavior">
<!--==========================orignal english content==========================
     <title>Asynchronous Behavior</title>
____________________________________________________________________________-->
     <title>异步行为</title>

     <variablelist>
      <varlistentry id="guc-effective-io-concurrency" xreflabel="effective_io_concurrency">
<!--==========================orignal english content==========================
       <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>effective_io_concurrency</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>effective_io_concurrency</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>effective_io_concurrency</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Sets the number of concurrent disk I/O operations that
         <productname>PostgreSQL</> expects can be executed
         simultaneously.  Raising this value will increase the number of I/O
         operations that any individual <productname>PostgreSQL</> session
         attempts to initiate in parallel.  The allowed range is 1 to 1000,
         or zero to disable issuance of asynchronous I/O requests. Currently,
         this setting only affects bitmap heap scans.
        </para>
____________________________________________________________________________-->
        <para>
         设置<productname>PostgreSQL</>可以同时被执行的并发磁盘 I/O 操作的数量。
         调高这个值，可以增加任何单个<productname>PostgreSQL</>会话试图并行发起的
         I/O 操作的数目。 允许的范围是 1 到 1000，或 0 表示禁用异步 I/O 请求。
         当前这个设置仅影响位图堆扫描。
        </para>

<!--==========================orignal english content==========================
        <para>
         For magnetic drives, a good starting point for this setting is the
         number of separate
         drives comprising a RAID 0 stripe or RAID 1 mirror being used for the
         database.  (For RAID 5 the parity drive should not be counted.)
         However, if the database is often busy with multiple queries issued in
         concurrent sessions, lower values may be sufficient to keep the disk
         array busy.  A value higher than needed to keep the disks busy will
         only result in extra CPU overhead.
         SSDs and other memory-based storage can often process many
         concurrent requests, so the best value might be in the hundreds.
        </para>
____________________________________________________________________________-->
        <para>
         对于磁盘驱动器，这个设置的一个很好的出发点是组成一个被用于该数据库的 RAID 0 
         条带或 RAID 1 镜像的独立驱动器数量（对 RAID 5 而言，校验驱动器不计入）。
         但是， 如果数据库经常忙于在并发会话中发出的多个查询，
         较低的值可能足以使磁盘阵列繁忙。比保持磁盘繁忙所需的值更高的值只会造成额外的 
         CPU 开销。SSD 以及其他基于内存的存储常常能处理很多并发请求，
         因此它们的最佳值可能是数百。 
        </para>

<!--==========================orignal english content==========================
        <para>
         Asynchronous I/O depends on an effective <function>posix_fadvise</>
         function, which some operating systems lack.  If the function is not
         present then setting this parameter to anything but zero will result
         in an error.  On some operating systems (e.g., Solaris), the function
         is present but does not actually do anything.
        </para>
____________________________________________________________________________-->
        <para>
         异步 I/O 依赖于一个有效的<function>posix_fadvise</>函数
         （一些操作系统可能没有）。 如果不存在这个函数，将这个参数设置为除 0 
         之外的任何东西将导致错误。在一些操作系统上（如Solaris）
         虽然提供了这个函数，但它不会做任何事情。 
        </para>

<!--==========================orignal english content==========================
        <para>
         The default is 1 on supported systems, otherwise 0.  This value can
         be overridden for tables in a particular tablespace by setting the
         tablespace parameter of the same name (see
         <xref linkend="sql-altertablespace">).
        </para>
____________________________________________________________________________-->
        <para>
         支持的系统上缺省为1，否则为0。对于一个特定表空间中的表，
         可以通过设定该表空间的同名参数（见<xref linkend="sql-altertablespace">）
         可以覆盖这个值。 
        </para>
          
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-worker-processes" xreflabel="max_worker_processes">
<!--==========================orignal english content==========================
       <term><varname>max_worker_processes</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_worker_processes</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>max_worker_processes</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_worker_processes</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Sets the maximum number of background processes that the system
         can support.  This parameter can only be set at server start.  The
         default is 8.
        </para>
____________________________________________________________________________-->
        <para>
         设置系统能够支持的后台进程的最大数量。这个参数只能在服务器启动时设置。
         默认值为 8。 
        </para>
<!--==========================orignal english content==========================
        <para>
         When running a standby server, you must set this parameter to the
         same or higher value than on the master server. Otherwise, queries
         will not be allowed in the standby server.
        </para>
____________________________________________________________________________-->
        <para>
         在运行一个后备服务器时，你必须把这个参数设置为等于或者高于主控服务器上的值。否则，
         后备服务器上可能不会允许查询。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-parallel-workers-per-gather" xreflabel="max_parallel_workers_per_gather">
<!--==========================orignal english content==========================
       <term><varname>max_parallel_workers_per_gather</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers_per_gather</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>max_parallel_workers_per_gather</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_parallel_workers_per_gather</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Sets the maximum number of workers that can be started by a single
         <literal>Gather</literal> node.  Parallel workers are taken from the
         pool of processes established by
         <xref linkend="guc-max-worker-processes">.  Note that the requested
         number of workers may not actually be available at run time.  If this
         occurs, the plan will run with fewer workers than expected, which may
         be inefficient.  Setting this value to 0, which is the default,
         disables parallel query execution.
        </para>
____________________________________________________________________________-->
        <para>
         设置单个<literal>Gather</literal>节点能够开始的工作者的最大数量。
         并行工作者会从<xref linkend="guc-max-worker-processes">建立的进程池中取得。
         注意所要求的工作者数量在运行时可能实际无法被满足。如果这种事情发生，
         该计划将会以比预期更少的工作者运行，这可能会不太高效。
         把这个值设置为 0（默认值）将会禁用并行查询执行。
        </para>

<!--==========================orignal english content==========================
        <para>
         Note that parallel queries may consume very substantially more
         resources than non-parallel queries, because each worker process is
         a completely separate process which has roughly the same impact on the
         system as an additional user session.  This should be taken into
         account when choosing a value for this setting, as well as when
         configuring other settings that control resource utilization, such
         as <xref linkend="guc-work-mem">.  Resource limits such as
         <varname>work_mem</> are applied individually to each worker,
         which means the total utilization may be much higher across all
         processes than it would normally be for any single process.
         For example, a parallel query using 4 workers may use up to 5 times
         as much CPU time, memory, I/O bandwidth, and so forth as a query which
         uses no workers at all.
        </para>
____________________________________________________________________________-->
        <para>
         注意并行查询可能消耗比非并行查询更多的资源，
         因为每一个工作者进程时一个完全独立的进程，
         它对系统产生的影响大致和一个额外的用户会话相同。在为这个设置选择值时，
         以及配置其他控制资源利用的设置（例如<xref linkend="guc-work-mem">）时，
         应该把这个因素考虑在内。<varname>work_mem</>
         之类的资源限制会被独立地应用于每一个工作者，
         这意味着所有进程的总资源利用可能会比单个进程时高得多。例如，
         一个使用 4 个工作者的并行查询使用的 CPU 时间、内存、I/O 
         带宽可能是不使用工作者时的 5 倍之多。 
        </para>

<!--==========================orignal english content==========================
        <para>
         For more information on parallel query, see
         <xref linkend="parallel-query">.
        </para>
____________________________________________________________________________-->
        <para>
         并行查询的更多信息请见
         <xref linkend="parallel-query">.
        </para>
       </listitem>
      </varlistentry>



      <varlistentry id="guc-backend-flush-after" xreflabel="backend_flush_after">
<!--==========================orignal english content==========================
       <term><varname>backend_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>backend_flush_after</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>backend_flush_after</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>backend_flush_after</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Whenever more than <varname>backend_flush_after</varname> bytes have
         been written by a single backend, attempt to force the OS to issue
         these writes to the underlying storage.  Doing so will limit the
         amount of dirty data in the kernel's page cache, reducing the
         likelihood of stalls when an fsync is issued at the end of a
         checkpoint, or when the OS writes data back in larger batches in the
         background.  Often that will result in greatly reduced transaction
         latency, but there also are some cases, especially with workloads
         that are bigger than <xref linkend="guc-shared-buffers">, but smaller
         than the OS's page cache, where performance might degrade.  This
         setting may have no effect on some platforms.  The valid range is
         between <literal>0</literal>, which disables controlled writeback,
         and <literal>2MB</literal>.  The default is <literal>0</> (i.e. no
         flush control).  (Non-default values of <symbol>BLCKSZ</symbol>
         change the maximum.)
        </para>
____________________________________________________________________________-->
        <para>
         只要一个后端写入了超过<varname>backend_flush_after</varname>字节，
         就会尝试强制 OS 把这些写发送到底层存储。
         这样做将会限制内核页高速缓存中的脏数据数量，
         降低在检查点末尾发出 fsync 时或者 OS 在后台大批写回数据时卡住的可能性。
         这常常会导致极大降低的事务延迟，但是也有一些情况中
         （特别是负载超过<xref linkend="guc-shared-buffers">但低于 OS 的页面高速缓存时），
         性能可能会下降。这个设置可能在某些平台上没有效果。合法的范围位于<literal>0</literal>
         （禁用受控写回）和<literal>2MB</literal>之间。默认是<literal>0</>（即没有刷写控制）。
         （<symbol>BLCKSZ</symbol>的非默认值会更改最大值）。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-old-snapshot-threshold" xreflabel="old_snapshot_threshold">
<!--==========================orignal english content==========================
       <term><varname>old_snapshot_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>old_snapshot_threshold</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>old_snapshot_threshold</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>old_snapshot_threshold</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Sets the minimum time that a snapshot can be used without risk of a
         <literal>snapshot too old</> error occurring when using the snapshot.
         This parameter can only be set at server start.
        </para>
____________________________________________________________________________-->
        <para>
         设置在使用快照时，一个快照可以被使用而没有发生<literal>snapshot too old</>
         错误风险的最小时间。这个参数只能在服务器启动时设置。 
        </para>

<!--==========================orignal english content==========================
        <para>
         Beyond the threshold, old data may be vacuumed away.  This can help
         prevent bloat in the face of snapshots which remain in use for a
         long time.  To prevent incorrect results due to cleanup of data which
         would otherwise be visible to the snapshot, an error is generated
         when the snapshot is older than this threshold and the snapshot is
         used to read a page which has been modified since the snapshot was
         built.
        </para>
____________________________________________________________________________-->
        <para>
         如果超过该阈值，旧数据将被清理掉。这可以有助于阻止长时间使用的快照造成的快照膨胀。
         为了阻止由于本来对该快照可见的数据被清理导致的不正确结果，
         当快照比这个阈值更旧并且该快照被用来读取一个该快照建立以来被修改过的页面时，
         将会产生一个错误。 
        </para>

<!--==========================orignal english content==========================
        <para>
         A value of <literal>-1</> disables this feature, and is the default.
         Useful values for production work probably range from a small number
         of hours to a few days.  The setting will be coerced to a granularity
         of minutes, and small numbers (such as <literal>0</> or
         <literal>1min</>) are only allowed because they may sometimes be
         useful for testing.  While a setting as high as <literal>60d</> is
         allowed, please note that in many workloads extreme bloat or
         transaction ID wraparound may occur in much shorter time frames.
        </para>
____________________________________________________________________________-->
        <para>
         值为<literal>-1</>会禁用这个特性，并且这个值是默认值。
         对于生产工作有用的值可能从几个小时到几天。该设置将被转换成分钟粒度，
         并且小数字（例如<literal>0</>或者<literal>1min</>）
         被允许只是因为它们有时对于测试有用。虽然允许高达<literal>60d</>的设置，
         但是请注意很多负载情况下，很短的时间帧里就可能发生极大的膨胀或者事务 ID 回卷。
        </para>

<!--==========================orignal english content==========================
        <para>
         When this feature is enabled, freed space at the end of a relation
         cannot be released to the operating system, since that could remove
         information needed to detect the <literal>snapshot too old</>
         condition.  All space allocated to a relation remains associated with
         that relation for reuse only within that relation unless explicitly
         freed (for example, with <command>VACUUM FULL</>).
        </para>
____________________________________________________________________________-->
        <para>
         当这个特性被启用时，关系末尾的被清出的空间不能被释放给操作系统，
         因为那可能会移除用于检测<literal>snapshot too old</>情况所需的信息。
         所有分配给关系的空间还将与该关系关联在一起便于重用，
         除非它们被显式地释放（例如，用<command>VACUUM FULL</>）。 
        </para>

<!--==========================orignal english content==========================
        <para>
         This setting does not attempt to guarantee that an error will be
         generated under any particular circumstances.  In fact, if the
         correct results can be generated from (for example) a cursor which
         has materialized a result set, no error will be generated even if the
         underlying rows in the referenced table have been vacuumed away.
         Some tables cannot safely be vacuumed early, and so will not be
         affected by this setting.  Examples include system catalogs and any
         table which has a hash index.  For such tables this setting will
         neither reduce bloat nor create a possibility of a <literal>snapshot
         too old</> error on scanning.
        </para>
____________________________________________________________________________-->
        <para>
         这个设置不会尝试保证在任何特殊情况下都会生成错误。事实上，如果（例如）
         可以从一个已经物化了一个结果集的游标中生成正确的结果，
         即便被引用表中的底层行已经被清理掉也不会生成错误。
         某些表不能被过早地安全清除，并且因此将不受这个设置的影响。
         例子包括系统目录以及任何具有哈希索引的表。对于这些表，
         这个设置将不能降低膨胀，也不能降低在扫描时产生
         <literal>snapshot too old</>错误的可能性。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-wal">
<!--==========================orignal english content==========================
    <title>Write Ahead Log</title>
____________________________________________________________________________-->
    <title>预写式日志</title>

<!--==========================orignal english content==========================
   <para>
    For additional information on tuning these settings,
    see <xref linkend="wal-configuration">.
   </para>
____________________________________________________________________________-->
   <para>
    参阅<xref linkend="wal-configuration">获取调节这些设置的额外信息。
   </para>

    <sect2 id="runtime-config-wal-settings">
<!--==========================orignal english content==========================
     <title>Settings</title>
____________________________________________________________________________-->
     <title>设置</title>
     <variablelist>

     <varlistentry id="guc-wal-level" xreflabel="wal_level">
<!--==========================orignal english content==========================
      <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_level</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_level</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        <varname>wal_level</> determines how much information is written
        to the WAL. The default value is <literal>minimal</>, which writes
        only the information needed to recover from a crash or immediate
        shutdown. <literal>replica</> adds logging required for WAL
        archiving as well as information required to run
        read-only queries on a standby server.  Finally,
        <literal>logical</> adds information necessary to support logical
        decoding.  Each level includes the information logged at all lower
        levels.  This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>wal_level</>决定多少信息写入到 WAL 中。默认值是<literal>minimal</>， 只写入从崩溃或立即关机恢复所需要的信息。<literal>archive</>添加 WAL 归档所需要的日志。 <literal>hot_standby</>则进一步增加在一个后备服务器上运行只读查询所需的信息。
        最后，<literal>logical</>会增加支持逻辑解码所需的信息。每个层次包括所有更低层次
        记录的信息。这个参数只能在服务器启动时设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        In <literal>minimal</> level, WAL-logging of some bulk
        operations can be safely skipped, which can make those
        operations much faster (see <xref linkend="populate-pitr">).
        Operations in which this optimization can be applied include:
        <simplelist>
         <member><command>CREATE TABLE AS</></member>
         <member><command>CREATE INDEX</></member>
         <member><command>CLUSTER</></member>
         <member><command>COPY</> into tables that were created or truncated in the same
         transaction</member>
        </simplelist>
        But minimal WAL does not contain enough information to reconstruct the
        data from a base backup and the WAL logs, so <literal>replica</> or
        higher must be used to enable WAL archiving
        (<xref linkend="guc-archive-mode">) and streaming replication.
       </para>
____________________________________________________________________________-->
       <para>
        在<literal>minimal</>级别中，某些批量操作的 WAL 日志可以被安全地跳过，这可以使那些操作更快（见<xref linkend="populate-pitr">）。这种优化可以应用的操作包括：
        <simplelist>
         <member><command>CREATE TABLE AS</></member>
         <member><command>CREATE INDEX</></member>
         <member><command>CLUSTER</></member>
         <member><command>COPY</>到在同一个事务中被创建或截断的表中</member>
        </simplelist>
        但最少的 WAL 不会包括足够的信息来从基础备份和 WAL 日志中重建数据，因此，要启用 WAL 归档（<xref linkend="guc-archive-mode">）和流复制，必须使用<literal>archive</>或更高级别。
       </para>
<!--==========================orignal english content==========================
       <para>
        In <literal>logical</> level, the same information is logged as
        with <literal>replica</>, plus information needed to allow
        extracting logical change sets from the WAL. Using a level of
        <literal>logical</> will increase the WAL volume, particularly if many
        tables are configured for <literal>REPLICA IDENTITY FULL</literal> and
        many <command>UPDATE</> and <command>DELETE</> statements are
        executed.
       </para>
____________________________________________________________________________-->
       <para>
        在<literal>hot_standby</>级别，日志记录的信息和<literal>archive</>相同，外加从 WAL 重建运行事务状态所需的信息。为了在一个后备服务器上启用只读查询，主服务器上的<varname>wal_level</>必须设置为<literal>hot_standby</>或更高级别， 并且后备服务器上必须启用<xref linkend="guc-hot-standby">。这是因为使用<literal>hot_standby</>和<literal>archive</>级别在性能方面存在微小的差异，因此如果任何生产影响很显著，那么欢迎反馈。
       </para>
<!--==========================orignal english content==========================
       <para>
        In releases prior to 9.6, this parameter also allowed the
        values <literal>archive</literal> and <literal>hot_standby</literal>.
        These are still accepted but mapped to <literal>replica</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        在<literal>logical</>层，与<literal>hot_standby</>相同的信息会被记录，外加上
        允许从 WAL 抽取逻辑修改集所需的信息。使用级别
        <literal>logical</>将增加 WAL 容量，特别是如果为了<literal>REPLICA IDENTITY FULL</literal>配置了很多表并且执行了很多<command>UPDATE</>和<command>DELETE</>
        语句时。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-fsync" xreflabel="fsync">
<!--==========================orignal english content==========================
      <term><varname>fsync</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>fsync</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>fsync</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>fsync</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If this parameter is on, the <productname>PostgreSQL</> server
        will try to make sure that updates are physically written to
        disk, by issuing <function>fsync()</> system calls or various
        equivalent methods (see <xref linkend="guc-wal-sync-method">).
        This ensures that the database cluster can recover to a
        consistent state after an operating system or hardware crash.
       </para>
____________________________________________________________________________-->
       <para>
        如果打开这个参数，<productname>PostgreSQL</>服务器将尝试确保更新被物理地写入到磁盘，做法是发出<function>fsync()</>系统调用或者使用多种等价的方法（见<xref linkend="guc-wal-sync-method">）。这保证了数据库集簇在一次操作系统或者硬件崩溃后能恢复到一个一致的状态。
       </para>

<!--==========================orignal english content==========================
       <para>
        While turning off <varname>fsync</varname> is often a performance
        benefit, this can result in unrecoverable data corruption in
        the event of a power failure or system crash.  Thus it
        is only advisable to turn off <varname>fsync</varname> if
        you can easily recreate your entire database from external
        data.
       </para>
____________________________________________________________________________-->
       <para>
        虽然关闭<varname>fsync</varname>常常可以得到性能上的收益，但当发生断电或系统崩溃时可能造成不可恢复的数据损坏。因此，只有在能很容易地从外部数据中重建整个数据库时才建议关闭<varname>fsync</varname>。
       </para>

<!--==========================orignal english content==========================
       <para>
        Examples of safe circumstances for turning off
        <varname>fsync</varname> include the initial loading of a new
        database cluster from a backup file, using a database cluster
        for processing a batch of data after which the database
        will be thrown away and recreated,
        or for a read-only database clone which
        gets recreated frequently and is not used for failover.  High
        quality hardware alone is not a sufficient justification for
        turning off <varname>fsync</varname>.
       </para>
____________________________________________________________________________-->
       <para>
        能安全关闭<varname>fsync</varname>的环境的例子包括从一个备份文件中初始加载一个新数据库集簇、使用一个数据库集簇来在数据库被删掉并重建之后处理一批数据，或者一个被经常重建并却不用于失效备援的只读数据库克隆。单独的高质量硬件不足以成为关闭<varname>fsync</varname>的理由。
       </para>

<!--==========================orignal english content==========================
       <para>
        For reliable recovery when changing <varname>fsync</varname>
        off to on, it is necessary to force all modified buffers in the
        kernel to durable storage.  This can be done while the cluster
        is shutdown or while fsync is on by running <command>initdb
        -&minus;sync-only</command>, running <command>sync</>, unmounting the
        file system, or rebooting the server.
       </para>
____________________________________________________________________________-->
       <para>
        当把<varname>fsync</varname>从关闭改成打开时，为了可靠的恢复，需要强制在内核中的所有被修改的缓冲区进入持久化存储。这可以在多个时机来完成：在集簇被关闭时或在 fsync 因为运行<command>initdb --sync-only</command>而打开时、运行<command>sync</>时、卸载文件系统时或者重启服务器时。
       </para>

<!--==========================orignal english content==========================
       <para>
        In many situations, turning off <xref linkend="guc-synchronous-commit">
        for noncritical transactions can provide much of the potential
        performance benefit of turning off <varname>fsync</varname>, without
        the attendant risks of data corruption.
       </para>
____________________________________________________________________________-->
       <para>
        在很多情况下，为不重要的事务关闭<xref linkend="guc-synchronous-commit">可以提供很多关闭<varname>fsync</varname>的潜在性能收益，并不会有的同时， 关闭fsync可以提供很多潜在的性能优势，而不会有伴随着的数据损坏风险。
       </para>

<!--==========================orignal english content==========================
       <para>
        <varname>fsync</varname> can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        If you turn this parameter off, also consider turning off
        <xref linkend="guc-full-page-writes">.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>fsync</varname>只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。如果你关闭这个参数，请也考虑关闭<xref linkend="guc-full-page-writes">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronous-commit" xreflabel="synchronous_commit">
<!--==========================orignal english content==========================
      <term><varname>synchronous_commit</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>synchronous_commit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>synchronous_commit</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>synchronous_commit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies whether transaction commit will wait for WAL records
        to be written to disk before the command returns a <quote>success</>
        indication to the client.  Valid values are <literal>on</>,
        <literal>remote_apply</>, <literal>remote_write</>, <literal>local</>,
        and <literal>off</>.  The default, and safe, setting
        is <literal>on</>.  When <literal>off</>, there can be a delay between
        when success is reported to the client and when the transaction is
        really guaranteed to be safe against a server crash.  (The maximum
        delay is three times <xref linkend="guc-wal-writer-delay">.)  Unlike
        <xref linkend="guc-fsync">, setting this parameter to <literal>off</>
        does not create any risk of database inconsistency: an operating
        system or database crash might
        result in some recent allegedly-committed transactions being lost, but
        the database state will be just the same as if those transactions had
        been aborted cleanly.  So, turning <varname>synchronous_commit</> off
        can be a useful alternative when performance is more important than
        exact certainty about the durability of a transaction.  For more
        discussion see <xref linkend="wal-async-commit">.
       </para>
____________________________________________________________________________-->
       <para>
        指定在命令返回<quote>success</>指示给客户端之前，一个事务是否需要等待 WAL 记录被写入磁盘。合法的值是<literal>on</>、<literal>remote_write</>、<literal>local</>和<literal>off</>。默认的并且安全的设置是<literal>on</>。当设置为<literal>off</>时，在向客户端报告成功和真正保证事务不会被服务器崩溃威胁之间会有延迟（最大的延迟是<xref linkend="guc-wal-writer-delay">的三倍）。不同于<xref linkend="guc-fsync">，将这个参数设置为<literal>off</>不会产生数据库不一致性的风险：一个操作系统或数据库崩溃可能会造成一些最近据说已提交的事务丢失，但数据库状态是一致的，就像这些事务已经被干净地中止。因此，当性能比完全确保事务的持久性更重要时，关闭<varname>synchronous_commit</>可以作为一个有效的代替手段。更多讨论见<xref linkend="wal-async-commit">。
       </para>
<!--==========================orignal english content==========================
       <para>
        If <xref linkend="guc-synchronous-standby-names"> is non-empty, this
        parameter also controls whether or not transaction commits will wait
        for their WAL records to be replicated to the standby server(s).
        When set to <literal>on</>, commits will wait until replies
        from the current synchronous standby(s) indicate they have received
        the commit record of the transaction and flushed it to disk.  This
        ensures the transaction will not be lost unless both the primary and
        all synchronous standbys suffer corruption of their database storage.
        When set to <literal>remote_apply</>, commits will wait until replies
        from the current synchronous standby(s) indicate they have received the
        commit record of the transaction and applied it, so that it has become
        visible to queries on the standby(s).
        When set to <literal>remote_write</>, commits will wait until replies
        from the current synchronous standby(s) indicate they have
        received the commit record of the transaction and written it out to
        their operating system. This setting is sufficient to
        ensure data preservation even if a standby instance of
        <productname>PostgreSQL</> were to crash, but not if the standby
        suffers an operating-system-level crash, since the data has not
        necessarily reached stable storage on the standby.
        Finally, the setting <literal>local</> causes commits to wait for
        local flush to disk, but not for replication.  This is not usually
        desirable when synchronous replication is in use, but is provided for
        completeness.
       </para>
____________________________________________________________________________-->
       <para>
        如果<xref linkend="guc-synchronous-standby-names">被设置，这个参数也控制事务提交是否将等待事务的 WAL 记录被复制到后备服务器上。当这个参数被设置为<literal>on</>时，直到来自于当前同步的后备服务器的一个回复指示该后备服务器已经收到了事务的提交记录并将其刷入了磁盘，主服务器上的事务才会提交。这保证事务将不会被丢失，除非主服务器和后备服务器都遭受到了数据库存储损坏的问题。当这个参数被设置为<literal>remote_write</>时，提交将等待，直到来自当前同步的后备服务器的一个回复指示该服务器已经收到了该事务的提交记录并且已经把该记录写出到后备服务器的操作系统，但是该数据并不一定到达了后备服务器上的稳定存储。这种设置足以保证数据在后备服务器的<productname>PostgreSQL</>实例崩溃时得以保存，但是不能保证后备服务器遭受操作系统级别崩溃时数据能被保持。
       </para>
<!--==========================orignal english content==========================
       <para>
        If <varname>synchronous_standby_names</> is empty, the settings
        <literal>on</>, <literal>remote_apply</>, <literal>remote_write</>
        and <literal>local</> all provide the same synchronization level:
        transaction commits only wait for local flush to disk.
       </para>
____________________________________________________________________________-->
       <para>
        当使用同步复制时，它将对等待本地刷写磁盘和 WAL 记录复制很敏感，或者对允许事务异步提交很敏感。不过，设置<literal>local</>可以用于希望等待本地刷写磁盘但不等待同步复制的事务。如果没有设置<varname>synchronous_standby_names</>，设置<literal>on</>、<literal>remote_write</>和<literal>local</>都提供了同样的同步级别：事务提交只等待本地刷写磁盘。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter can be changed at any time; the behavior for any
        one transaction is determined by the setting in effect when it
        commits.  It is therefore possible, and useful, to have some
        transactions commit synchronously and others asynchronously.
        For example, to make a single multistatement transaction commit
        asynchronously when the default is the opposite, issue <command>SET
        LOCAL synchronous_commit TO OFF</> within the transaction.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数可以随时被修改；任何一个事务的行为由其提交时生效的设置决定。因此，可以同步提交一些事务，同时异步提交其他事务。例如，当默认是相反时，实现一个单一多语句事务的异步提交，在事务中发出<command>SET LOCAL synchronous_commit TO OFF</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-sync-method" xreflabel="wal_sync_method">
<!--==========================orignal english content==========================
      <term><varname>wal_sync_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_sync_method</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_sync_method</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>wal_sync_method</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Method used for forcing WAL updates out to disk.
        If <varname>fsync</varname> is off then this setting is irrelevant,
        since WAL file updates will not be forced out at all.
        Possible values are:
       </para>
____________________________________________________________________________-->
       <para>
        用来向强制 WAL 更新到磁盘的方法。如果<varname>fsync</varname>是关闭的，那么这个设置就不相关，因为 WAL 文件更新将根本不会被强制。可能的值是：
       </para>
       <itemizedlist>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>open_datasync</> (write WAL files with <function>open()</> option <symbol>O_DSYNC</>)
        </para>
____________________________________________________________________________-->
        <para>
         <literal>open_datasync</>（用<function>open()</>选项<symbol>O_DSYNC</>写 WAL 文件）
        </para>
        </listitem>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>fdatasync</> (call <function>fdatasync()</> at each commit)
        </para>
____________________________________________________________________________-->
        <para>
         <literal>fdatasync</>（在每次提交时调用<function>fdatasync()</>）
        </para>
        </listitem>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>fsync</> (call <function>fsync()</> at each commit)
        </para>
____________________________________________________________________________-->
        <para>
         <literal>fsync</>（在每次提交时调用<function>fsync()</>）
        </para>
        </listitem>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>fsync_writethrough</> (call <function>fsync()</> at each commit, forcing write-through of any disk write cache)
        </para>
____________________________________________________________________________-->
        <para>
         <literal>fsync_writethrough</>（在每次提交时调用<function>fsync()</>，强制任何磁盘写高速缓存的直通写）
        </para>
        </listitem>
        <listitem>
<!--==========================orignal english content==========================
        <para>
         <literal>open_sync</> (write WAL files with <function>open()</> option <symbol>O_SYNC</>)
        </para>
____________________________________________________________________________-->
        <para>
         <literal>open_sync</>（用<function>open()</>选项<symbol>O_SYNC</>写 WAL 文件）
        </para>
        </listitem>
       </itemizedlist>
<!--==========================orignal english content==========================
       <para>
        The <literal>open_</>* options also use <literal>O_DIRECT</> if available.
        Not all of these choices are available on all platforms.
        The default is the first method in the above list that is supported
        by the platform, except that <literal>fdatasync</> is the default on
        Linux.  The default is not necessarily ideal; it might be
        necessary to change this setting or other aspects of your system
        configuration in order to create a crash-safe configuration or
        achieve optimal performance.
        These aspects are discussed in <xref linkend="wal-reliability">.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        <literal>open_</>* 选项也可以使用<literal>O_DIRECT</>（如果可用）。不是在所有平台上都能使用所有这些选择。默认值是列表中第一个被平台支持的那个， 不过<literal>fdatasync</>是 Linux 中的默认值。默认值不一定是最理想的；有可能需要修改这个设置或系统配置的其他方面来创建一个崩溃-安全的配置，或达到最佳性能。这些方面在<xref linkend="wal-reliability">中讨论。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-full-page-writes" xreflabel="full_page_writes">
<!--==========================orignal english content==========================
      <term><varname>full_page_writes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>full_page_writes</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>full_page_writes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>full_page_writes</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When this parameter is on, the <productname>PostgreSQL</> server
        writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint.
        This is needed because
        a page write that is in process during an operating system crash might
        be only partially completed, leading to an on-disk page
        that contains a mix of old and new data.  The row-level change data
        normally stored in WAL will not be enough to completely restore
        such a page during post-crash recovery.  Storing the full page image
        guarantees that the page can be correctly restored, but at the price
        of increasing the amount of data that must be written to WAL.
        (Because WAL replay always starts from a checkpoint, it is sufficient
        to do this during the first change of each page after a checkpoint.
        Therefore, one way to reduce the cost of full-page writes is to
        increase the checkpoint interval parameters.)
       </para>
____________________________________________________________________________-->
       <para>
        当这个参数为打开时，<productname>PostgreSQL</>服务器在一个检查点之后的页面的第一次修改期间将每个页面的全部内容写到  WAL 中。这么做是因为在操作系统崩溃期间正在处理的一次页写入可能只有部分完成，从而导致在一个磁盘页面中混合有新旧数据。在崩溃后的恢复期间，通常存储在 WAL 中的行级改变数据不足以完全恢复这样一个页面。存储完整的页面映像可以保证页面被正确存储，但代价是增加了必须被写入 WAL 的数据量（因为 WAL 重放总是从一个检查点开始，所以在检查点后每个页面的第一次改变时这样做就够了。因此，一种减小全页面写开销的方法是增加检查点间隔参数值）。
       </para>

<!--==========================orignal english content==========================
       <para>
        Turning this parameter off speeds normal operation, but
        might lead to either unrecoverable data corruption, or silent
        data corruption, after a system failure. The risks are similar to turning off
        <varname>fsync</varname>, though smaller, and it should be turned off
        only based on the same circumstances recommended for that parameter.
       </para>
____________________________________________________________________________-->
       <para>
        把这个参数关闭会加快正常操作，但是在系统失败后可能导致不可恢复的数据损坏，或者静默的数据损坏。其风险类似于关闭<varname>fsync</varname>， 但是风险较小。并且只有在可关闭<varname>fsync</varname>的情况下才应该关闭它。
       </para>

<!--==========================orignal english content==========================
       <para>
        Turning off this parameter does not affect use of
        WAL archiving for point-in-time recovery (PITR)
        (see <xref linkend="continuous-archiving">).
       </para>
____________________________________________________________________________-->
       <para>
        关闭这个选项并不影响用于时间点恢复（PITR）的 WAL 归档使用（见<xref linkend="continuous-archiving">）。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-log-hints" xreflabel="wal_log_hints">
<!--==========================orignal english content==========================
      <term><varname>wal_log_hints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_log_hints</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_log_hints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_log_hints</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When this parameter is <literal>on</>, the <productname>PostgreSQL</>
        server writes the entire content of each disk page to WAL during the
        first modification of that page after a checkpoint, even for
        non-critical modifications of so-called hint bits.
       </para>
____________________________________________________________________________-->
       <para>
        当这个参数为<literal>on</>时，<productname>PostgreSQL</>服务器一个检查点之后页面被第一次修改期间把该磁盘页面的整个内容都写入 WAL，即使对所谓的提示位做非关键修改也会这样做。
       </para>

<!--==========================orignal english content==========================
       <para>
        If data checksums are enabled, hint bit updates are always WAL-logged
        and this setting is ignored. You can use this setting to test how much
        extra WAL-logging would occur if your database had data checksums
        enabled.
       </para>
____________________________________________________________________________-->
       <para>
        如果启用了数据校验和，提示位更新总是会被 WAL 记录并且这个设置会被忽略。你可以使用这个
        设置测试如果你的数据库启用了数据校验和，会有多少额外的 WAL 记录发生。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter can only be set at server start. The default value is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在服务器启动时设置。默认值是<literal>off</>。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-wal-compression" xreflabel="wal_compression">
<!--==========================orignal english content==========================
      <term><varname>wal_compression</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_compression</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_compression</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_compression</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When this parameter is <literal>on</>, the <productname>PostgreSQL</>
        server compresses a full page image written to WAL when
        <xref linkend="guc-full-page-writes"> is on or during a base backup.
        A compressed page image will be decompressed during WAL replay.
        The default value is <literal>off</>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        当这个参数为<literal>on</>，
        <xref linkend="guc-full-page-writes">为on，或者基础备份中，
        <productname>PostgreSQL</>服务器压缩完整页面图片到WAL中。
        在WAL回放中解压压缩的页面图片。缺省值为<literal>off</>。
        只有超级用户可以修改这个设置。 
       </para>

<!--==========================orignal english content==========================
       <para>
        Turning this parameter on can reduce the WAL volume without
        increasing the risk of unrecoverable data corruption,
        but at the cost of some extra CPU spent on the compression during
        WAL logging and on the decompression during WAL replay.
       </para>
____________________________________________________________________________-->
       <para>
       开启这个参数可以减少WAL量而不增加不可恢复数据丢失的风险，
       但是增加了WAL日志压缩以及WAL回放解压过程中一些额外CPU成本开销。
       </para>
      </listitem>
     </varlistentry>
     

     <varlistentry id="guc-wal-buffers" xreflabel="wal_buffers">
<!--==========================orignal english content==========================
      <term><varname>wal_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_buffers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_buffers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_buffers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The amount of shared memory used for WAL data that has not yet been
        written to disk.  The default setting of -1 selects a size equal to
        1/32nd (about 3%) of <xref linkend="guc-shared-buffers">, but not less
        than <literal>64kB</literal> nor more than the size of one WAL
        segment, typically <literal>16MB</literal>.  This value can be set
        manually if the automatic choice is too large or too small,
        but any positive value less than <literal>32kB</literal> will be
        treated as <literal>32kB</literal>.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        用于还未写入磁盘的 WAL 数据的共享内存量。默认值 -1 选择等于<xref linkend="guc-shared-buffers">的 1/32 的尺寸（大约3%），但是不小于<literal>64kB</literal>也不大于 WAL 段的尺寸（通常为）。如果自动的选择太大或太小可以手工设置该值，但是任何小于<literal>32kB</literal>的正值都将被当作<literal>32kB</literal>。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        The contents of the WAL buffers are written out to disk at every
        transaction commit, so extremely large values are unlikely to
        provide a significant benefit.  However, setting this value to at
        least a few megabytes can improve write performance on a busy
        server where many clients are committing at once.  The auto-tuning
        selected by the default setting of -1 should give reasonable
        results in most cases.
       </para>
____________________________________________________________________________-->
       <para>
        在每次事务提交时，WAL 缓冲区的内容被写出到磁盘，因此极大的值不可能提供显著的收益。不过，把这个值设置为几个兆字节可以在一个繁忙的服务器（其中很多客户端会在同一时间提交）上提高写性能。由默认设置 -1 选择的自动调节将在大部分情况下得到合理的结果。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-delay" xreflabel="wal_writer_delay">
<!--==========================orignal english content==========================
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_writer_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies how often the WAL writer flushes WAL. After flushing WAL it
        sleeps for <varname>wal_writer_delay</> milliseconds, unless woken up
        by an asynchronously committing transaction. In case the last flush
        happened less than <varname>wal_writer_delay</> milliseconds ago and
        less than <varname>wal_writer_flush_after</> bytes of WAL have been
        produced since, WAL is only written to the OS, not flushed to disk.
        The default value is 200 milliseconds (<literal>200ms</>).  Note that
        on many systems, the effective resolution of sleep delays is 10
        milliseconds; setting <varname>wal_writer_delay</> to a value that is
        not a multiple of 10 might have the same results as setting it to the
        next higher multiple of 10. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        指定 WAL 写入器的活动轮次之间的延迟。在每个轮次中写入器会将 WAL 刷到磁盘。之后，休眠<varname>wal_writer_delay</>毫秒，然后重复。默认值是 200 毫秒（<literal>200ms</>）。需要注意的是，在许多系统上，有效的休眠延迟解析度是 10 毫秒；将<varname>wal_writer_delay</>设置为不是 10 的倍数将得到把它设置为下一个 10 的倍数同样的效果。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-writer-flush-after" xreflabel="wal_writer_flush_after">
<!--==========================orignal english content==========================
      <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_flush_after</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_writer_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_writer_flush_after</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
        Specifies how often the WAL writer flushes WAL. In case the last flush
        happened less than <varname>wal_writer_delay</> milliseconds ago and
        less than <varname>wal_writer_flush_after</> bytes of WAL have been
        produced since, WAL is only written to the OS, not flushed to disk.
        If <varname>wal_writer_flush_after</> is set to <literal>0</> WAL is
        flushed every time the WAL writer has written WAL.  The default is
        <literal>1MB</literal>. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
      <para>
        指定 WAL 写入器刷写 WAL 的频繁程度。
        假如上一次刷写发生在少于<varname>wal_writer_delay</>
        毫秒以前并且从上一次刷写发生以来产生了少于<varname>wal_writer_flush_after</>
        字节的 WAL，WAL 将只被写入到 OS 而不是被刷到磁盘。如果
        <varname>wal_writer_flush_after</>被设置为<literal>0</>，
        则每次 WAL 写入器写完 WAL 之后 WAL 就会被刷写。默认是<literal>1MB</literal>。
        这个参数只能在<filename>postgresql.conf</>文件中或者服务器命令行上设置。 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-delay" xreflabel="commit_delay">
<!--==========================orignal english content==========================
      <term><varname>commit_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>commit_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        <varname>commit_delay</varname> adds a time delay, measured in
        microseconds, before a WAL flush is initiated.  This can improve
        group commit throughput by allowing a larger number of transactions
        to commit via a single WAL flush, if system load is high enough
        that additional transactions become ready to commit within the
        given interval.  However, it also increases latency by up to
        <varname>commit_delay</varname> microseconds for each WAL
        flush.  Because the delay is just wasted if no other transactions
        become ready to commit, a delay is only performed if at least
        <varname>commit_siblings</varname> other transactions are active
        when a flush is about to be initiated.  Also, no delays are
        performed if <varname>fsync</varname> is disabled.
        The default <varname>commit_delay</> is zero (no delay).
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        在一次 WAL 刷写被发起之前，<varname>commit_delay</varname>增加一个时间延迟，以微妙计。如果系统负载足够高，使得在一个给定间隔内有额外的事务准备好提交，那么通过允许更多事务通过一个单次 WAL 刷写来提交能够提高组提交的吞吐量。但是，它也把每次 WAL 刷写的潜伏期增加到了最多<varname>commit_delay</varname>微秒。因为如果没有其他事务准备好提交，就会浪费一次延迟，只有在当一次刷写将要被发起时有至少<varname>commit_siblings</varname>个其他活动事务时，才会执行一次延迟。另外，如果<varname>fsync</varname>被禁用，则将不会执行任何延迟。默认的<varname>commit_delay</>是零（无延迟）。只有超级用户才能修改这个设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        In <productname>PostgreSQL</> releases prior to 9.3,
        <varname>commit_delay</varname> behaved differently and was much
        less effective: it affected only commits, rather than all WAL flushes,
        and waited for the entire configured delay even if the WAL flush
        was completed sooner.  Beginning in <productname>PostgreSQL</> 9.3,
        the first process that becomes ready to flush waits for the configured
        interval, while subsequent processes wait only until the leader
        completes the flush operation.
       </para>
____________________________________________________________________________-->
       <para>
        在<productname>PostgreSQL</>的 9.3 发布之前，<varname>commit_delay</varname>的行为不同并且效果更差：它只影响提交，而不是所有 WAL 刷写，并且即使在 WAL 刷写马上就要完成时也会等待一整个配置的延迟。从<productname>PostgreSQL</> 9.3 中开始，第一个准备好刷写的进程会等待配置的间隔，而后续的进程只等到领先者完成刷写操作。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-commit-siblings" xreflabel="commit_siblings">
<!--==========================orignal english content==========================
      <term><varname>commit_siblings</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_siblings</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>commit_siblings</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>commit_siblings</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Minimum number of concurrent open transactions to require
        before performing the <varname>commit_delay</> delay. A larger
        value makes it more probable that at least one other
        transaction will become ready to commit during the delay
        interval. The default is five transactions.
       </para>
____________________________________________________________________________-->
       <para>
        在执行<varname>commit_delay</>延迟时，要求的并发活动事务的最小数目。大一些的值会导致在延迟间隔期间更可能有至少另外一个事务准备好提交。默认值是五个事务。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-checkpoints">
<!--==========================orignal english content==========================
     <title>Checkpoints</title>
____________________________________________________________________________-->
     <title>检查点</title>

    <variablelist>     
     <varlistentry id="guc-checkpoint-timeout" xreflabel="checkpoint_timeout">
<!--==========================orignal english content==========================
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>checkpoint_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Maximum time between automatic WAL checkpoints, in seconds.
        The valid range is between 30 seconds and one day.
        The default is five minutes (<literal>5min</>).
        Increasing this parameter can increase the amount of time needed
        for crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        自动 WAL 检查点之间的最长时间，以秒计。
        有效值在30秒和1天之间。
        默认是 5 分钟（<literal>5min</>）。
        增加这个参数的值会增加崩溃恢复所需的时间。
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-completion-target" xreflabel="checkpoint_completion_target">
<!--==========================orignal english content==========================
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>checkpoint_completion_target</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>checkpoint_completion_target</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>checkpoint_completion_target</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the target of checkpoint completion, as a fraction of
        total time between checkpoints. The default is 0.5.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        指定检查点完成的目标，作为检查点之间总时间的一部分。默认是 0.5。

        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-checkpoint-flush-after" xreflabel="checkpoint_flush_after">
<!--==========================orignal english content==========================
      <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_flush_after</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>checkpoint_flush_after</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_flush_after</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Whenever more than <varname>checkpoint_flush_after</varname> bytes
        have been written while performing a checkpoint, attempt to force the
        OS to issue these writes to the underlying storage.  Doing so will
        limit the amount of dirty data in the kernel's page cache, reducing
        the likelihood of stalls when an fsync is issued at the end of the
        checkpoint, or when the OS writes data back in larger batches in the
        background.  Often that will result in greatly reduced transaction
        latency, but there also are some cases, especially with workloads
        that are bigger than <xref linkend="guc-shared-buffers">, but smaller
        than the OS's page cache, where performance might degrade.  This
        setting may have no effect on some platforms.  The valid range is
        between <literal>0</literal>, which disables controlled writeback,
        and <literal>2MB</literal>.  The default is <literal>256kB</> on
        Linux, <literal>0</> elsewhere.  (Non-default values of
        <symbol>BLCKSZ</symbol> change the default and maximum.)
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        在执行检查点时，只要有<varname>checkpoint_flush_after</varname>字节被写入，
        就尝试强制 OS 把这些写发送到底层存储。
        这样做将会限制内核页面高速缓存中的脏数据数量，
        降低在检查点末尾发出 fsync 或者 OS 在后台大批量写回数据时被卡住的可能性。
        那常常会导致大幅度压缩的事务延迟，但是也有一些情况
        （特别是负载超过<xref linkend="guc-shared-buffers">但小于 OS 页面高速缓存）
        的性能会降低。这种设置可能会在某些平台上没有效果。合法的范围在
        <literal>0</literal>（禁用受控写回）和<literal>2MB</literal>之间。
        Linux 上的默认值是<literal>256kB</>，其他平台上是<literal>0</>
        （非默认的<symbol>BLCKSZ</symbol>值会改变默认值和最大值）。
        这个参数只能在<filename>postgresql.conf</>文件中或者服务器命令行上设置。 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-checkpoint-warning" xreflabel="checkpoint_warning">
<!--==========================orignal english content==========================
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_warning</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>checkpoint_warning</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>checkpoint_warning</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Write a message to the server log if checkpoints caused by
        the filling of checkpoint segment files happen closer together
        than this many seconds (which suggests that
        <varname>max_wal_size</> ought to be raised).  The default is
        30 seconds (<literal>30s</>).  Zero disables the warning.
        No warnings will be generated if <varname>checkpoint_timeout</varname>
        is less than <varname>checkpoint_warning</varname>.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        如果由于填充检查点段文件导致的检查点之间的间隔低于这个参数表示的秒数，那么就向服务器日志写一个消息（它建议增加<varname>max_wal_size</>的值）。默认值是 30 秒（<literal>30s</>）。零则关闭警告。如果<varname>checkpoint_timeout</varname>低于<varname>checkpoint_warning</varname>，则不会有警告产生。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-wal-size" xreflabel="max_wal_size">
<!--==========================orignal english content==========================
      <term><varname>max_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_wal_size</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Maximum size to let the WAL grow to between automatic WAL
        checkpoints. This is a soft limit; WAL size can exceed
        <varname>max_wal_size</> under special circumstances, like
        under heavy load, a failing <varname>archive_command</>, or a high
        <varname>wal_keep_segments</> setting. The default is 1 GB.
        Increasing this parameter can increase the amount of time needed for
        crash recovery.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        在自动WAL检查点使得WAL增长到最大尺寸。这是软限制；特殊情况下WAL大小可以超过
        <varname>max_wal_size</>，如重负载下，错误<varname>archive_command</>，或者
        较大<varname>wal_keep_segments</>的设置。缺省是1GB。
        增加这个参数会延长崩溃恢复所需要的时间。
        这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-wal-size" xreflabel="min_wal_size">
<!--==========================orignal english content==========================
      <term><varname>min_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_wal_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>min_wal_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_wal_size</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        As long as WAL disk usage stays below this setting, old WAL files are
        always recycled for future use at a checkpoint, rather than removed.
        This can be used to ensure that enough WAL space is reserved to
        handle spikes in WAL usage, for example when running large batch
        jobs. The default is 80 MB.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        只要WAL磁盘使用率低于这个设置，旧的WAL文件总数被回收，以供将来检查点使用。而不是删除。
        这可以用来确保预留足够的WAL空间处理WAL使用中的峰值，比如当运行大批量工作时。
        缺省是80MB。这个参数只能在<filename>postgresql.conf</>文件或者
        服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     
     
     </variablelist>
     </sect2>
     <sect2 id="runtime-config-wal-archiving">
<!--==========================orignal english content==========================
     <title>Archiving</title>
____________________________________________________________________________-->
     <title>归档</title>

    <variablelist>
     <varlistentry id="guc-archive-mode" xreflabel="archive_mode">
<!--==========================orignal english content==========================
      <term><varname>archive_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>archive_mode</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>archive_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>archive_mode</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>archive_mode</> is enabled, completed WAL segments
        are sent to archive storage by setting
        <xref linkend="guc-archive-command">. In addition to <literal>off</>,
        to disable, there are two modes: <literal>on</>, and
        <literal>always</>. During normal operation, there is no
        difference between the two modes, but when set to <literal>always</>
        the WAL archiver is enabled also during archive recovery or standby
        mode. In <literal>always</> mode, all files restored from the archive
        or streamed with streaming replication will be archived (again). See
        <xref linkend="continuous-archiving-in-standby"> for details.
       </para>
____________________________________________________________________________-->
       <para>
        当启用<varname>archive_mode</>时，
        可以通过设置<xref linkend="guc-archive-command">命令将完成的 
        WAL段发送到归档存储。
        除了<literal>off</>，要禁用两种模式<literal>on</>和
        <literal>always</>。在正常操作过程中，两种模式没有区别，但是
        当设置为<literal>always</>时，归档恢复或者待机模式中激活WAL归档。
        在<literal>always</>模式中，
        从归档中恢复所有文件或者再次归档使用流复制传输的文件。
        参阅<xref linkend="continuous-archiving-in-standby">获取详情。
       
       </para>
<!--==========================orignal english content==========================
       <para>
        <varname>archive_mode</> and <varname>archive_command</> are
        separate variables so that <varname>archive_command</> can be
        changed without leaving archiving mode.
        This parameter can only be set at server start.
        <varname>archive_mode</> cannot be enabled when
        <varname>wal_level</> is set to <literal>minimal</>.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>archive_mode</>和<varname>archive_command</>
        是独立的变量，这样可以在不影响归档模式的前提下修改
        <varname>archive_command</>。这个参数只能在服务器启动时设置。
        当<varname>wal_level</>被设置为<literal>minimal</>时，
        <varname>archive_mode</>不能被启用。 
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-command" xreflabel="archive_command">
<!--==========================orignal english content==========================
      <term><varname>archive_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_command</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>archive_command</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>archive_command</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The local shell command to execute to archive a completed WAL file
        segment.  Any <literal>%p</> in the string is
        replaced by the path name of the file to archive, and any
        <literal>%f</> is replaced by only the file name.
        (The path name is relative to the working directory of the server,
        i.e., the cluster's data directory.)
        Use <literal>%%</> to embed an actual <literal>%</> character in the
        command.  It is important for the command to return a zero
        exit status only if it succeeds. For more information see
        <xref linkend="backup-archiving-wal">.
       </para>
____________________________________________________________________________-->
       <para>
        本地 shell 命令被执行来归档一个完成的 WAL 文件段。字符串中的任何<literal>%p</>被替换成要被归档的文件的路径名， 而<literal>%f</>只被文件名替换（路径名是相对于服务器的工作目录， 即集簇的数据目录）。如果要在命令里嵌入一个真正的<literal>%</>字符，可以使用<literal>%%</>。有一点很重要，该命令只在成功时返回一个零作为退出状态。更多信息请见<xref linkend="backup-archiving-wal">。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.  It is ignored unless
        <varname>archive_mode</> was enabled at server start.
        If <varname>archive_command</> is an empty string (the default) while
        <varname>archive_mode</> is enabled, WAL archiving is temporarily
        disabled, but the server continues to accumulate WAL segment files in
        the expectation that a command will soon be provided.  Setting
        <varname>archive_command</> to a command that does nothing but
        return true, e.g. <literal>/bin/true</> (<literal>REM</> on
        Windows), effectively disables
        archiving, but also breaks the chain of WAL files needed for
        archive recovery, so it should only be used in unusual circumstances.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。除非服务器启动时启用了<varname>archive_mode</>，否则它会被忽略。如果<varname>archive_mode</>被启用时，<varname>archive_command</>是一个空字符串（默认），WAL 归档会被临时禁用，但服务器仍会继续累计 WAL 段文件，期待着一个命令被提供。将<varname>archive_command</>设置为一个只返回真但不做任何事的命令（例如<literal>/bin/true</>或 Windows 上的<literal>REM</>）实际上会禁用归档，也会打破归档恢复所需的 WAL 文件链，因此只有在极少数情况下才能用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-archive-timeout" xreflabel="archive_timeout">
<!--==========================orignal english content==========================
      <term><varname>archive_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>archive_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>archive_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>archive_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The <xref linkend="guc-archive-command"> is only invoked for
        completed WAL segments. Hence, if your server generates little WAL
        traffic (or has slack periods where it does so), there could be a
        long delay between the completion of a transaction and its safe
        recording in archive storage.  To limit how old unarchived
        data can be, you can set <varname>archive_timeout</> to force the
        server to switch to a new WAL segment file periodically.  When this
        parameter is greater than zero, the server will switch to a new
        segment file whenever this many seconds have elapsed since the last
        segment file switch, and there has been any database activity,
        including a single checkpoint.  (Increasing
        <varname>checkpoint_timeout</> will reduce unnecessary
        checkpoints on an idle system.)
        Note that archived files that are closed early
        due to a forced switch are still the same length as completely full
        files.  Therefore, it is unwise to use a very short
        <varname>archive_timeout</> &mdash; it will bloat your archive
        storage.  <varname>archive_timeout</> settings of a minute or so are
        usually reasonable.  You should consider using streaming replication,
        instead of archiving, if you want data to be copied off the master
        server more quickly than that.
        This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        <xref linkend="guc-archive-command">仅在已完成的 WAL 段上调用。因此，如果你的服务器只产生很少的 WAL 流量（或产生流量的周期很长），那么在事务完成和它被安全地记录到归档存储之间将有一个很长的延迟。为了限制未归档数据存在的时间，你可以设置<varname>archive_timeout</>来强制服务器来周期性地切换到一个新的 WAL 段文件。当这个参数被设置为大于零时，只要从上次段文件切换后过了参数所设置的那么多秒并且已经有过任何数据库活动（包括一个单一检查点），服务器将切换到一个新的段文件（增加<varname>checkpoint_timeout</>将减少在一个空闲系统中不必要的检查点）。注意，由于强制切换而提早关闭的被归档文件仍然与完整的归档文件长度相同。因此，使用非常短的<varname>archive_timeout</>是不明智的 &mdash; 它将占用巨大的归档存储。一分钟左右的<varname>archive_timeout</>设置通常比较合理。如果你希望数据能被更快地从主服务器上复制下来，你应该考虑使用流复制而不是归档。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

   </sect1>

   <sect1 id="runtime-config-replication">
<!--==========================orignal english content==========================
    <title>Replication</title>
____________________________________________________________________________-->
    <title>复制</title>

<!--==========================orignal english content==========================
    <para>
     These settings control the behavior of the built-in
     <firstterm>streaming replication</> feature (see
     <xref linkend="streaming-replication">).  Servers will be either a
     Master or a Standby server.  Masters can send data, while Standby(s)
     are always receivers of replicated data.  When cascading replication
     (see <xref linkend="cascading-replication">) is used, Standby server(s)
     can also be senders, as well as receivers.
     Parameters are mainly for Sending and Standby servers, though some
     parameters have meaning only on the Master server.  Settings may vary
     across the cluster without problems if that is required.
    </para>
____________________________________________________________________________-->
    <para>
     这些设置控制内建<firstterm>流复制</>特性（见<xref linkend="streaming-replication">）的行为。服务器将可以是主控服务器或后备服务器。主控机能发送数据，而后备机总是被复制数据的接收者。当使用级联复制（见<xref linkend="cascading-replication">）时，后备服务器也可以是发送者，同时也是接收者。这些参数主要用于发送服务器和后备服务器，尽管某些只在主服务器上有意义。如果有必要，设置可以在集群中变化而不出问题。
    </para>

    <sect2 id="runtime-config-replication-sender">
<!--==========================orignal english content==========================
     <title>Sending Server(s)</title>
____________________________________________________________________________-->
     <title>发送服务器</title>

<!--==========================orignal english content==========================
     <para>
      These parameters can be set on any server that is
      to send replication data to one or more standby servers.
      The master is always a sending server, so these parameters must
      always be set on the master.
      The role and meaning of these parameters does not change after a
      standby becomes the master.
     </para>
____________________________________________________________________________-->
     <para>
      这些参数可以在任何发送复制数据给一个或多个后备服务器的服务器上设置。主控机总是一个发送服务器，因此这些参数总是要在主控机上设置。这些参数的角色和含义不会在一个后备机变成主控机后改变。
     </para>

     <variablelist>
      <varlistentry id="guc-max-wal-senders" xreflabel="max_wal_senders">
<!--==========================orignal english content==========================
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_wal_senders</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>max_wal_senders</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_wal_senders</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum number of concurrent connections from
        standby servers or streaming base backup clients (i.e., the
        maximum number of simultaneously running WAL sender
        processes). The default is zero, meaning replication is
        disabled. WAL sender processes count towards the total number
        of connections, so the parameter cannot be set higher than
        <xref linkend="guc-max-connections">.  Abrupt streaming client
        disconnection might cause an orphaned connection slot until
        a timeout is reached, so this parameter should be set slightly
        higher than the maximum number of expected clients so disconnected
        clients can immediately reconnect.  This parameter can only
        be set at server start. <varname>wal_level</> must be set to
        <literal>replica</> or higher to allow connections from standby
        servers.
       </para>
____________________________________________________________________________-->
       <para>
        指定来自后备服务器或流式基础备份客户端的并发连接的最大数量（即同时运行 WAL 发送进程
        的最大数）。默认值是零，它意味着禁用复制。WAL 发送进程被计算在连接总数内，因此该参数
        不能被设置为高于<xref linkend="guc-max-connections">的值。突然的流客户端断开
        连接可能导致一个孤立连接槽（知道达到超时），因此这个参数应该设置得略高于最大客户端
        连接数，这样断开连接的客户端可以立刻重新连接。这个参数只能在服务器启动时被设置。
        <varname>wal_level</>必须设置为<literal>archive</>或更高级别以允许来自后备服
        务器的连接。
       </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-max-replication-slots" xreflabel="max_replication_slots">
<!--==========================orignal english content==========================
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>max_replication_slots</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>max_replication_slots</>配置参数</primary>
       </indexterm>
       </term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Specifies the maximum number of replication slots
         (see <xref linkend="streaming-replication-slots">) that the server
         can support. The default is zero.  This parameter can only be set at
         server start.
         <varname>wal_level</varname> must be set
         to <literal>replica</literal> or higher to allow replication slots to
         be used. Setting it to a lower value than the number of currently
         existing replication slots will prevent the server from starting.
        </para>
____________________________________________________________________________-->
        <para>
         指定服务器可以支持的复制槽（见<xref linkend="streaming-replication-slots">）
         最大数量。默认值为零。这个参数只能在服务器启动时设置。要允许使用复制槽，
         <varname>wal_level</varname>必须被设置为<literal>archive</literal>或
         更高。把它的值设置为低于现有复制槽的数量会阻止服务器启动。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-wal-keep-segments" xreflabel="wal_keep_segments">
<!--==========================orignal english content==========================
       <term><varname>wal_keep_segments</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>wal_keep_segments</> configuration parameter</primary>
       </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>wal_keep_segments</varname> (<type>integer</type>)
       <indexterm>
        <primary><varname>wal_keep_segments</>配置参数</primary>
       </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the minimum number of past log file segments kept in the
        <filename>pg_xlog</>
        directory, in case a standby server needs to fetch them for streaming
        replication. Each segment is normally 16 megabytes. If a standby
        server connected to the sending server falls behind by more than
        <varname>wal_keep_segments</> segments, the sending server might remove
        a WAL segment still needed by the standby, in which case the
        replication connection will be terminated.  Downstream connections
        will also eventually fail as a result.  (However, the standby
        server can recover by fetching the segment from archive, if WAL
        archiving is in use.)
       </para>
____________________________________________________________________________-->
       <para>
        指定在后备服务器需要为流复制获取日志段文件的情况下，<filename>pg_xlog</>目录下所能保留的过去日志文件段的最小数目。每个段通常是 16 兆字节。如果一个连接到发送服务器的后备服务器落后了超过<varname>wal_keep_segments</>个段，发送服务器可以移除一个后备机仍然需要的 WAL 段，在这种情况下复制连接将被中断。最终结果是下行连接也将最终失败（不过，如果在使用 WAL 归档，后备服务器可以通过从归档获取段来恢复）。
       </para>

<!--==========================orignal english content==========================
       <para>
        This sets only the minimum number of segments retained in
        <filename>pg_xlog</>; the system might need to retain more segments
        for WAL archival or to recover from a checkpoint. If
        <varname>wal_keep_segments</> is zero (the default), the system
        doesn't keep any extra segments for standby purposes, so the number
        of old WAL segments available to standby servers is a function of
        the location of the previous checkpoint and status of WAL
        archiving.
        This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        只设置<filename>pg_xlog</>中保留的文件段的最小数目；系统可能需要为 WAL 归档或从一个检查点恢复保留更多段。如果<varname>wal_keep_segments</>为零（默认值）， 更多的空间来 存放WAL归档或从一个检查点恢复。如果wal_keep_segments是零（缺省）， 系统不会为后备目的保留任何多余的段，因此后备服务器可用的旧 WAL 段的数量是一个上个检查点位置和 WAL 归档状态的函数。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
       </listitem>
      </varlistentry>

     <varlistentry id="guc-wal-sender-timeout" xreflabel="wal_sender_timeout">
<!--==========================orignal english content==========================
      <term><varname>wal_sender_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_sender_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_sender_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_sender_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Terminate replication connections that are inactive longer
        than the specified number of milliseconds. This is useful for
        the sending server to detect a standby crash or network outage.
        A value of zero disables the timeout mechanism.  This parameter
        can only be set in
        the <filename>postgresql.conf</> file or on the server command line.
        The default value is 60 seconds.
       </para>
____________________________________________________________________________-->
       <para>
        中断那些停止活动超过指定毫秒数的复制连接。这对发送服务器检测一个后备机崩溃或网络中断有用。零值将禁用该超时机制。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是 60 秒。
       </para>
      </listitem>
     </varlistentry>

     
     <varlistentry id="guc-track-commit-timestamp" xreflabel="track_commit_timestamp">
<!--==========================orignal english content==========================
      <term><varname>track_commit_timestamp</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_commit_timestamp</varname> (<type>bool</type>)
      <indexterm>
       <primary><varname>track_commit_timestamp</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Record commit time of transactions. This parameter
        can only be set in <filename>postgresql.conf</> file or on the server
        command line. The default value is <literal>off</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        记录事务提交时间。这个参数只能在<filename>postgresql.conf</>文件
        或者服务器命令行上设置。缺省值是<literal>off</literal>。
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-master">
<!--==========================orignal english content==========================
     <title>Master Server</title>
____________________________________________________________________________-->
     <title>主服务器</title>

<!--==========================orignal english content==========================
     <para>
      These parameters can be set on the master/primary server that is
      to send replication data to one or more standby servers.
      Note that in addition to these parameters,
      <xref linkend="guc-wal-level"> must be set appropriately on the master
      server, and optionally WAL archiving can be enabled as
      well (see <xref linkend="runtime-config-wal-archiving">).
      The values of these parameters on standby servers are irrelevant,
      although you may wish to set them there in preparation for the
      possibility of a standby becoming the master.
     </para>
____________________________________________________________________________-->
     <para>
      这些参数可以在发送复制数据给一个或多个后备服务器的主控/主要服务器上设置。注意除了这些参数之外，在主控服务器上必须设置合适的<xref linkend="guc-wal-level">，并且也启用可选的 WAL 归档（见<xref linkend="runtime-config-wal-archiving">）。这些参数值与后备服务器无关，尽管你可能希望为了准备好一个后备机转变成主控机来设置这些参数。
     </para>

    <variablelist>

     <varlistentry id="guc-synchronous-standby-names" xreflabel="synchronous_standby_names">
<!--==========================orignal english content==========================
      <term><varname>synchronous_standby_names</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronous_standby_names</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>synchronous_standby_names</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>synchronous_standby_names</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies a list of standby servers that can support
        <firstterm>synchronous replication</>, as described in
        <xref linkend="synchronous-replication">.
        There will be one or more active synchronous standbys;
        transactions waiting for commit will be allowed to proceed after
        these standby servers confirm receipt of their data.
        The synchronous standbys will be those whose names appear
        earlier in this list, and
        that are both currently connected and streaming data in real-time
        (as shown by a state of <literal>streaming</literal> in the
        <link linkend="monitoring-stats-views-table">
        <literal>pg_stat_replication</></link> view).
        Other standby servers appearing later in this list represent potential
        synchronous standbys. If any of the current synchronous
        standbys disconnects for whatever reason,
        it will be replaced immediately with the next-highest-priority standby.
        Specifying more than one standby name can allow very high availability.
       </para>
____________________________________________________________________________-->
       <para>
        如<xref linkend="synchronous-replication">所述，
        这个参数指定一个支持<firstterm>同步复制</>的后备服务器的列表。
        可能会有一个或者多个活动的同步后备服务器，
        在这些后备服务器确认收到它们的数据之后，等待提交的事务将被允许继续下去。
        同步后备服务器是那些名字出现在这个列表前面，
        并且当前已连接并且正在实时流传输数据（如<link linkend="monitoring-stats-views-table">
        <literal>pg_stat_replication</></link>视图中<literal>streaming</literal>
        的状态所示）的服务器。这个列表中后面的其他那些后备服务器表示潜在的
        同步后备服务器。如果任何当前的同步后备服务器由于某种原因断开连接，
        它将立刻被下一个最高优先级的后备服务器所替代。
        指定多于一个后备服务器名称可以实现很高的可用性。 
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter specifies a list of standby servers using
        either of the following syntaxes:
<synopsis>
<replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
<replaceable class="parameter">standby_name</replaceable> [, ...]
</synopsis>
        where <replaceable class="parameter">num_sync</replaceable> is
        the number of synchronous standbys that transactions need to
        wait for replies from,
        and <replaceable class="parameter">standby_name</replaceable>
        is the name of a standby server. For example, a setting of
        <literal>3 (s1, s2, s3, s4)</> makes transaction commits wait
        until their WAL records are received by three higher-priority standbys
        chosen from standby servers <literal>s1</>, <literal>s2</>,
        <literal>s3</> and <literal>s4</>.
        </para>
____________________________________________________________________________-->
       <para>
        这个参数使用下面的语法之一来指定一个后备服务器列表： 
<synopsis>
<replaceable class="parameter">num_sync</replaceable> ( <replaceable class="parameter">standby_name</replaceable> [, ...] )
<replaceable class="parameter">standby_name</replaceable> [, ...]
</synopsis>
        其中<replaceable class="parameter">num_sync</replaceable>
        是事务需要等待其回复的同步后备服务器的数量，<replaceable class="parameter">standby_name</replaceable>
        是一个后备服务器的名称。例如，设置<literal>3 (s1, s2, s3, s4)</>
        会让事务提交等待，直到它们的 WAL 记录被后备服务器<literal>s1</>、<literal>s2</>、
        <literal>s3</>和<literal>s4</>中选出的三个较高优先级后备服务器接收到。
        </para>

<!--==========================orignal english content==========================
        <para>
        The second syntax was used before <productname>PostgreSQL</>
        version 9.6 and is still supported. It's the same as the first syntax
        with <replaceable class="parameter">num_sync</replaceable> equal to 1.
        For example, <literal>1 (s1, s2)</> and
        <literal>s1, s2</> have the same meaning: either <literal>s1</>
        or <literal>s2</> is chosen as a synchronous standby.
       </para>
____________________________________________________________________________-->
        <para>
        <productname>PostgreSQL</>版本 9.6 之前使用过第二种语法，目前也仍然支持。
        它和第一种语法相同，但是<replaceable class="parameter">num_sync</replaceable>
        等于 1。例如，<literal>1 (s1, s2)</>和<literal>s1, s2</>具有相同的含义：
        <literal>s1</>或者<literal>s2</>会被选中作为同步后备服务器。 
       </para>
       
<!--==========================orignal english content==========================
        <para>
        The name of a standby server for this purpose is the
        <varname>application_name</> setting of the standby, as set in the
        <varname>primary_conninfo</> of the standby's WAL receiver.  There is
        no mechanism to enforce uniqueness. In case of duplicates one of the
        matching standbys will be considered as higher priority, though
        exactly which one is indeterminate.
        The special entry <literal>*</> matches any
        <varname>application_name</>, including the default application name
        of <literal>walreceiver</>.
       </para>
____________________________________________________________________________-->
        <para>
        用于此目的的一个后备服务器的名称是后备服务器的<varname>application_name</>设置，
        正如在后备机的 WAL 接收进程的<varname>primary_conninfo</>中所设置的。
        现在没有机制可以强制唯一性。在重名的情况下，匹配的后备机之一将被选中为同步后备机，
        但是究竟是哪一个被选中是无法判断的。特殊项<literal>*</>可匹配任意
        <varname>application_name</>，包括<literal>walreceiver</>的默认应用名称。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         Each <replaceable class="parameter">standby_name</replaceable>
         should have the form of a valid SQL identifier, unless it
         is <literal>*</>.  You can use double-quoting if necessary.  But note
         that <replaceable class="parameter">standby_name</replaceable>s are
         compared to standby application names case-insensitively, whether
         double-quoted or not.
        </para>
____________________________________________________________________________-->
        <para>
         每一个<replaceable class="parameter">standby_name</replaceable>
         都应该具有合法 SQL 标识符的形式，除非它是<literal>*</>。
         如果必要你可以使用双引号。但是注意在比较
         <replaceable class="parameter">standby_name</replaceable>
         和后备机应用程序名称时是大小写不敏感的（不管有没有双引号）。
        </para>
       </note>
<!--==========================orignal english content==========================
       <para>
        If no synchronous standby names are specified here, then synchronous
        replication is not enabled and transaction commits will not wait for
        replication.  This is the default configuration.  Even when
        synchronous replication is enabled, individual transactions can be
        configured not to wait for replication by setting the
        <xref linkend="guc-synchronous-commit"> parameter to
        <literal>local</> or <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        如果这里没有指定同步后备机名称，那么同步复制不能被启用并且事务提交将不会等待复制。这是默认的配置。即便当同步复制被启用时，个体事务也可以被配置为不等待复制，做法是将<xref linkend="guc-synchronous-commit">参数设置为<literal>local</>或<literal>off</>。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-defer-cleanup-age" xreflabel="vacuum_defer_cleanup_age">
<!--==========================orignal english content==========================
      <term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_defer_cleanup_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>vacuum_defer_cleanup_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_defer_cleanup_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the number of transactions by which <command>VACUUM</> and
        <acronym>HOT</> updates will defer cleanup of dead row versions. The
        default is zero transactions, meaning that dead row versions can be
        removed as soon as possible, that is, as soon as they are no longer
        visible to any open transaction.  You may wish to set this to a
        non-zero value on a primary server that is supporting hot standby
        servers, as described in <xref linkend="hot-standby">.  This allows
        more time for queries on the standby to complete without incurring
        conflicts due to early cleanup of rows.  However, since the value
        is measured in terms of number of write transactions occurring on the
        primary server, it is difficult to predict just how much additional
        grace time will be made available to standby queries.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
                指定<command>VACUUM</>和<acronym>HOT</>更新在清除死亡行版本之前，应该推迟多久（以事务数量计）。默认值是零个事务，表示死亡行版本将被尽可能快地清除，即当它们不再对任何打开的事务可见时尽快清除。在一个支持热后备服务器的主服务器上，你可能希望把这个参数设置为一个非零值，如<xref linkend="hot-standby">中所述。这允许后备机上的查询有更多时间来完成而不会由于先前的行清除产生冲突。但是，由于该值是用在主服务器上发生的写事务的数目衡量的，很难预测对后备机查询可用的附加时间到底是多少。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        You should also consider setting <varname>hot_standby_feedback</>
        on standby server(s) as an alternative to using this parameter.
       </para>
____________________________________________________________________________-->
       <para>
        你也可以考虑设置后备服务器上的<varname>hot_standby_feedback</>作为使用这个参数的一种替代方案。
       </para>
<!--==========================orignal english content==========================
       <para>
        This does not prevent cleanup of dead rows which have reached the age
        specified by <varname>old_snapshot_threshold</>.
       </para>
____________________________________________________________________________-->
       <para>
        这无法阻止已经达到<varname>old_snapshot_threshold</>
        所指定年龄的死亡行被清除。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-replication-standby">
<!--==========================orignal english content==========================
     <title>Standby Servers</title>
____________________________________________________________________________-->
     <title>后备服务器</title>

<!--==========================orignal english content==========================
     <para>
      These settings control the behavior of a standby server that is
      to receive replication data.  Their values on the master server
      are irrelevant.
     </para>
____________________________________________________________________________-->
     <para>
      这些设置控制接收复制数据的一个后备服务器的行为。它们的值与主服务器无关。
     </para>

    <variablelist>

     <varlistentry id="guc-hot-standby" xreflabel="hot_standby">
<!--==========================orignal english content==========================
      <term><varname>hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>hot_standby</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies whether or not you can connect and run queries during
        recovery, as described in <xref linkend="hot-standby">.
        The default value is <literal>off</literal>.
        This parameter can only be set at server start. It only has effect
        during archive recovery or in standby mode.
       </para>
____________________________________________________________________________-->
       <para>
        指定在恢复期间，你是否能够连接并运行查询，如<xref linkend="hot-standby">中所述。默认值是<literal>off</literal>。这个参数只能在服务器启动时设置。它只在归档恢复期间或后备机模式下才有效。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-archive-delay" xreflabel="max_standby_archive_delay">
<!--==========================orignal english content==========================
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_archive_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_standby_archive_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_archive_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When Hot Standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict">.
        <varname>max_standby_archive_delay</> applies when WAL data is
        being read from WAL archive (and is therefore not current).
        The default is 30 seconds. Units are milliseconds if not specified.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当热后备机处于活动状态时，这个参数决定取消那些与即将应用的 WAL 项冲突的后备机查询之前，后备服务器应该等待多久，如<xref linkend="hot-standby-conflict">中所述。当 WAL 数据被从 WAL 归档（并且因此不是当前的 WAL）时，<varname>max_standby_archive_delay</>可以应用。默认值是 30 秒。如果没有指定，衡量单位是毫秒。值 -1 允许后备机一直等到冲突查询结束。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        Note that <varname>max_standby_archive_delay</> is not the same as the
        maximum length of time a query can run before cancellation; rather it
        is the maximum total time allowed to apply any one WAL segment's data.
        Thus, if one query has resulted in significant delay earlier in the
        WAL segment, subsequent conflicting queries will have much less grace
        time.
       </para>
____________________________________________________________________________-->
       <para>
        注意，<varname>max_standby_archive_delay</>与取消之前一个查询能够运行的最长时间不同；它表示应用任何一个 WAL 段数据能够被允许的最长总时间。因此，如果一个查询早于 WAL 段导致了显著的延迟，后续冲突查询将只有更少的时间。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-standby-streaming-delay" xreflabel="max_standby_streaming_delay">
<!--==========================orignal english content==========================
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_streaming_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_standby_streaming_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_standby_streaming_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When Hot Standby is active, this parameter determines how long the
        standby server should wait before canceling standby queries that
        conflict with about-to-be-applied WAL entries, as described in
        <xref linkend="hot-standby-conflict">.
        <varname>max_standby_streaming_delay</> applies when WAL data is
        being received via streaming replication.
        The default is 30 seconds. Units are milliseconds if not specified.
        A value of -1 allows the standby to wait forever for conflicting
        queries to complete.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当热后备机处于活动状态时，这个参数决定取消那些与即将应用的 WAL 项冲突的后备机查询之前，后备服务器应该等待多久，如<xref linkend="hot-standby-conflict">中所述。当 WAL 数据正在通过流复制被接收时，<varname>max_standby_streaming_delay</>可以应用。默认值是 30 秒。如果没有指定，衡量单位是毫秒。值 -1 允许后备机一直等到冲突查询结束。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        Note that <varname>max_standby_streaming_delay</> is not the same as
        the maximum length of time a query can run before cancellation; rather
        it is the maximum total time allowed to apply WAL data once it has
        been received from the primary server.  Thus, if one query has
        resulted in significant delay, subsequent conflicting queries will
        have much less grace time until the standby server has caught up
        again.
       </para>
____________________________________________________________________________-->
       <para>
        注意，<varname>max_standby_streaming_delay</>与取消之前一个查询能够运行的最长时间不同；它表示在从主服务器接收到 WAL 数据并立刻应用它能够被允许的最长总时间。因此，如果一个查询导致了显著的延迟，后续冲突查询将只有更少的时间，直到后备服务器再次赶上进度。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-status-interval" xreflabel="wal_receiver_status_interval">
<!--==========================orignal english content==========================
      <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_status_interval</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_receiver_status_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_status_interval</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
      <para>
       Specifies the minimum frequency for the WAL receiver
       process on the standby to send information about replication progress
       to the primary or upstream standby, where it can be seen using the
       <link linkend="monitoring-stats-views-table">
       <literal>pg_stat_replication</></link> view.  The standby will report
       the last transaction log position it has written, the last position it
       has flushed to disk, and the last position it has applied.
       This parameter's
       value is the maximum interval, in seconds, between reports.  Updates are
       sent each time the write or flush positions change, or at least as
       often as specified by this parameter.  Thus, the apply position may
       lag slightly behind the true position.  Setting this parameter to zero
       disables status updates completely.  This parameter can only be set in
       the <filename>postgresql.conf</> file or on the server command line.
       The default value is 10 seconds.
      </para>
____________________________________________________________________________-->
      <para>
       指定在后备机上的 WAL 接收者进程向主服务器或上游后备机发送有关复制进度的信息的最小频度，它可以使用<link linkend="monitoring-stats-views-table"><literal>pg_stat_replication</></link>视图看到。后备机将报告它已经写入的上一个事务日志位置、它已经刷到磁盘的上一个位置以及它已经应用的最后一个位置。这个参数的值是报告之间的最大间隔，以秒计。每次写入或刷出位置改变时会发送状态更新，或者至少按这个参数的指定的频度发送。因此，应用位置可能比真实位置略微滞后。将这个参数设置为零将完全禁用状态更新。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是 10 秒。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-hot-standby-feedback" xreflabel="hot_standby_feedback">
<!--==========================orignal english content==========================
      <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby_feedback</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>hot_standby_feedback</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>hot_standby_feedback</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies whether or not a hot standby will send feedback to the primary
        or upstream standby
        about queries currently executing on the standby. This parameter can
        be used to eliminate query cancels caused by cleanup records, but
        can cause database bloat on the primary for some workloads.
        Feedback messages will not be sent more frequently than once per
        <varname>wal_receiver_status_interval</>. The default value is
        <literal>off</literal>. This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        指定一个热后备机是否将会向主服务器或上游后备机发送有关于后备机上当前正被执行的查询的反馈。这个参数可以被用来排除由于记录清除导致的查询取消，但是可能导致在主服务器上用于某些负载的数据库膨胀。反馈消息的发送频度不会高于每个<varname>wal_receiver_status_interval</>周期发送一次。默认值是<literal>off</literal>。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        If cascaded replication is in use the feedback is passed upstream
        until it eventually reaches the primary.  Standbys make no other use
        of feedback they receive other than to pass upstream.
       </para>
____________________________________________________________________________-->
       <para>
        如果使用级联复制，反馈将被向上游传递直到它最后到达主服务器。后备机在接收到反馈之后除了传递给上游不会做任何其他操作。
       </para>
<!--==========================orignal english content==========================
       <para>
        This setting does not override the behavior of
        <varname>old_snapshot_threshold</> on the primary; a snapshot on the
        standby which exceeds the primary's age threshold can become invalid,
        resulting in cancellation of transactions on the standby.  This is
        because <varname>old_snapshot_threshold</> is intended to provide an
        absolute limit on the time which dead rows can contribute to bloat,
        which would otherwise be violated because of the configuration of a
        standby.
       </para>
____________________________________________________________________________-->
       <para>
        这个设置不会覆盖主服务器上的<varname>old_snapshot_threshold</>的行为，
        后备服务器上一个超过了主服务器年龄阈值的快照可能会变得不可用，
        导致后备服务器上事务的取消。这是因为<varname>old_snapshot_threshold</>
        是为了对死亡行能够存在的时间给出一个绝对限制，
        不然就会因为一个后备服务器的配置而被违背。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-receiver-timeout" xreflabel="wal_receiver_timeout">
<!--==========================orignal english content==========================
      <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_receiver_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_receiver_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Terminate replication connections that are inactive longer
        than the specified number of milliseconds. This is useful for
        the receiving standby server to detect a primary node crash or network
        outage.
        A value of zero disables the timeout mechanism.  This parameter
        can only be set in
        the <filename>postgresql.conf</> file or on the server command line.
        The default value is 60 seconds.
       </para>
____________________________________________________________________________-->
       <para>
        中止处于非活动状态超过指定毫秒数的复制链接。这对于正在接收的后备服务器检测主服务器崩溃或网络断开有用。值零会禁用超时机制。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是 60 秒。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-wal-retrieve-retry-interval" xreflabel="wal_retrieve_retry_interval">
<!--==========================orignal english content==========================
      <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_retrieve_retry_interval</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_retrieve_retry_interval</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>  
<!--==========================orignal english content==========================
       <para>
        Specify how long the standby server should wait when WAL data is not
        available from any sources (streaming replication,
        local <filename>pg_xlog</> or WAL archive) before retrying to
        retrieve WAL data.  This parameter can only be set in the
        <filename>postgresql.conf</> file or on the server command line.
        The default value is 5 seconds. Units are milliseconds if not specified.
       </para>
____________________________________________________________________________-->
       <para>
        指定等待服务器应等待多长时间时，
        当重试检索WAL数据之前来自任何源
        （流复制，本地<filename>pg_xlog</>或者WAL归档）的WAL数据不可用。
        此参数只能在<filename>postgresql.conf</>文件或服务器命令行设置。
        缺省值是5秒。如果没有指定，单位是毫秒。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is useful in configurations where a node in recovery
        needs to control the amount of time to wait for new WAL data to be
        available. For example, in archive recovery, it is possible to
        make the recovery more responsive in the detection of a new WAL
        log file by reducing the value of this parameter. On a system with
        low WAL activity, increasing it reduces the amount of requests necessary
        to access WAL archives, something useful for example in cloud
        environments where the amount of times an infrastructure is accessed
        is taken into account.
       </para>
____________________________________________________________________________-->
       <para>
        此参数有助于配置恢复节点控制等待新的WAL数据可用的时间数。
        例如，在归档恢复中，通过减少此参数的值检测一个新的WAL日志文件中使得恢复更加敏感，
        这种做法是有可能的。在一个低WAL活动系统中，增加它减少了必要的访问WAL归档的需求量，
        一些有用例子在云环境中访问基础设施的时间量要考虑在内。
       </para>
      </listitem>
     </varlistentry> 
     
     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-query">
<!--==========================orignal english content==========================
    <title>Query Planning</title>
____________________________________________________________________________-->
    <title>查询规划</title>

    <sect2 id="runtime-config-query-enable">
<!--==========================orignal english content==========================
     <title>Planner Method Configuration</title>
____________________________________________________________________________-->
     <title>规划器方法配制</title>

<!--==========================orignal english content==========================
      <para>
       These configuration parameters provide a crude method of
       influencing the query plans chosen by the query optimizer. If
       the default plan chosen by the optimizer for a particular query
       is not optimal, a <emphasis>temporary</> solution is to use one
       of these configuration parameters to force the optimizer to
       choose a different plan.
       Better ways to improve the quality of the
       plans chosen by the optimizer include adjusting the planer cost
       constants (see <xref linkend="runtime-config-query-constants">),
       running <xref linkend="sql-analyze"> manually, increasing
       the value of the <xref
       linkend="guc-default-statistics-target"> configuration parameter,
       and increasing the amount of statistics collected for
       specific columns using <command>ALTER TABLE SET
       STATISTICS</command>.
      </para>
____________________________________________________________________________-->
      <para>
       这些配置参数影响查询优化器选择查询计划的暴力方法。如果优化器为一个特定查询选择的默认计划不是最优的，一种<emphasis>临时</>解决方案是使用这些配置参数之一来强制优化器选择一个不同的计划。提高优化器选择的计划质量的更好的方式包括调整规划器的代价常数（见<xref linkend="runtime-config-query-constants">）、手工运行<xref linkend="sql-analyze">、增加<xref  linkend="guc-default-statistics-target">配置参数的值以及使用<command>ALTER TABLE SET STATISTICS</command>增加为特定列收集的统计信息量。
      </para>

     <variablelist>
     <varlistentry id="guc-enable-bitmapscan" xreflabel="enable_bitmapscan">
<!--==========================orignal english content==========================
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_bitmapscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>bitmap scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_bitmapscan</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of bitmap-scan plan
        types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用位图扫描计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashagg" xreflabel="enable_hashagg">
<!--==========================orignal english content==========================
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashagg</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_hashagg</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashagg</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of hashed
        aggregation plan types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁用查询规划器使用哈希聚集计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-hashjoin" xreflabel="enable_hashjoin">
<!--==========================orignal english content==========================
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashjoin</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_hashjoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_hashjoin</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of hash-join plan
        types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用哈希连接计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexscan" xreflabel="enable_indexscan">
<!--==========================orignal english content==========================
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_indexscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>index scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_indexscan</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of index-scan plan
        types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用索引扫描计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-indexonlyscan" xreflabel="enable_indexonlyscan">
<!--==========================orignal english content==========================
      <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_indexonlyscan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_indexonlyscan</varname> (<type>boolean</type>)
      <indexterm>

       <primary><varname>enable_indexonlyscan</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of index-only-scan plan
        types (see <xref linkend="indexes-index-only-scans">).
        The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用只用索引扫描计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-material" xreflabel="enable_material">
<!--==========================orignal english content==========================
      <term><varname>enable_material</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_material</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_material</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_material</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of materialization.
        It is impossible to suppress materialization entirely,
        but turning this variable off prevents the planner from inserting
        materialize nodes except in cases where it is required for correctness.
        The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或者禁止查询规划器使用物化。它不可能完全禁用物化，但是关闭这个变量将阻止规划器插入物化节点，除非为了保证正确性。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-mergejoin" xreflabel="enable_mergejoin">
<!--==========================orignal english content==========================
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_mergejoin</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_mergejoin</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_mergejoin</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of merge-join plan
        types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用归并连接计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-nestloop" xreflabel="enable_nestloop">
<!--==========================orignal english content==========================
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_nestloop</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_nestloop</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_nestloop</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of nested-loop join
        plans. It is impossible to suppress nested-loop joins entirely,
        but turning this variable off discourages the planner from using
        one if there are other methods available. The default is
        <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用嵌套循环连接计划。它不可能完全禁止嵌套循环连接，但是关闭这个变量将使得规划器尽可能优先使用其他方法。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-seqscan" xreflabel="enable_seqscan">
<!--==========================orignal english content==========================
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_seqscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary>sequential scan</primary>
      </indexterm>
      <indexterm>
       <primary><varname>enable_seqscan</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of sequential scan
        plan types. It is impossible to suppress sequential scans
        entirely, but turning this variable off discourages the planner
        from using one if there are other methods available. The
        default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用顺序扫描计划类型。它不可能完全禁止顺序扫描，但是关闭这个变量将使得规划器尽可能优先使用其他方法。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-sort" xreflabel="enable_sort">
<!--==========================orignal english content==========================
      <term><varname>enable_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_sort</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_sort</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of explicit sort
        steps. It is impossible to suppress explicit sorts entirely,
        but turning this variable off discourages the planner from
        using one if there are other methods available. The default
        is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用显式排序步骤。它不可能完全禁止显式排序，但是关闭这个变量将使得规划器尽可能优先使用其他方法。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-enable-tidscan" xreflabel="enable_tidscan">
<!--==========================orignal english content==========================
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_tidscan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>enable_tidscan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>enable_tidscan</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables the query planner's use of <acronym>TID</>
        scan plan types. The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止查询规划器使用<acronym>TID</>扫描计划类型。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
     </sect2>
     <sect2 id="runtime-config-query-constants">
<!--==========================orignal english content==========================
     <title>Planner Cost Constants</title>
____________________________________________________________________________-->
     <title>规划器代价常量</title>

<!--==========================orignal english content==========================
    <para>
     The <firstterm>cost</> variables described in this section are measured
     on an arbitrary scale.  Only their relative values matter, hence
     scaling them all up or down by the same factor will result in no change
     in the planner's choices.  By default, these cost variables are based on
     the cost of sequential page fetches; that is,
     <varname>seq_page_cost</> is conventionally set to <literal>1.0</>
     and the other cost variables are set with reference to that.  But
     you can use a different scale if you prefer, such as actual execution
     times in milliseconds on a particular machine.
    </para>
____________________________________________________________________________-->
    <para>
     这一节中描述的<firstterm>代价</>变量可以按照任意尺度衡量。我们只关心它们的相对值，将它们以相同的因子缩放不会影响规划器的选择。默认情况下，这些代价变量是基于顺序页面获取的代价的，即<varname>seq_page_cost</>被设置为<literal>1.0</>并且其他代价变量都参考它来设置。不过你可以使用你喜欢的不同尺度，例如在一个特定机器上的真实执行时间。
    </para>

   <note>
<!--==========================orignal english content==========================
    <para>
     Unfortunately, there is no well-defined method for determining ideal
     values for the cost variables.  They are best treated as averages over
     the entire mix of queries that a particular installation will receive.  This
     means that changing them on the basis of just a few experiments is very
     risky.
    </para>
____________________________________________________________________________-->
    <para>
     不幸的是，没有一种良定义的方法来决定代价变量的理想值。它们最好被作为一个特定安装将接收到的查询的平均值来对待。这意味着基于少量的实验来改变它们是有风险的。
    </para>
   </note>

     <variablelist>

     <varlistentry id="guc-seq-page-cost" xreflabel="seq_page_cost">
<!--==========================orignal english content==========================
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>seq_page_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>seq_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>seq_page_cost</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of a disk page fetch
        that is part of a series of sequential fetches.  The default is 1.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace">).
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对一系列顺序磁盘页面获取中的一次的代价估计。默认值是 1.0。通过把表和索引放在一个特殊的表空间（要设置该表空间的同名参数）中可以覆盖这个值（见<xref linkend="sql-altertablespace">）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-random-page-cost" xreflabel="random_page_cost">
<!--==========================orignal english content==========================
      <term><varname>random_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>random_page_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>random_page_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>random_page_cost</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of a
        non-sequentially-fetched disk page.  The default is 4.0.
        This value can be overridden for tables and indexes in a particular
        tablespace by setting the tablespace parameter of the same name
        (see <xref linkend="sql-altertablespace">).
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对一次非顺序获取磁盘页面的代价估计。默认值是 4.0。通过把表和索引放在一个特殊的表空间（要设置该表空间的同名参数）中可以覆盖这个值（见<xref linkend="sql-altertablespace">）。
       </para>

<!--==========================orignal english content==========================
       <para>
        Reducing this value relative to <varname>seq_page_cost</>
        will cause the system to prefer index scans; raising it will
        make index scans look relatively more expensive.  You can raise
        or lower both values together to change the importance of disk I/O
        costs relative to CPU costs, which are described by the following
        parameters.
       </para>
____________________________________________________________________________-->
       <para>
        减少这个值（相对于<varname>seq_page_cost</>）将导致系统更倾向于索引扫描；提高它将让索引扫描看起来相对更昂贵。你可以一起提高或降低两个值来改变磁盘 I/O 代价相对于 CPU 代价的重要性，后者由下列参数描述。
       </para>

<!--==========================orignal english content==========================
       <para>
        Random access to mechanical disk storage is normally much more expensive
        than four times sequential access.  However, a lower default is used
        (4.0) because the majority of random accesses to disk, such as indexed
        reads, are assumed to be in cache.  The default value can be thought of
        as modeling random access as 40 times slower than sequential, while
        expecting 90% of random reads to be cached.
       </para>
____________________________________________________________________________-->
       <para>
        对磁盘存储的随机访问通常比顺序访问要贵不止四倍。但是，由于对磁盘的大部分随机访问（例如被索引的读取）都被假定在高速缓冲中进行，所以使用了一个较低的默认值（4.0）。默认值可以被想成把随机访问建模为比顺序访问慢 40 倍，而期望 90% 的随机读取会被缓存。
       </para>

<!--==========================orignal english content==========================
       <para>
        If you believe a 90% cache rate is an incorrect assumption
        for your workload, you can increase random_page_cost to better
        reflect the true cost of random storage reads. Correspondingly,
        if your data is likely to be completely in cache, such as when
        the database is smaller than the total server memory, decreasing
        random_page_cost can be appropriate.  Storage that has a low random
        read cost relative to sequential, e.g. solid-state drives, might
        also be better modeled with a lower value for random_page_cost.
       </para>
____________________________________________________________________________-->
       <para>
        如果你相信 90% 的缓冲率对你的负载是一个不正确的假设，你可以增加 random_page_cost 来更好的反映随机存储读取的真正代价。相应地，如果你的数据可以完全放在高速缓存中（例如当数据库小于服务器总内存时），降低 random_page_cost 可能是合适的。为具有很低的随机读取代价的存储（例如固态驱动器）采用较低的 random_page_cost 值可能更好。
       </para>

       <tip>
<!--==========================orignal english content==========================
        <para>
         Although the system will let you set <varname>random_page_cost</> to
         less than <varname>seq_page_cost</>, it is not physically sensible
         to do so.  However, setting them equal makes sense if the database
         is entirely cached in RAM, since in that case there is no penalty
         for touching pages out of sequence.  Also, in a heavily-cached
         database you should lower both values relative to the CPU parameters,
         since the cost of fetching a page already in RAM is much smaller
         than it would normally be.
        </para>
____________________________________________________________________________-->
        <para>
         尽管系统可以是你把<varname>random_page_cost</>设置得小于<varname>seq_page_cost</>，但是实际上没有意义。不过，如果数据库被整个缓存在 RAM 中，将它们设置为相等是有意义的，因为在那种情况中不按顺序访问页面是没有惩罚值的。同样，在一个高度缓存化的数据库中，你应该相对于 CPU 参数降低这两个值，因为获取一个已经在 RAM 中的页面的代价要远小于通常情况下的代价。
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-tuple-cost" xreflabel="cpu_tuple_cost">
<!--==========================orignal english content==========================
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>cpu_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_tuple_cost</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of processing
        each row during a query.
        The default is 0.01.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对一次查询中处理每一行的代价估计。默认值是 0.01。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-index-tuple-cost" xreflabel="cpu_index_tuple_cost">
<!--==========================orignal english content==========================
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>cpu_index_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_index_tuple_cost</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of processing
        each index entry during an index scan.
        The default is 0.005.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对一次索引扫描中处理每一个索引项的代价估计。默认值是 0.005。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cpu-operator-cost" xreflabel="cpu_operator_cost">
<!--==========================orignal english content==========================
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_operator_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>cpu_operator_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cpu_operator_cost</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of processing each
        operator or function executed during a query.
        The default is 0.0025.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对于一次查询中处理每个操作符或函数的代价估计。默认值是 0.0025。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-setup-cost" xreflabel="parallel_setup_cost">
<!--==========================orignal english content==========================
      <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_setup_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>parallel_setup_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_setup_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of launching parallel worker
        processes.
        The default is 1000.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对启动并行工作者进程的代价估计。默认是 1000。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-parallel-tuple-cost" xreflabel="parallel_tuple_cost">
<!--==========================orignal english content==========================
      <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>parallel_tuple_cost</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>parallel_tuple_cost</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the cost of transferring one tuple
        from a parallel worker process to another process.
        The default is 0.1.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对于从一个并行工作者进程传递一个元组给另一个进程的代价估计。
        默认是 0.1。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-min-parallel-relation-size" xreflabel="min_parallel_relation_size">
<!--==========================orignal english content==========================
      <term><varname>min_parallel_relation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_relation_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>min_parallel_relation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>min_parallel_relation_size</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the minimum size of relations to be considered for parallel scan.
        The default is 8 megabytes (<literal>8MB</>).
       </para>
____________________________________________________________________________-->
       <para>
        设置要考虑用于并行扫描的关系的最小尺寸。
        默认是 8 兆字节（<literal>8MB</>）。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry id="guc-effective-cache-size" xreflabel="effective_cache_size">
<!--==========================orignal english content==========================
      <term><varname>effective_cache_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>effective_cache_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>effective_cache_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>effective_cache_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's assumption about the effective size of the
        disk cache that is available to a single query.  This is
        factored into estimates of the cost of using an index; a
        higher value makes it more likely index scans will be used, a
        lower value makes it more likely sequential scans will be
        used. When setting this parameter you should consider both
        <productname>PostgreSQL</productname>'s shared buffers and the
        portion of the kernel's disk cache that will be used for
        <productname>PostgreSQL</productname> data files.  Also, take
        into account the expected number of concurrent queries on different
        tables, since they will have to share the available
        space.  This parameter has no effect on the size of shared
        memory allocated by <productname>PostgreSQL</productname>, nor
        does it reserve kernel disk cache; it is used only for estimation
        purposes.  The system also does not assume data remains in
        the disk cache between queries.  The default is 4 gigabytes
        (<literal>4GB</>).
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对一个单一查询可用的有效磁盘缓冲区尺寸的假设。这个参数会被考虑在使用一个索引的代价估计中，更高的数值会使得索引扫描更可能被使用，更低的数值会使得顺序扫描更可能被使用。在设置这个参数时，你还应该考虑<productname>PostgreSQL</productname>的共享缓冲区以及将被用于<productname>PostgreSQL</productname>数据文件的内核磁盘缓冲区。另外，还要考虑预计在不同表上的并发查询数目，因为它们必须共享可用的空间。这个参数对<productname>PostgreSQL</productname>分配的共享内存尺寸没有影响，它也不会保留内核磁盘缓冲，它只用于估计的目的。系统也不会假设在查询之间数据会保留在磁盘缓冲中。默认值是 4吉字节（<literal>4GB</>）。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
     <sect2 id="runtime-config-query-geqo">
<!--==========================orignal english content==========================
     <title>Genetic Query Optimizer</title>
____________________________________________________________________________-->
     <title>遗传查询优化</title>

<!--==========================orignal english content==========================
     <para>
      The genetic query optimizer (GEQO) is an algorithm that does query
      planning using heuristic searching.  This reduces planning time for
      complex queries (those joining many relations), at the cost of producing
      plans that are sometimes inferior to those found by the normal
      exhaustive-search algorithm.
      For more information see <xref linkend="geqo">.
     </para>
____________________________________________________________________________-->
     <para>
      遗传查询规划器（GEQO）是一种使用启发式搜索来进行查询规划的算法。它可以降低对于复杂查询（连接很多表的查询）的规划时间，但是代价是它产生的计划有时候要差于使用穷举搜索算法找到的计划。详见<xref linkend="geqo">。
     </para>

     <variablelist>

     <varlistentry id="guc-geqo" xreflabel="geqo">
<!--==========================orignal english content==========================
      <term><varname>geqo</varname> (<type>boolean</type>)
      <indexterm>
       <primary>genetic query optimization</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>genetic query optimization</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo</varname> (<type>boolean</type>)
      <indexterm>
       <primary>遗传查询优化</primary>
      </indexterm>
      <indexterm>
       <primary>GEQO</primary>
       <see>遗传查询优化</see>
      </indexterm>
      <indexterm>
       <primary><varname>geqo</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables or disables genetic query optimization.
        This is on by default.  It is usually best not to turn it off in
        production; the <varname>geqo_threshold</varname> variable provides
        more granular control of GEQO.
       </para>
____________________________________________________________________________-->
       <para>
        允许或禁止遗传查询优化。默认是启用。在生产环境中通常最好不要关闭它。<varname>geqo_threshold</varname>变量提供了对 GEQO 更细粒度的空值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-threshold" xreflabel="geqo_threshold">
<!--==========================orignal english content==========================
      <term><varname>geqo_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_threshold</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Use genetic query optimization to plan queries with at least
        this many <literal>FROM</> items involved. (Note that a
        <literal>FULL OUTER JOIN</> construct counts as only one <literal>FROM</>
        item.) The default is 12. For simpler queries it is usually best
        to use the regular, exhaustive-search planner, but for queries with
        many tables the exhaustive search takes too long, often
        longer than the penalty of executing a suboptimal plan.  Thus,
        a threshold on the size of the query is a convenient way to manage
        use of GEQO.
       </para>
____________________________________________________________________________-->
       <para>
        只有当涉及的<literal>FROM</>项数量至少有这么多个的时候，才使用遗传查询优化（注意一个<literal>FULL OUTER JOIN</>只被计为一个<literal>FROM</>项）。默认值是 12。对于更简单的查询，通常会使用普通的穷举搜索规划器，但是对于有很多表的查询穷举搜索会花很长时间，通常比执行一个次优的计划带来的惩罚值还要长。因此，在查询尺寸上的一个阈值是管理 GEQO 使用的一种方便的方法。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-effort" xreflabel="geqo_effort">
<!--==========================orignal english content==========================
      <term><varname>geqo_effort</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_effort</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_effort</varname>
      (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_effort</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the trade-off between planning time and query plan
        quality in GEQO. This variable must be an integer in the
        range from 1 to 10. The default value is five. Larger values
        increase the time spent doing query planning, but also
        increase the likelihood that an efficient query plan will be
        chosen.
       </para>
____________________________________________________________________________-->
       <para>
        控制 GEQO 中规划时间和查询计划质量之间的折中。这个变量必须是位于 1 到 10 之间的一个整数。默认值是 5。更大的值会增加花在查询规划上的时间，但是同时也增加了选择一个高效查询计划的可能性。
       </para>

<!--==========================orignal english content==========================
       <para>
        <varname>geqo_effort</varname> doesn't actually do anything
        directly; it is only used to compute the default values for
        the other variables that influence GEQO behavior (described
        below). If you prefer, you can set the other parameters by
        hand instead.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>geqo_effort</varname>实际并不直接做任何事情；它只是被用来计算其他影响 GEQO 行为的变量（如下所述）的默认值。如果你愿意，你可以手工设置其他参数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-pool-size" xreflabel="geqo_pool_size">
<!--==========================orignal english content==========================
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_pool_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_pool_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_pool_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the pool size used by GEQO, that is the
        number of individuals in the genetic population.  It must be
        at least two, and useful values are typically 100 to 1000.  If
        it is set to zero (the default setting) then a suitable
        value is chosen based on <varname>geqo_effort</varname> and
        the number of tables in the query.
       </para>
____________________________________________________________________________-->
       <para>
        控制 GEQO 使用的池尺寸，它就是遗传种群中的个体数目。它必须至少为 2，且有用的值通常在 100 到 1000 之间。如果它被设置为零（默认设置）则会基于<varname>geqo_effort</varname>和查询中表的数量选择一个合适的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-generations" xreflabel="geqo_generations">
<!--==========================orignal english content==========================
      <term><varname>geqo_generations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_generations</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_generations</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>geqo_generations</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the number of generations used by GEQO, that is
        the number of iterations of the algorithm.  It must
        be at least one, and useful values are in the same range as
        the pool size.  If it is set to zero (the default setting)
        then a suitable value is chosen based on
        <varname>geqo_pool_size</varname>.
       </para>
____________________________________________________________________________-->
       <para>
        控制 GEQO 使用的代数，也是算法的迭代次数。它必须至少为 1，并且有用值的范围和池尺寸相同。如果它被设置为零（默认设置）则会基于<varname>geqo_pool_size</varname>选择一个合适的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-selection-bias" xreflabel="geqo_selection_bias">
<!--==========================orignal english content==========================
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_selection_bias</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_selection_bias</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_selection_bias</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the selection bias used by GEQO. The selection bias
        is the selective pressure within the population. Values can be
        from 1.50 to 2.00; the latter is the default.
       </para>
____________________________________________________________________________-->
       <para>
        控制 GEQO 使用的选择偏好。选择偏好是种群中的选择压力。值可以是 1.5 到 2.0 之间，后者是默认值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-geqo-seed" xreflabel="geqo_seed">
<!--==========================orignal english content==========================
      <term><varname>geqo_seed</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_seed</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>geqo_seed</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>geqo_seed</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the initial value of the random number generator used
        by GEQO to select random paths through the join order search space.
        The value can range from zero (the default) to one.  Varying the
        value changes the set of join paths explored, and may result in a
        better or worse best path being found.
       </para>
____________________________________________________________________________-->
       <para>
        控制 GEQO 使用的随机数生成器的初始值，随机数生成器用于在连接顺序搜索空间中选择随机路径。该值可以从 0 （默认值）到 1。变化该值会改变被探索的连接路径集合，并且可能导致找到一个更好或更差的路径。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-query-other">
<!--==========================orignal english content==========================
     <title>Other Planner Options</title>
____________________________________________________________________________-->
     <title>其他规划器选项</title>

     <variablelist>

     <varlistentry id="guc-default-statistics-target" xreflabel="default_statistics_target">
<!--==========================orignal english content==========================
      <term><varname>default_statistics_target</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>default_statistics_target</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_statistics_target</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>default_statistics_target</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the default statistics target for table columns without
        a column-specific target set via <command>ALTER TABLE
        SET STATISTICS</>.  Larger values increase the time needed to
        do <command>ANALYZE</>, but might improve the quality of the
        planner's estimates. The default is 100. For more information
        on the use of statistics by the <productname>PostgreSQL</>
        query planner, refer to <xref linkend="planner-stats">.
       </para>
____________________________________________________________________________-->
       <para>
        为没有通过<command>ALTER TABLE SET STATISTICS</>设置列相关目标的表列设置默认统计目标。更大的值增加了需要做<command>ANALYZE</>的时间，但是可能会改善规划器的估计质量。默认值是 100。有关<productname>PostgreSQL</>查询规划器使用的统计信息的更多内容， 请参考<xref linkend="planner-stats">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-constraint-exclusion" xreflabel="constraint_exclusion">
<!--==========================orignal english content==========================
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>constraint_exclusion</varname> (<type>enum</type>)
      <indexterm>
       <primary>constraint exclusion</primary>
      </indexterm>
      <indexterm>
       <primary><varname>constraint_exclusion</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the query planner's use of table constraints to
        optimize queries.
        The allowed values of <varname>constraint_exclusion</> are
        <literal>on</> (examine constraints for all tables),
        <literal>off</> (never examine constraints), and
        <literal>partition</> (examine constraints only for inheritance child
        tables and <literal>UNION ALL</> subqueries).
        <literal>partition</> is the default setting.
        It is often used with inheritance and partitioned tables to
        improve performance.
      </para>
____________________________________________________________________________-->
       <para>
        <varname>constraint_exclusion</>的允许值是<literal>on</>（对所有表检查约束）、<literal>off</>（从不检查约束）和<literal>partition</>（只对继承的子表和<literal>UNION ALL</>子查询检查约束）。<literal>partition</>是默认设置。它通常被用于继承和分区表来提高性能。
      </para>

<!--==========================orignal english content==========================
       <para>
        When this parameter allows it for a particular table, the planner
        compares query conditions with the table's <literal>CHECK</>
        constraints, and omits scanning tables for which the conditions
        contradict the constraints.  For example:

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

        With constraint exclusion enabled, this <command>SELECT</>
        will not scan <structname>child1000</> at all, improving performance.
       </para>
____________________________________________________________________________-->
       <para>
        当对一个特定表允许这个参数，规划器比较查询条件和表的<literal>CHECK</>约束，并且忽略那些条件违反约束的表扫描。例如：

<programlisting>
CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;
</programlisting>

        在启用约束排除时，这个<command>SELECT</>将完全不会扫描<structname>child1000</>，从而提高性能。
       </para>

<!--==========================orignal english content==========================
       <para>
        Currently, constraint exclusion is enabled by default
        only for cases that are often used to implement table partitioning.
        Turning it on for all tables imposes extra planning overhead that is
        quite noticeable on simple queries, and most often will yield no
        benefit for simple queries.  If you have no partitioned tables
        you might prefer to turn it off entirely.
       </para>
____________________________________________________________________________-->
       <para>
        目前，约束排除只在用来实现表分区的情况中被默认启用。为所有表启用它会增加额外的规划开销，特别是在简单查询上并且不会产生任何好处。如果没有分区表时，最好是完全关闭它。
       </para>

<!--==========================orignal english content==========================
       <para>
        Refer to <xref linkend="ddl-partitioning-constraint-exclusion"> for
        more information on using constraint exclusion and partitioning.
       </para>
____________________________________________________________________________-->
       <para>
        更多关于使用约束排除和分区的信息请参阅<xref linkend="ddl-partitioning-constraint-exclusion">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-cursor-tuple-fraction" xreflabel="cursor_tuple_fraction">
<!--==========================orignal english content==========================
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cursor_tuple_fraction</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>cursor_tuple_fraction</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>cursor_tuple_fraction</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the planner's estimate of the fraction of a cursor's rows that
        will be retrieved.  The default is 0.1.  Smaller values of this
        setting bias the planner towards using <quote>fast start</> plans
        for cursors, which will retrieve the first few rows quickly while
        perhaps taking a long time to fetch all rows.  Larger values
        put more emphasis on the total estimated time.  At the maximum
        setting of 1.0, cursors are planned exactly like regular queries,
        considering only the total estimated time and not how soon the
        first rows might be delivered.
       </para>
____________________________________________________________________________-->
       <para>
        设置规划器对将被检索的一个游标的行的比例的估计。默认值是 0.1。更小的值使得规划器偏向为游标使用<quote>快速开始</>计划，它将很快地检索前几行但是可能需要很长时间来获取所有行。更大的值强调总的估计时间。最大设置为 1.0，游标将和普通查询完全一样地被规划，只考虑总估计时间并且不考虑前几行会被多快地返回。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-from-collapse-limit" xreflabel="from_collapse_limit">
<!--==========================orignal english content==========================
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>from_collapse_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>from_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>from_collapse_limit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The planner will merge sub-queries into upper queries if the
        resulting <literal>FROM</literal> list would have no more than
        this many items.  Smaller values reduce planning time but might
        yield inferior query plans.  The default is eight.
        For more information see <xref linkend="explicit-joins">.
       </para>
____________________________________________________________________________-->
       <para>
        如果生成的<literal>FROM</literal>列表不超过这么多项，规划器将把子查询融合到上层查询。较小的值可以减少规划时间，但是可能 会生成较差的查询计划。默认值是 8。详见<xref linkend="explicit-joins">。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting this value to <xref linkend="guc-geqo-threshold"> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo">.
       </para>
____________________________________________________________________________-->
       <para>
        将这个值设置为<xref linkend="guc-geqo-threshold">或更大，可能触发使用 GEQO 规划器，从而产生非最优计划。见<xref linkend="runtime-config-query-geqo">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-join-collapse-limit" xreflabel="join_collapse_limit">
<!--==========================orignal english content==========================
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>join_collapse_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>join_collapse_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>join_collapse_limit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The planner will rewrite explicit <literal>JOIN</>
        constructs (except <literal>FULL JOIN</>s) into lists of
        <literal>FROM</> items whenever a list of no more than this many items
        would result.  Smaller values reduce planning time but might
        yield inferior query plans.
       </para>
____________________________________________________________________________-->
       <para>
        如果得出的列表中不超过这么多项，那么规划器将把显式<literal>JOIN</>（除了<literal>FULL JOIN</>）结构重写到 <literal>FROM</>项列表中。较小的值可减少规划时间，但是可能会生成差些的查询计划。
       </para>

<!--==========================orignal english content==========================
       <para>
        By default, this variable is set the same as
        <varname>from_collapse_limit</varname>, which is appropriate
        for most uses. Setting it to 1 prevents any reordering of
        explicit <literal>JOIN</>s. Thus, the explicit join order
        specified in the query will be the actual order in which the
        relations are joined. Because the query planner does not always choose
        the optimal join order, advanced users can elect to
        temporarily set this variable to 1, and then specify the join
        order they desire explicitly.
        For more information see <xref linkend="explicit-joins">.
       </para>
____________________________________________________________________________-->
       <para>
        默认情况下，这个变量被设置成和<varname>from_collapse_limit</varname>相同， 这样适合大多数使用。把它设置为 1 可避免任何显式<literal>JOIN</>的重排序。因此查询中指定的显式连接顺序就是关系被连接的实际顺序。因为查询规划器并不是总能 选取最优的连接顺序，高级用户可以选择暂时把这个变量设置为 1，然后显式地指定他们想要的连接顺序。更多信息请见<xref linkend="explicit-joins">。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting this value to <xref linkend="guc-geqo-threshold"> or more
        may trigger use of the GEQO planner, resulting in non-optimal
        plans.  See <xref linkend="runtime-config-query-geqo">.
       </para>
____________________________________________________________________________-->
       <para>
        将这个值设置为<xref linkend="guc-geqo-threshold">或更大，可能触发使用 GEQO 规划器，从而产生非最优计划。见<xref linkend="runtime-config-query-geqo">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-force-parallel-mode" xreflabel="force_parallel_mode">
<!--==========================orignal english content==========================
      <term><varname>force_parallel_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>force_parallel_mode</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>force_parallel_mode</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>force_parallel_mode</> configuration parameter</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Allows the use of parallel queries for testing purposes even in cases
        where no performance benefit is expected.
        The allowed values of <varname>force_parallel_mode</> are
        <literal>off</> (use parallel mode only when it is expected to improve
        performance), <literal>on</> (force parallel query for all queries
        for which it is thought to be safe), and <literal>regress</> (like
        <literal>on</>, but with additional behavior changes as explained
        below).
       </para>
____________________________________________________________________________-->
       <para>
        允许为测试目的使用并行查询，即便是并不期望在性能上得到效益。
        <varname>force_parallel_mode</>的允许值是<literal>off</>
        （只在期望改进性能时才使用并行模式）、<literal>on</>
        （只要查询被认为是安全的，就强制使用并行查询）以及
        <literal>regress</>（和<literal>on</>相似，
        但是有如下文所解释的额外行为改变）。 
       </para>

<!--==========================orignal english content==========================
       <para>
        More specifically, setting this value to <literal>on</> will add
        a <literal>Gather</> node to the top of any query plan for which this
        appears to be safe, so that the query runs inside of a parallel worker.
        Even when a parallel worker is not available or cannot be used,
        operations such as starting a subtransaction that would be prohibited
        in a parallel query context will be prohibited unless the planner
        believes that this will cause the query to fail.  If failures or
        unexpected results occur when this option is set, some functions used
        by the query may need to be marked <literal>PARALLEL UNSAFE</literal>
        (or, possibly, <literal>PARALLEL RESTRICTED</literal>).
       </para>
____________________________________________________________________________-->
       <para>
        更具体地说，把这个值设置为<literal>on</>
        会在任何一个对于并行查询安全的查询计划顶端增加一个
        <literal>Gather</>节点，这样查询会在一个并行工作者中运行。
        即便当一个并行工作者不可用或者不能被使用时，
        诸如开始一个子事务等在并行查询环境中会被禁止的操作将会被禁止，
        除非规划器相信这样做会导致查询失败。
        当这个选项被设置时如果出现失败或者意料之外的结果，
        查询使用的某些函数可能需要被标记为<literal>PARALLEL UNSAFE</literal>
        （或者可能是<literal>PARALLEL RESTRICTED</literal>）。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting this value to <literal>regress</> has all of the same effects
        as setting it to <literal>on</> plus some additional effects that are
        intended to facilitate automated regression testing.  Normally,
        messages from a parallel worker include a context line indicating that,
        but a setting of <literal>regress</> suppresses this line so that the
        output is the same as in non-parallel execution.  Also,
        the <literal>Gather</> nodes added to plans by this setting are hidden
        in <literal>EXPLAIN</> output so that the output matches what
        would be obtained if this setting were turned <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        把这个值设置为<literal>regress</>具有设置成<literal>on</>
        所有相同的效果，外加一些有助于自动回归测试的额外的效果。一般来说，
        来自于一个并行工作者的消息会包括一个上下文行指出这一点，
        但是设置为<literal>regress</>会消除这一行，
        这样输出就和非并行执行完全一样。同样，被这个设置加到计划上的
        <literal>Gather</>节点在<literal>EXPLAIN</>输出终会被隐藏起来，
        这样产生的输出匹配设置为<literal>off</>时产生的输出。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-logging">
<!--==========================orignal english content==========================
    <title>Error Reporting and Logging</title>
____________________________________________________________________________-->
    <title>错误报告和日志</title>

<!--==========================orignal english content==========================
    <indexterm zone="runtime-config-logging">
     <primary>server log</primary>
    </indexterm>
____________________________________________________________________________-->
    <indexterm zone="runtime-config-logging">
     <primary>服务器日志</primary>
    </indexterm>

    <sect2 id="runtime-config-logging-where">
<!--==========================orignal english content==========================
     <title>Where To Log</title>
____________________________________________________________________________-->
     <title>在哪里做日志</title>

<!--==========================orignal english content==========================
     <indexterm zone="runtime-config-logging-where">
      <primary>where to log</primary>
     </indexterm>
____________________________________________________________________________-->
     <indexterm zone="runtime-config-logging-where">
      <primary>where to log</primary>
     </indexterm>

     <variablelist>

     <varlistentry id="guc-log-destination" xreflabel="log_destination">
<!--==========================orignal english content==========================
      <term><varname>log_destination</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_destination</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_destination</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_destination</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        <productname>PostgreSQL</productname> supports several methods
         for logging server messages, including
         <systemitem>stderr</systemitem>, <systemitem>csvlog</systemitem> and
         <systemitem>syslog</systemitem>. On Windows,
         <systemitem>eventlog</systemitem> is also supported. Set this
         parameter to a list of desired log destinations separated by
         commas. The default is to log to <systemitem>stderr</systemitem>
         only.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        <productname>PostgreSQL</productname>支持多种方法来记录服务器消息，包括<systemitem>stderr</systemitem>、<systemitem>csvlog</systemitem>和<systemitem>syslog</systemitem>。在 Windows 上还支持<systemitem>eventlog</systemitem>。设置这个参数为一个由想要的日志目的地的列表，之间用逗号分隔。默认值是只记录到<systemitem>stderr</systemitem>。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        If <systemitem>csvlog</> is included in <varname>log_destination</>,
        log entries are output in <quote>comma separated
        value</> (<acronym>CSV</>) format, which is convenient for
        loading logs into programs.
        See <xref linkend="runtime-config-logging-csvlog"> for details.
        <xref linkend="guc-logging-collector"> must be enabled to generate
        CSV-format log output.
       </para>
____________________________________________________________________________-->
       <para>
        如果<systemitem>csvlog</>被包括在<varname>log_destination</>中，日志项会以<quote>逗号分隔值</> （<acronym>CSV</>）格式被输出，这样可以很方便地把日志载入到程序中。详见<xref linkend="runtime-config-logging-csvlog">。要产生 CSV 格式的日志输出，必须启用<xref linkend="guc-logging-collector">。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         On most Unix systems, you will need to alter the configuration of
         your system's <application>syslog</application> daemon in order
         to make use of the <systemitem>syslog</systemitem> option for
         <varname>log_destination</>.  <productname>PostgreSQL</productname>
         can log to <application>syslog</application> facilities
         <literal>LOCAL0</> through <literal>LOCAL7</> (see <xref
         linkend="guc-syslog-facility">), but the default
         <application>syslog</application> configuration on most platforms
         will discard all such messages.  You will need to add something like:
<programlisting>
local0.*    /var/log/postgresql
</programlisting>
         to the  <application>syslog</application> daemon's configuration file
         to make it work.
        </para>
____________________________________________________________________________-->
        <para>
         在大多数 Unix 系统上，你将需要修改系统的<application>syslog</application>守护进程的配置来使用<varname>log_destination</>的<systemitem>syslog</systemitem>选项。<productname>PostgreSQL</productname>可以在<application>syslog</application>设备<literal>LOCAL0</>到<literal>LOCAL7</>中记录（见<xref linkend="guc-syslog-facility">），但是大部分平台上的默认<application>syslog</application>配置会丢弃所有这种消息。你将需要增加这样的内容：
<programlisting>
local0.*    /var/log/postgresql
</programlisting>
         到<application>syslog</application>守护进程的配置文件来让它工作。
        </para>
<!--==========================orignal english content==========================
        <para>
         On Windows, when you use the <literal>eventlog</literal>
         option for <varname>log_destination</>, you should
         register an event source and its library with the operating
         system so that the Windows Event Viewer can display event
         log messages cleanly.
         See <xref linkend="event-log-registration"> for details.
        </para>
____________________________________________________________________________-->
        <para>
         在 Windows 上，当你使用<varname>log_destination</>的<literal>eventlog</literal>选项时，你应该在操作系统中注册一个事件源及其库，这样 Windows 事件查看器能够清楚地显示事件日志消息。详见<xref linkend="event-log-registration">。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-logging-collector" xreflabel="logging_collector">
<!--==========================orignal english content==========================
      <term><varname>logging_collector</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>logging_collector</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>logging_collector</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>logging_collector</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         This parameter enables the <firstterm>logging collector</>, which
         is a background process that captures log messages
         sent to <systemitem>stderr</> and redirects them into log files.
         This approach is often more useful than
         logging to <application>syslog</>, since some types of messages
         might not appear in <application>syslog</> output.  (One common
         example is dynamic-linker failure messages; another is error messages
         produced by scripts such as <varname>archive_command</>.)
         This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
         这个参数启用<firstterm>日志收集器</>，它是一个捕捉被发送到<systemitem>stderr</>的日志消息的后台进程，并且它会将这些消息重定向到日志文件中。这种方法比记录到<application>syslog</>通常更有用，因为某些类型的消息不会在<application>syslog</>输出中出现（一个常见的例子是动态链接器错误消息；另一个例子是由<varname>archive_command</>等脚本产生的错误消息）。这个参数只能在服务器启动时设置。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         It is possible to log to <systemitem>stderr</> without using the
         logging collector; the log messages will just go to wherever the
         server's <systemitem>stderr</> is directed.  However, that method is
         only suitable for low log volumes, since it provides no convenient
         way to rotate log files.  Also, on some platforms not using the
         logging collector can result in lost or garbled log output, because
         multiple processes writing concurrently to the same log file can
         overwrite each other's output.
        </para>
____________________________________________________________________________-->
        <para>
         也可以不使用日志收集器而把日志记录到<systemitem>stderr</>，日志消息将只会去到服务器的<systemitem>stderr</>被定向到的位置。不过，那种方法只适合于低日志量，因为它没有提供方法来轮转日志文件。还有，在某些不使用日志收集器的平台上可能会导致丢失或者混淆日志输出，因为多个进程并发写入同一个日志文件时会覆盖彼此的输出。
        </para>
       </note>

       <note>
<!--==========================orignal english content==========================
        <para>
          The logging collector is designed to never lose messages.  This means
          that in case of extremely high load, server processes could be
          blocked while trying to send additional log messages when the
          collector has fallen behind.  In contrast, <application>syslog</>
          prefers to drop messages if it cannot write them, which means it
          may fail to log some messages in such cases but it will not block
          the rest of the system.
        </para>
____________________________________________________________________________-->
        <para>
          日志收集器被设计成从来不会丢失消息。这意味着在极高的负载下，如果服务器进程试图在收集器已经落后时发送更多的日志消息，那么它会被阻塞。相反，<application>syslog</>倾向于在无法写入消息时丢掉消息，这意味着在这样的情况下它可能会无法记录某些消息，但是它不会阻塞系统的其他部分。
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-directory" xreflabel="log_directory">
<!--==========================orignal english content==========================
      <term><varname>log_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_directory</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_directory</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>logging_collector</> is enabled,
        this parameter determines the directory in which log files will be created.
        It can be specified as an absolute path, or relative to the
        cluster data directory.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
        The default is <literal>pg_log</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>logging_collector</>被启用时，这个参数决定日志文件将被在哪个目录下创建。它可以被指定为一个绝对路径，也可以被指定为一个相对于集簇数据目录的相对路径。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
        默认是<literal>pg_log</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-filename" xreflabel="log_filename">
<!--==========================orignal english content==========================
      <term><varname>log_filename</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_filename</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_filename</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_filename</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter sets the file names of the created log files.  The value
        is treated as a <function>strftime</function> pattern,
        so <literal>%</literal>-escapes can be used to specify time-varying
        file names.  (Note that if there are
        any time-zone-dependent <literal>%</literal>-escapes, the computation
        is done in the zone specified
        by <xref linkend="guc-log-timezone">.)
        The supported <literal>%</literal>-escapes are similar to those
        listed in the Open Group's <ulink
        url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime
        </ulink> specification.
        Note that the system's <function>strftime</function> is not used
        directly, so platform-specific (nonstandard) extensions do not work.
        The default is <literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>logging_collector</varname>被启用时，这个参数设置被创建的日志文件的文件名。该值被视为一种<function>strftime</function>模式，因此<literal>%</literal>转义可以被用来指定根据时间变化的文件名（注意如果有任何时区独立的<literal>%</literal>转义，计算将在由<xref linkend="guc-log-timezone">指定的时区中完成）。被支持的<literal>%</literal>转义和开放组织的<ulink url="http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html">strftime</ulink>说明中列举的类似。
        注意系统的<function>strftime</function>不会被直接使用，因此平台相关（非标准）的扩展无法工作。
        默认是<literal>postgresql-%Y-%m-%d_%H%M%S.log</literal>。
       </para>
<!--==========================orignal english content==========================
       <para>
        If you specify a file name without escapes, you should plan to
        use a log rotation utility to avoid eventually filling the
        entire disk.  In releases prior to 8.4, if
        no <literal>%</literal> escapes were
        present, <productname>PostgreSQL</productname> would append
        the epoch of the new log file's creation time, but this is no
        longer the case.
       </para>
____________________________________________________________________________-->
       <para>
        如果你不使用转义来指定一个文件名，你应该计划使用一个日志轮转工具来避免最终填满整个磁盘。在 8.4 发行之前，如果不存在<literal>%</literal>转义，<productname>PostgreSQL</productname>将追加新日志文件创建时间的纪元，但是现在已经不再这样做了。
       </para>
<!--==========================orignal english content==========================
       <para>
        If CSV-format output is enabled in <varname>log_destination</>,
        <literal>.csv</> will be appended to the timestamped
        log file name to create the file name for CSV-format output.
        (If <varname>log_filename</> ends in <literal>.log</>, the suffix is
        replaced instead.)
       </para>
____________________________________________________________________________-->
       <para>
        如果在<varname>log_destination</>中启用了 CSV 格式输出，<literal>.csv</>将会被追加到时间戳日志文件名中来创建 CSV 格式输出（如果<varname>log_filename</>以<literal>.log</>结尾，该后缀会被替换）。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-file-mode" xreflabel="log_file_mode">
<!--==========================orignal english content==========================
      <term><varname>log_file_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_file_mode</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_file_mode</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_file_mode</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        On Unix systems this parameter sets the permissions for log files
        when <varname>logging_collector</varname> is enabled. (On Microsoft
        Windows this parameter is ignored.)
        The parameter value is expected to be a numeric mode
        specified in the format accepted by the
        <function>chmod</function> and <function>umask</function>
        system calls.  (To use the customary octal format the number
        must start with a <literal>0</literal> (zero).)
       </para>
____________________________________________________________________________-->
       <para>
        在 Unix 系统上，当<varname>logging_collector</varname>被启用时，这个参数设置日志文件的权限（在微软 Windows 上这个参数将被忽略）。这个参数值应当是一个数字形式的模式，它可以被<function>chmod</function>和<function>umask</function>系统调用接受（要使用通常的十进制格式，该数字必须以一个<literal>0</literal>（零）开始）。
       </para>
<!--==========================orignal english content==========================
       <para>
        The default permissions are <literal>0600</>, meaning only the
        server owner can read or write the log files.  The other commonly
        useful setting is <literal>0640</>, allowing members of the owner's
        group to read the files.  Note however that to make use of such a
        setting, you'll need to alter <xref linkend="guc-log-directory"> to
        store the files somewhere outside the cluster data directory.  In
        any case, it's unwise to make the log files world-readable, since
        they might contain sensitive data.
       </para>
____________________________________________________________________________-->
       <para>
        默认的权限是<literal>0600</>，表示只有服务器拥有者才能读取或写入日志文件。其他常用的设置是<literal>0640</>，它允许拥有者的组成员读取文件。不过要注意你需要修改<xref linkend="guc-log-directory">为将文件存储在集簇数据目录之外的某个位置，才能利用这个设置。在任何情况下，让日志文件变成任何人都可读是不明智的，因为日志文件中可能包含敏感数据。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-age" xreflabel="log_rotation_age">
<!--==========================orignal english content==========================
      <term><varname>log_rotation_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_rotation_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum lifetime of an individual log file.
        After this many minutes have elapsed, a new log file will
        be created.  Set to zero to disable time-based creation of
        new log files.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>logging_collector</varname>被启用时，这个参数决定一个个体日志文件的最长生命期。当这些分钟过去后，一个新的日志文件将被创建。将这个参数设置为零将禁用基于时间的新日志文件创建。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-rotation-size" xreflabel="log_rotation_size">
<!--==========================orignal english content==========================
      <term><varname>log_rotation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_rotation_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_rotation_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter determines the maximum size of an individual log file.
        After this many kilobytes have been emitted into a log file,
        a new log file will be created.  Set to zero to disable size-based
        creation of new log files.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>logging_collector</varname>被启用时，这个参数决定一个个体日志文件的最大尺寸。当这么多千字节被发送到一个日志文件后，将创建一个新的日志文件。将这个参数设置为零将禁用基于尺寸的新日志文件创建。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-truncate-on-rotation" xreflabel="log_truncate_on_rotation">
<!--==========================orignal english content==========================
      <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_truncate_on_rotation</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_truncate_on_rotation</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_truncate_on_rotation</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When <varname>logging_collector</varname> is enabled,
        this parameter will cause <productname>PostgreSQL</productname> to truncate (overwrite),
        rather than append to, any existing log file of the same name.
        However, truncation will occur only when a new file is being opened
        due to time-based rotation, not during server startup or size-based
        rotation.  When off, pre-existing files will be appended to in
        all cases.  For example, using this setting in combination with
        a <varname>log_filename</varname> like <literal>postgresql-%H.log</literal>
        would result in generating twenty-four hourly log files and then
        cyclically overwriting them.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>logging_collector</varname>被启用时，这个参数将导致<productname>PostgreSQL</productname>截断（覆盖而不是追加）任何已有的同名日志文件。不过，截断只在一个新文件由于基于时间的轮转被打开时发生，在服务器启动或基于尺寸的轮转时不会发生。如果被关闭，在所有情况下以前存在的文件将被追加。例如，使用这个设置和一个类似<literal>postgresql-%H.log</literal>的<varname>log_filename</varname>将导致产生 24 个每小时的日志文件，并且循环地覆盖它们。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        Example:  To keep 7 days of logs, one log file per day named
        <literal>server_log.Mon</literal>, <literal>server_log.Tue</literal>,
        etc, and automatically overwrite last week's log with this week's log,
        set <varname>log_filename</varname> to <literal>server_log.%a</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>, and
        <varname>log_rotation_age</varname> to <literal>1440</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        例子：要保留 7 天的日志，每天的一个日志文件被命令为<literal>server_log.Mon</literal>、<literal>server_log.Tue</literal>等等，并且自动用本周的日志覆盖上一周的日志。可以这样做：将<varname>log_filename</varname>设置为<literal>server_log.%a</literal>、将<varname>log_truncate_on_rotation</varname>设置为<literal>on</literal>并且将<varname>log_rotation_age</varname>设置为<literal>1440</literal>。
       </para>
<!--==========================orignal english content==========================
       <para>
        Example: To keep 24 hours of logs, one log file per hour, but
        also rotate sooner if the log file size exceeds 1GB, set
        <varname>log_filename</varname> to <literal>server_log.%H%M</literal>,
        <varname>log_truncate_on_rotation</varname> to <literal>on</literal>,
        <varname>log_rotation_age</varname> to <literal>60</literal>, and
        <varname>log_rotation_size</varname> to <literal>1000000</literal>.
        Including <literal>%M</> in <varname>log_filename</varname> allows
        any size-driven rotations that might occur to select a file name
        different from the hour's initial file name.
       </para>
____________________________________________________________________________-->
       <para>
        例子：要保留 24 小时的日志，每个小时一个日志文件，但是在日志文件尺寸超过 1GB 时轮转。可以这样做：将<varname>log_filename</varname>设置为<literal>server_log.%H%M</literal>、
        将<varname>log_truncate_on_rotation</varname>设置为<literal>on</literal>、
        将<varname>log_rotation_age</varname>设置为<literal>60</literal>并且
        将<varname>log_rotation_size</varname>设置为<literal>1000000</literal>。
        Including <literal>%M</> in 在<varname>log_filename</varname>中包括<literal>%M</>允许发生任何尺寸驱动的轮转来选择一个不同于每个小时的初始文件名的新文件名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-facility" xreflabel="syslog_facility">
<!--==========================orignal english content==========================
      <term><varname>syslog_facility</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>syslog_facility</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>syslog_facility</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>syslog_facility</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When logging to <application>syslog</> is enabled, this parameter
        determines the <application>syslog</application>
        <quote>facility</quote> to be used.  You can choose
        from <literal>LOCAL0</>, <literal>LOCAL1</>,
        <literal>LOCAL2</>, <literal>LOCAL3</>, <literal>LOCAL4</>,
        <literal>LOCAL5</>, <literal>LOCAL6</>, <literal>LOCAL7</>;
        the default is <literal>LOCAL0</>. See also the
        documentation of your system's
        <application>syslog</application> daemon.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当启用了向<application>syslog</>记录时，这个参数决定要使用的<application>syslog</application><quote>设备</quote>。你可以在<literal>LOCAL0</>、<literal>LOCAL1</>、<literal>LOCAL2</>、<literal>LOCAL3</>、<literal>LOCAL4</>、
        <literal>LOCAL5</>、<literal>LOCAL6</>、<literal>LOCAL7</>中选择，默认值是<literal>LOCAL0</>。还请参阅系统的<application>syslog</application>守护进程的文档。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-ident" xreflabel="syslog_ident">
<!--==========================orignal english content==========================
      <term><varname>syslog_ident</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>syslog_ident</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>syslog_ident</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>syslog_ident</>配置参数</primary>
      </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         When logging to <application>syslog</> is enabled, this parameter
         determines the program name used to identify
         <productname>PostgreSQL</productname> messages in
         <application>syslog</application> logs. The default is
         <literal>postgres</literal>.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         当启用了向<application>syslog</>记录时，这个参数决定用来标识<application>syslog</application>中的<productname>PostgreSQL</productname>消息的程序名。默认值是<literal>postgres</literal>。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry id="guc-syslog-sequence-numbers" xreflabel="syslog_sequence_numbers">
<!--==========================orignal english content==========================
       <term><varname>syslog_sequence_numbers</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>syslog_sequence_numbers</> configuration parameter</primary>
        </indexterm>
       </term>
____________________________________________________________________________-->
       <term><varname>syslog_sequence_numbers</varname> (<type>boolean</type>)
        <indexterm>
         <primary><varname>syslog_sequence_numbers</>配置参数</primary>
        </indexterm>
       </term>

       <listitem>
<!--==========================orignal english content==========================
        <para>
         When logging to <application>syslog</application> and this is on (the
         default), then each message will be prefixed by an increasing
         sequence number (such as <literal>[2]</literal>).  This circumvents
         the <quote>-&minus;- last message repeated N times -&minus;-</quote> suppression
         that many syslog implementations perform by default.  In more modern
         syslog implementations, repeated message suppression can be configured
         (for example, <literal>$RepeatedMsgReduction</literal>
         in <productname>rsyslog</productname>), so this might not be
         necessary.  Also, you could turn this off if you actually want to
         suppress repeated messages.
        </para>
____________________________________________________________________________-->
        <para>
         当日志被记录到<application>syslog</application>并且这个设置为 on 
         （默认）时，每一个消息会被加上一个增长的序号作为前缀（例如
         <literal>[2]</literal>）。这种行为避开了很多 syslog 实现默认采用的
         <quote>--- 上一个消息重复 N 次 ---</quote>形式。在现代 syslog 实现中，
         抑制重复消息是可以配置的（例如<productname>rsyslog</productname>
         中的<literal>$RepeatedMsgReduction</literal>），因此这个参数可能不是必需的。
         此外，如果你真的想抑制重复消息，你可以把这个参数设置为 off。 
        </para>

<!--==========================orignal english content==========================
        <para>
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line.
        </para>
____________________________________________________________________________-->
        <para>
         这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
        </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-syslog-split-messages" xreflabel="syslog_split_messages">
<!--==========================orignal english content==========================
      <term><varname>syslog_split_messages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>syslog_split_messages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>syslog_split_messages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>syslog_split_messages</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When logging to <application>syslog</> is enabled, this parameter
        determines how messages are delivered to syslog.  When on (the
        default), messages are split by lines, and long lines are split so
        that they will fit into 1024 bytes, which is a typical size limit for
        traditional syslog implementations.  When off, PostgreSQL server log
        messages are delivered to the syslog service as is, and it is up to
        the syslog service to cope with the potentially bulky messages.
       </para>
____________________________________________________________________________-->
       <para>
        当启用把日志记录到<application>syslog</>时，这个参数决定消息如何送达
        syslog。当设置为 on（默认）时，消息会被分成行，
        并且长的行也会被划分以便能够放到 1024 字节中，
        这是传统 syslog 实现一种典型的尺寸限制。当设置为 off 时，
        PostgreSQL 服务器日志消息会被原样送达 syslog 服务，
        而处理可能的大体量消息的任务由 syslog 服务负责。
       </para>

<!--==========================orignal english content==========================
       <para>
        If syslog is ultimately logging to a text file, then the effect will
        be the same either way, and it is best to leave the setting on, since
        most syslog implementations either cannot handle large messages or
        would need to be specially configured to handle them.  But if syslog
        is ultimately writing into some other medium, it might be necessary or
        more useful to keep messages logically together.
       </para>
____________________________________________________________________________-->
       <para>
        如果 syslog 最终被记录到一个文本文件中，那么两种设置的效果是一样的，
        但最好设置为 on，因为大部分 syslog 实现要么不能处理大型消息，
        要么需要做特殊的配置以处理大型消息。但是如果 syslog 
        最终写入到某种其他媒介，有必要让消息保持逻辑上的整体性（也更加有用）。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-event-source" xreflabel="event_source">
<!--==========================orignal english content==========================
      <term><varname>event_source</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>event_source</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>event_source</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>event_source</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When logging to <application>event log</> is enabled, this parameter
        determines the program name used to identify
        <productname>PostgreSQL</productname> messages in
        the log. The default is <literal>PostgreSQL</literal>.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        当启用了向<application>事件日志</>记录时，这个参数决定用来标识日志中<productname>PostgreSQL</productname>消息的程序名。默认值是<literal>PostgreSQL</literal>。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

      </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-when">
<!--==========================orignal english content==========================
     <title>When To Log</title>
____________________________________________________________________________-->
     <title>什么时候记录日志</title>

     <variablelist>

     <varlistentry id="guc-client-min-messages" xreflabel="client_min_messages">
<!--==========================orignal english content==========================
      <term><varname>client_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>client_min_messages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>client_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>client_min_messages</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls which message levels are sent to the client.
        Valid values are <literal>DEBUG5</>,
        <literal>DEBUG4</>, <literal>DEBUG3</>, <literal>DEBUG2</>,
        <literal>DEBUG1</>, <literal>LOG</>, <literal>NOTICE</>,
        <literal>WARNING</>, <literal>ERROR</>, <literal>FATAL</>,
        and <literal>PANIC</>.  Each level
        includes all the levels that follow it.  The later the level,
        the fewer messages are sent.  The default is
        <literal>NOTICE</>.  Note that <literal>LOG</> has a different
        rank here than in <varname>log_min_messages</>.
       </para>
____________________________________________________________________________-->
       <para>
        控制被发送给客户端的消息级别。有效值是<literal>DEBUG5</>、
        <literal>DEBUG4</>、<literal>DEBUG3</>、<literal>DEBUG2</>、
        <literal>DEBUG1</>、<literal>LOG</>、<literal>NOTICE</>、
        <literal>WARNING</>、<literal>ERROR</>、<literal>FATAL</>和<literal>PANIC</>。每个级别都包括其后的所有级别。级别越靠后，被发送的消息越少。默认值是<literal>NOTICE</>。注意<literal>LOG</>在这里有与<varname>log_min_messages</>中不同的排名。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-messages" xreflabel="log_min_messages">
<!--==========================orignal english content==========================
      <term><varname>log_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_messages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_min_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_messages</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls which message levels are written to the server log.
        Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>,
        <literal>INFO</>, <literal>NOTICE</>, <literal>WARNING</>,
        <literal>ERROR</>, <literal>LOG</>, <literal>FATAL</>, and
        <literal>PANIC</>.  Each level includes all the levels that
        follow it.  The later the level, the fewer messages are sent
        to the log.  The default is <literal>WARNING</>.  Note that
        <literal>LOG</> has a different rank here than in
        <varname>client_min_messages</>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        控制哪些消息级别被写入到服务器日志。有效值是<literal>DEBUG5</>、<literal>DEBUG4</>、
        <literal>DEBUG3</>、<literal>DEBUG2</>、<literal>DEBUG1</>、
        <literal>INFO</>、<literal>NOTICE</>、<literal>WARNING</>、
        <literal>ERROR</>、<literal>LOG</>、<literal>FATAL</>和
        <literal>PANIC</>。每个级别都包括以后的所有级别。级别越靠后，被发送的消息越少。默认值是<literal>WARNING</>。注意<literal>LOG</>在这里有与<varname>log_min_messages</>中不同的排名。只有超级用户可以改变这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-error-statement" xreflabel="log_min_error_statement">
<!--==========================orignal english content==========================
      <term><varname>log_min_error_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_error_statement</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_min_error_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_min_error_statement</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls which SQL statements that cause an error
        condition are recorded in the server log.  The current
        SQL statement is included in the log entry for any message of
        the specified severity or higher.
        Valid values are <literal>DEBUG5</literal>,
        <literal>DEBUG4</literal>, <literal>DEBUG3</literal>,
        <literal>DEBUG2</literal>, <literal>DEBUG1</literal>,
        <literal>INFO</literal>, <literal>NOTICE</literal>,
        <literal>WARNING</literal>, <literal>ERROR</literal>,
        <literal>LOG</literal>,
        <literal>FATAL</literal>, and <literal>PANIC</literal>.
        The default is <literal>ERROR</literal>, which means statements
        causing errors, log messages, fatal errors, or panics will be logged.
        To effectively turn off logging of failing statements,
        set this parameter to <literal>PANIC</literal>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        控制哪些导致一个错误情况的 SQL 语句被记录在服务器日志中。任何指定严重级别或更高级别的消息的当前 SQL 语句将被包括在日志项中。有效值是<literal>DEBUG5</literal>、
        <literal>DEBUG4</literal>、<literal>DEBUG3</literal>、
        <literal>DEBUG2</literal>、<literal>DEBUG1</literal>、
        <literal>INFO</literal>、<literal>NOTICE</literal>、
        <literal>WARNING</literal>、<literal>ERROR</literal>、
        <literal>LOG</literal>、
        <literal>FATAL</literal>和<literal>PANIC</literal>。默认值是<literal>ERROR</literal>，它表示导致错误、日志消息、致命错误或恐慌错误的语句将被记录在日志中。要有效地关闭记录失败语句，将这个参数设置为<literal>PANIC</literal>。只有超级用户可以改变这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-min-duration-statement" xreflabel="log_min_duration_statement">
<!--==========================orignal english content==========================
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_statement</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_min_duration_statement</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_min_duration_statement</>配置参数</primary>
      </indexterm></term>
       <listitem>
<!--==========================orignal english content==========================
        <para>
         Causes the duration of each completed statement to be logged
         if the statement ran for at least the specified number of
         milliseconds.  Setting this to zero prints all statement durations.
         Minus-one (the default) disables logging statement durations.
         For example, if you set it to <literal>250ms</literal>
         then all SQL statements that run 250ms or longer will be
         logged.  Enabling this parameter can be helpful in tracking down
         unoptimized queries in your applications.
         Only superusers can change this setting.
        </para>
____________________________________________________________________________-->
        <para>
         如果语句运行至少指定的毫秒数，将导致记录每一个这种完成的语句的持续时间。将这个参数设置为零将打印所有语句的执行时间。设置为 -1 （默认值）将停止记录语句持续时间。例如，如果你设置它为<literal>250ms</literal>，那么所有运行 250ms 或更久的 SQL 语句将被记录。启用这个参数可以有助于追踪应用中未优化的查询。只有超级用户可以改变这个设置。
        </para>

<!--==========================orignal english content==========================
        <para>
         For clients using extended query protocol, durations of the Parse,
         Bind, and Execute steps are logged independently.
        </para>
____________________________________________________________________________-->
        <para>
         对于使用扩展查询协议的客户端，解析、绑定和执行步骤的持续时间将被独立记录。
        </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         When using this option together with
         <xref linkend="guc-log-statement">,
         the text of statements that are logged because of
         <varname>log_statement</> will not be repeated in the
         duration log message.
         If you are not using <application>syslog</>, it is recommended
         that you log the PID or session ID using
         <xref linkend="guc-log-line-prefix">
         so that you can link the statement message to the later
         duration message using the process ID or session ID.
        </para>
____________________________________________________________________________-->
        <para>
         当把这个选项和<xref linkend="guc-log-statement">一起使用时，已经被<varname>log_statement</>记录的语句文本不会在持续时间日志消息中重复。如果你没有使用<application>syslog</>，我们推荐你使用<xref linkend="guc-log-line-prefix">记录 PID 或会话 ID，这样你可以使用进程 ID 或会话 ID 把语句消息链接到后来的持续时间消息。
        </para>
       </note>
       </listitem>
      </varlistentry>

     </variablelist>

<!--==========================orignal english content==========================
    <para>
     <xref linkend="runtime-config-severity-levels"> explains the message
     severity levels used by <productname>PostgreSQL</>.  If logging output
     is sent to <systemitem>syslog</systemitem> or Windows'
     <systemitem>eventlog</systemitem>, the severity levels are translated
     as shown in the table.
    </para>
____________________________________________________________________________-->
    <para>
     <xref linkend="runtime-config-severity-levels">解释了<productname>PostgreSQL</>所使用的消息严重级别。如果日志输出被发送到<systemitem>syslog</systemitem>或 Windows 的<systemitem>eventlog</systemitem>，严重级别会按照表中所示进行转换。
    </para>

    <table id="runtime-config-severity-levels">
<!--==========================orignal english content==========================
     <title>Message Severity Levels</title>
____________________________________________________________________________-->
     <title>消息严重级别</title>
     <tgroup cols="4">
      <thead>
<!--==========================orignal english content==========================
       <row>
        <entry>Severity</entry>
        <entry>Usage</entry>
        <entry><systemitem>syslog</></entry>
        <entry><systemitem>eventlog</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry>严重性</entry>
        <entry>用法</entry>
        <entry><systemitem>syslog</></entry>
        <entry><systemitem>eventlog</></entry>
       </row>
      </thead>

      <tbody>
<!--==========================orignal english content==========================
       <row>
        <entry><literal>DEBUG1..DEBUG5</></entry>
        <entry>Provides successively-more-detailed information for use by
         developers.</entry>
        <entry><literal>DEBUG</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>DEBUG1..DEBUG5</></entry>
        <entry>为开发者提供连续的更详细的信息。</entry>
        <entry><literal>DEBUG</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>INFO</></entry>
        <entry>Provides information implicitly requested by the user,
         e.g., output from <command>VACUUM VERBOSE</>.</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>INFO</></entry>
        <entry>提供用户隐式要求的信息，例如来自<command>VACUUM VERBOSE</>的输出。</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>NOTICE</></entry>
        <entry>Provides information that might be helpful to users, e.g.,
         notice of truncation of long identifiers.</entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>NOTICE</></entry>
        <entry>提供可能对用户有用的信息，例如长标识符截断提示。</entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>WARNING</></entry>
        <entry>Provides warnings of likely problems, e.g., <command>COMMIT</>
         outside a transaction block.</entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>WARNING</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>WARNING</></entry>
        <entry>提供可能出现的问题的警告，例如在一个事务块外<command>COMMIT</>。</entry>
        <entry><literal>NOTICE</></entry>
        <entry><literal>WARNING</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>ERROR</></entry>
        <entry>Reports an error that caused the current command to
         abort.</entry>
        <entry><literal>WARNING</></entry>
        <entry><literal>ERROR</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>ERROR</></entry>
        <entry>报告一个导致当前命令中断的错误。</entry>
        <entry><literal>WARNING</></entry>
        <entry><literal>ERROR</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>LOG</></entry>
        <entry>Reports information of interest to administrators, e.g.,
         checkpoint activity.</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>LOG</></entry>
        <entry>报告管理员可能感兴趣的信息，例如检查点活动。</entry>
        <entry><literal>INFO</></entry>
        <entry><literal>INFORMATION</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>FATAL</></entry>
        <entry>Reports an error that caused the current session to
         abort.</entry>
        <entry><literal>ERR</></entry>
        <entry><literal>ERROR</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>FATAL</></entry>
        <entry>报告一个导致当前会话中断的错误。</entry>
        <entry><literal>ERR</></entry>
        <entry><literal>ERROR</></entry>
       </row>

<!--==========================orignal english content==========================
       <row>
        <entry><literal>PANIC</></entry>
        <entry>Reports an error that caused all database sessions to abort.</entry>
        <entry><literal>CRIT</></entry>
        <entry><literal>ERROR</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><literal>PANIC</></entry>
        <entry>报告一个导致所有数据库会话中断的错误。</entry>
        <entry><literal>CRIT</></entry>
        <entry><literal>ERROR</></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    </sect2>
     <sect2 id="runtime-config-logging-what">
<!--==========================orignal english content==========================
     <title>What To Log</title>
____________________________________________________________________________-->
     <title>记录什么到日志</title>

     <variablelist>

     <varlistentry id="guc-application-name" xreflabel="application_name">
<!--==========================orignal english content==========================
      <term><varname>application_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>application_name</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>application_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>application_name</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The <varname>application_name</varname> can be any string of less than
        <symbol>NAMEDATALEN</> characters (64 characters in a standard build).
        It is typically set by an application upon connection to the server.
        The name will be displayed in the <structname>pg_stat_activity</> view
        and included in CSV log entries.  It can also be included in regular
        log entries via the <xref linkend="guc-log-line-prefix"> parameter.
        Only printable ASCII characters may be used in the
        <varname>application_name</varname> value. Other characters will be
        replaced with question marks (<literal>?</literal>).
       </para>
____________________________________________________________________________-->
       <para>
        application_name可以是任意的小于NAMEDATALEN字字符 （标准编译是64字符）的字符串。它通常由一个连接服务器后的的应用程序设置。 名字会记录在pg_stat_activity和CSV日志条目中。 也可以通过log_line_prefix参数，包含在规律的日志条目中。 只有可打印的ASCII字符可以被用于application_name。 其他字符会被问号(?)替换。
        <varname>application_name</varname>可以是任意小于<symbol>NAMEDATALEN</>个字符（标准编译中是 64 个字符）的字符串。这通常由一个应用通过到服务器的连接设置。该名称将被显示在<structname>pg_stat_activity</>视图中并被包括在 CSV 日志项中。它也会被通过<xref linkend="guc-log-line-prefix">包括在普通日志项中。只有可打印 ASCII 字符能被使用在<varname>application_name</varname>之中。其他字符将被替换为问号（<literal>?</literal>）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_parse</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_print_parse</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_parse</>配置参数</primary>
      </indexterm>
      </term>
<!--==========================orignal english content==========================
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_rewritten</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_print_rewritten</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_rewritten</>配置参数</primary>
      </indexterm>
      </term>
<!--==========================orignal english content==========================
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_plan</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_print_plan</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_print_plan</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        These parameters enable various debugging output to be emitted.
        When set, they print the resulting parse tree, the query rewriter
        output, or the execution plan for each executed query.
        These messages are emitted at <literal>LOG</> message level, so by
        default they will appear in the server log but will not be sent to the
        client.  You can change that by adjusting
        <xref linkend="guc-client-min-messages"> and/or
        <xref linkend="guc-log-min-messages">.
        These parameters are off by default.
       </para>
____________________________________________________________________________-->
       <para>
        这些参数将会让多种调试输出被发出。当被设置时，它们为每一个被执行的查询打印结果分析树、查询重写器输出或执行计划。这些消息在<literal>LOG</>消息级别上被发出，因此默认情况下它们将出现在服务器日志中但不会被发送到客户端。你可以通过调整<xref linkend="guc-client-min-messages">和/或<xref linkend="guc-log-min-messages">来改变这种情况。这些参数默认是关闭的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_pretty_print</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_pretty_print</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_pretty_print</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When set, <varname>debug_pretty_print</varname> indents the messages
        produced by <varname>debug_print_parse</varname>,
        <varname>debug_print_rewritten</varname>, or
        <varname>debug_print_plan</varname>.  This results in more readable
        but much longer output than the <quote>compact</> format used when
        it is off.  It is on by default.
       </para>
____________________________________________________________________________-->
       <para>
        当被设置时，<varname>debug_pretty_print</varname>会缩进由<varname>debug_print_parse</varname>、
        <varname>debug_print_rewritten</varname>或
        <varname>debug_print_plan</varname>产生的输出。这将导致比关闭参数时使用的<quote>紧凑</>模式可读性更强但是更长的输出。它默认是打开的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-checkpoints" xreflabel="log_checkpoints">
<!--==========================orignal english content==========================
      <term><varname>log_checkpoints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_checkpoints</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_checkpoints</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_checkpoints</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes checkpoints and restartpoints to be logged in the server log.
        Some statistics are included in the log messages, including the number
        of buffers written and the time spent writing them.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line. The default is off.
       </para>
____________________________________________________________________________-->
       <para>
        导致检查点和重启点被记录在服务器日志中。一些统计信息也被包括在日志消息中，包括写入缓冲区的数据和写它们所花的时间。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是关闭。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-connections" xreflabel="log_connections">
<!--==========================orignal english content==========================
      <term><varname>log_connections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_connections</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_connections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_connections</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes each attempted connection to the server to be logged,
        as well as successful completion of client authentication.
        Only superusers can change this parameter at session start,
        and it cannot be changed at all within a session.
        The default is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        导致每一次尝试对服务器的连接被记录，客户端认证的成功完成也会被记录。
        只有超级用户在会话开启时可以改变这个参数，并且在所有会话中不能改变。
        缺省是<literal>off</>。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         Some client programs, like <application>psql</>, attempt
         to connect twice while determining if a password is required, so
         duplicate <quote>connection received</> messages do not
         necessarily indicate a problem.
        </para>
____________________________________________________________________________-->
        <para>
          某些客户端程序（例如<application>psql</>）在要求密码时会尝试连接两次，因此重复的<quote>收到连接</>消息并不一定表示一个错误。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-disconnections" xreflabel="log_disconnections">
<!--==========================orignal english content==========================
      <term><varname>log_disconnections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_disconnections</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_disconnections</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_disconnections</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes session terminations to be logged.  The log output
        provides information similar to <varname>log_connections</varname>,
        plus the duration of the session.
        Only superusers can change this parameter at session start,
        and it cannot be changed at all within a session.
        The default is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        记录会话终止原因。日志输出提供信息类似于<varname>log_connections</varname>，
        以及会话持续时间。只有超级用户在会话开启时可以改变这个参数，
        并且在所有会话中不能改变。缺省是<literal>off</>。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-log-duration" xreflabel="log_duration">
<!--==========================orignal english content==========================
      <term><varname>log_duration</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_duration</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_duration</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_duration</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes the duration of every completed statement to be logged.
        The default is <literal>off</>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        导致每一个完成的语句的持续时间被记录。默认值是<literal>off</>。只有超级用户可以改变这个设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        For clients using extended query protocol, durations of the Parse,
        Bind, and Execute steps are logged independently.
       </para>
____________________________________________________________________________-->
       <para>
        对于使用扩展查询协议的客户端，解析、绑定和执行步骤的持续时间将被独立记录。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         The difference between setting this option and setting
         <xref linkend="guc-log-min-duration-statement"> to zero is that
         exceeding <varname>log_min_duration_statement</> forces the text of
         the query to be logged, but this option doesn't.  Thus, if
         <varname>log_duration</> is <literal>on</> and
         <varname>log_min_duration_statement</> has a positive value, all
         durations are logged but the query text is included only for
         statements exceeding the threshold.  This behavior can be useful for
         gathering statistics in high-load installations.
        </para>
____________________________________________________________________________-->
        <para>
         设置这个选项和设置<xref linkend="guc-log-min-duration-statement">为零之间的区别是，超过<varname>log_min_duration_statement</>强制查询的文本被记录，但这个选项不会。因此，如果<varname>log_duration</>为<literal>on</>并且<varname>log_min_duration_statement</>为正值，所有持续时间都将被记录，但是只有超过阈值的语句才会被记录查询文本。这种行为有助于在高负载安装中收集统计信息。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-error-verbosity" xreflabel="log_error_verbosity">
<!--==========================orignal english content==========================
      <term><varname>log_error_verbosity</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_error_verbosity</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_error_verbosity</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_error_verbosity</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls the amount of detail written in the server log for each
        message that is logged.  Valid values are <literal>TERSE</>,
        <literal>DEFAULT</>, and <literal>VERBOSE</>, each adding more
        fields to displayed messages.  <literal>TERSE</> excludes
        the logging of <literal>DETAIL</>, <literal>HINT</>,
        <literal>QUERY</>, and <literal>CONTEXT</> error information.
        <literal>VERBOSE</> output includes the <symbol>SQLSTATE</> error
        code (see also <xref linkend="errcodes-appendix">) and the source code file name, function name,
        and line number that generated the error.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        控制为每一个被记录的消息要写入到服务器日志的细节量。有效值是<literal>TERSE</>、<literal>DEFAULT</>和<literal>VERBOSE</>，每一个都为显示的消息增加更多域。<literal>TERSE</>排除记录<literal>DETAIL</>、<literal>HINT</>、<literal>QUERY</>和<literal>CONTEXT</>错误信息。<literal>VERBOSE</>输出包括<symbol>SQLSTATE</>错误码（见<xref linkend="errcodes-appendix">）以及产生错误的源代码文件名、函数名和行号。只有超级用户能够更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-hostname" xreflabel="log_hostname">
<!--==========================orignal english content==========================
      <term><varname>log_hostname</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_hostname</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_hostname</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_hostname</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        By default, connection log messages only show the IP address of the
        connecting host. Turning this parameter on causes logging of the
        host name as well.  Note that depending on your host name resolution
        setup this might impose a non-negligible performance penalty.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        默认情况下，连接日志消息只显示连接主机的 IP 地址。打开这个参数将导致也记录主机名。注意根据你的主机名解析设置，这可能会导致很微小的性能损失。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-line-prefix" xreflabel="log_line_prefix">
<!--==========================orignal english content==========================
      <term><varname>log_line_prefix</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_line_prefix</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_line_prefix</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_line_prefix</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
         This is a <function>printf</>-style string that is output at the
         beginning of each log line.
         <literal>%</> characters begin <quote>escape sequences</>
         that are replaced with status information as outlined below.
         Unrecognized escapes are ignored. Other
         characters are copied straight to the log line. Some escapes are
         only recognized by session processes, and will be treated as empty by
         background processes such as the main server process. Status
         information may be aligned either left or right by specifying a
         numeric literal after the % and before the option. A negative
         value will cause the status information to be padded on the
         right with spaces to give it a minimum width, whereas a positive
         value will pad on the left. Padding can be useful to aid human
         readability in log files.
         This parameter can only be set in the <filename>postgresql.conf</>
         file or on the server command line. The default is an empty string.

         <informaltable>
          <tgroup cols="3">
           <thead>
            <row>
             <entry>Escape</entry>
             <entry>Effect</entry>
             <entry>Session only</entry>
             </row>
            </thead>
           <tbody>
            <row>
             <entry><literal>%a</literal></entry>
             <entry>Application name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%u</literal></entry>
             <entry>User name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%d</literal></entry>
             <entry>Database name</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%r</literal></entry>
             <entry>Remote host name or IP address, and remote port</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%h</literal></entry>
             <entry>Remote host name or IP address</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%p</literal></entry>
             <entry>Process ID</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%t</literal></entry>
             <entry>Time stamp without milliseconds</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%m</literal></entry>
             <entry>Time stamp with milliseconds</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%n</literal></entry>
             <entry>Time stamp with milliseconds (as a Unix epoch)</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%i</literal></entry>
             <entry>Command tag: type of session's current command</entry>
             <entry>yes</entry>
            </row>
            <row>
             <entry><literal>%e</literal></entry>
             <entry>SQLSTATE error code</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%c</literal></entry>
             <entry>Session ID: see below</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%l</literal></entry>
             <entry>Number of the log line for each session or process, starting at 1</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%s</literal></entry>
             <entry>Process start time stamp</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%v</literal></entry>
             <entry>Virtual transaction ID (backendID/localXID)</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%x</literal></entry>
             <entry>Transaction ID (0 if none is assigned)</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%q</literal></entry>
             <entry>Produces no output, but tells non-session
             processes to stop at this point in the string; ignored by
             session processes</entry>
             <entry>no</entry>
            </row>
            <row>
             <entry><literal>%%</literal></entry>
             <entry>Literal <literal>%</></entry>
             <entry>no</entry>
            </row>
           </tbody>
          </tgroup>
         </informaltable>

         The <literal>%c</> escape prints a quasi-unique session identifier,
         consisting of two 4-byte hexadecimal numbers (without leading zeros)
         separated by a dot.  The numbers are the process start time and the
         process ID, so <literal>%c</> can also be used as a space saving way
         of printing those items.  For example, to generate the session
         identifier from <literal>pg_stat_activity</>, use this query:
<programlisting>
SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;
</programlisting>

       </para>
____________________________________________________________________________-->
       <para>
         这是一个<function>printf</>风格的字符串，它在每个日志行的开头输出。<literal>%</>字符开始<quote>转义序列</>，它将被按照下文描述的替换成状态信息。未识别的转义被忽略。其他字符被直接复制到日志行。某些转义只被会话进程识别并且被主服务器进程等后台进程当作空。通过指定一个在%之后和该选项之前的数字可以让状态信息左对齐或右对齐。
         负值将导致在右边用空格填充状态信息已达到最小宽度，而正值则在左边填充。填充对于日志文
         件的人类可读性大有帮助。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。默认值是一个空字符串。

         <informaltable>
          <tgroup cols="3">
           <thead>
            <row>
             <entry>转义</entry>
             <entry>效果</entry>
             <entry>只限会话</entry>
             </row>
            </thead>
           <tbody>
            <row>
             <entry><literal>%a</literal></entry>
             <entry>应用名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%u</literal></entry>
             <entry>用户名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%d</literal></entry>
             <entry>数据库名</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%r</literal></entry>
             <entry>远程主机名或 IP 地址，以及远程端口</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%h</literal></entry>
             <entry>远程主机名或 IP 地址</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%p</literal></entry>
             <entry>进程 ID</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%t</literal></entry>
             <entry>无毫秒的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%m</literal></entry>
             <entry>带毫秒的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%n</literal></entry>
             <entry>带毫秒的时间戳（作为 Unix 时间戳）</entry>

             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%i</literal></entry>
             <entry>命令标签：会话当前命令的类型</entry>
             <entry>是</entry>
            </row>
            <row>
             <entry><literal>%e</literal></entry>
             <entry>SQLSTATE 错误代码</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%c</literal></entry>
             <entry>会话 ID：见下文</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%l</literal></entry>
             <entry>对每个会话或进程的日志行号，从 1 开始</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%s</literal></entry>
             <entry>进程开始的时间戳</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%v</literal></entry>
             <entry>虚拟事务 ID (backendID/localXID)</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%x</literal></entry>
             <entry>事务 ID （如果未分配则为 0）</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%q</literal></entry>
             <entry>不产生输出，但是告诉非会话进程在字符串的这一点停止；会话进程忽略</entry>
             <entry>否</entry>
            </row>
            <row>
             <entry><literal>%%</literal></entry>
             <entry>纯文字 <literal>%</></entry>
             <entry>否</entry>
            </row>
           </tbody>
          </tgroup>
         </informaltable>

         <literal>%c</>转义打印一个准唯一的会话标识符，它由两个 4 字节的十六进制数（不带先导零）组成，以点号分隔。这些数字是进程启动时间和进程 ID，因此<literal>%c</>也可以被用作保存打印这些项的方式的空间。例如，要从<literal>pg_stat_activity</>生成会话标识符，使用这个查询：
<programlisting>
SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;
</programlisting>

       </para>

       <tip>
<!--==========================orignal english content==========================
        <para>
         If you set a nonempty value for <varname>log_line_prefix</>,
         you should usually make its last character be a space, to provide
         visual separation from the rest of the log line.  A punctuation
         character can be used too.
        </para>
____________________________________________________________________________-->
        <para>
         如果你为<varname>log_line_prefix</>设置了非空值，你通常应该让它的最后一个字符为空格，这样用以提供和日志行的剩余部分的视觉区别。也可以使用标点符号。
        </para>
       </tip>

       <tip>
<!--==========================orignal english content==========================
        <para>
         <application>Syslog</> produces its own
         time stamp and process ID information, so you probably do not want to
         include those escapes if you are logging to <application>syslog</>.
        </para>
____________________________________________________________________________-->
        <para>
         <application>Syslog</>产生自己的时间戳和进程 ID 信息，因此如果你记录到<application>syslog</>你可能不希望包括哪些转义。
        </para>
       </tip>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-lock-waits" xreflabel="log_lock_waits">
<!--==========================orignal english content==========================
      <term><varname>log_lock_waits</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_lock_waits</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_lock_waits</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_lock_waits</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls whether a log message is produced when a session waits
        longer than <xref linkend="guc-deadlock-timeout"> to acquire a
        lock.  This is useful in determining if lock waits are causing
        poor performance.  The default is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        控制当一个会话为获得一个锁等到超过<xref linkend="guc-deadlock-timeout">时，是否要产生一个日志消息。这有助于决定是否所等待造成了性能低下。默认值是<literal>off</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-statement" xreflabel="log_statement">
<!--==========================orignal english content==========================
      <term><varname>log_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_statement</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_statement</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>log_statement</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls which SQL statements are logged. Valid values are
        <literal>none</> (off), <literal>ddl</>, <literal>mod</>, and
        <literal>all</> (all statements). <literal>ddl</> logs all data definition
        statements, such as <command>CREATE</>, <command>ALTER</>, and
        <command>DROP</> statements. <literal>mod</> logs all
        <literal>ddl</> statements, plus data-modifying statements
        such as <command>INSERT</>,
        <command>UPDATE</>, <command>DELETE</>, <command>TRUNCATE</>,
        and <command>COPY FROM</>.
        <command>PREPARE</>, <command>EXECUTE</>, and
        <command>EXPLAIN ANALYZE</> statements are also logged if their
        contained command is of an appropriate type.  For clients using
        extended query protocol, logging occurs when an Execute message
        is received, and values of the Bind parameters are included
        (with any embedded single-quote marks doubled).
       </para>
____________________________________________________________________________-->
       <para>
        控制哪些 SQL 语句被记录。有效值是
        <literal>none</> (off)、<literal>ddl</>、<literal>mod</>和
        <literal>all</>（所有语句）。<literal>ddl</>记录所有数据定义语句，例如<command>CREATE</>、<command>ALTER</>和
        <command>DROP</>语句。<literal>mod</>记录所有<literal>ddl</>语句，外加数据修改语句例如<command>INSERT</>,
        <command>UPDATE</>、<command>DELETE</>、<command>TRUNCATE</>,
        和<command>COPY FROM</>。
        如果<command>PREPARE</>、<command>EXECUTE</>和
        <command>EXPLAIN ANALYZE</>包含合适类型的命令，它们也会被记录。对于使用扩展查询协议的客户端，当收到一个执行消息时会产生日志并且会包括绑定参数的值（任何内嵌的单引号会被双写）。
       </para>

<!--==========================orignal english content==========================
       <para>
        The default is <literal>none</>. Only superusers can change this
        setting.
       </para>
____________________________________________________________________________-->
       <para>
        默认值是<literal>none</>。只有超级用户可以改变这个设置。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         Statements that contain simple syntax errors are not logged
         even by the <varname>log_statement</> = <literal>all</> setting,
         because the log message is emitted only after basic parsing has
         been done to determine the statement type.  In the case of extended
         query protocol, this setting likewise does not log statements that
         fail before the Execute phase (i.e., during parse analysis or
         planning).  Set <varname>log_min_error_statement</> to
         <literal>ERROR</> (or lower) to log such statements.
        </para>
____________________________________________________________________________-->
        <para>
         即使设置了log_statement=all，包含 简单语法错误的语句也不会被记录。因为仅在完成基本的语法分析并 确定了语句类型之后才记录日志。在使用扩展查询协议的情况下，在 执行阶段之前(语法分析或规划阶段)同样不会记录。将 log_min_error_statement设为ERROR 或更低才能记录这些语句。
         即使使用<varname>log_statement</> = <literal>all</>设置，包含简单语法错误的语句也不会被记录。这是因为只有在完成基本语法解析并确定了语句类型之后才会发出日志消息。在扩展查询协议的情况下，在执行阶段之前（即在解析分析或规划期间）出错的语句也不会被记录。将<varname>log_min_error_statement</>设置为<literal>ERROR</>（或更低）来记录这种语句。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-replication-commands" xreflabel="log_replication_commands">
<!--==========================orignal english content==========================
      <term><varname>log_replication_commands</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_replication_commands</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_replication_commands</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_replication_commands</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes each replication command to be logged in the server log.
        See <xref linkend="protocol-replication"> for more information about
        replication command. The default value is <literal>off</>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        导致每个复制命令记录在服务器日志中。
        参阅<xref linkend="protocol-replication">获取更多复制命令的详细信息。
        缺省值是<literal>off</>。只有超级用户可以修改这个设置。
       </para>
      </listitem>
     </varlistentry>
      
     <varlistentry id="guc-log-temp-files" xreflabel="log_temp_files">
<!--==========================orignal english content==========================
      <term><varname>log_temp_files</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_temp_files</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_temp_files</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_temp_files</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls logging of temporary file names and sizes.
        Temporary files can be
        created for sorts, hashes, and temporary query results.
        A log entry is made for each temporary file when it is deleted.
        A value of zero logs all temporary file information, while positive
        values log only files whose size is greater than or equal to
        the specified number of kilobytes.  The
        default setting is -1, which disables such logging.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        控制记录临时文件名和尺寸。临时文件可以被创建用来排序、哈希和存储临时查询结果。当每一个临时文件被删除时都会制作一个日志项。一个零值记录所有临时文件信息，而正值只记录尺寸大于或等于指定千字节数的文件。默认设置为 -1，它禁用这种记录。只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-timezone" xreflabel="log_timezone">
<!--==========================orignal english content==========================
      <term><varname>log_timezone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_timezone</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_timezone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>log_timezone</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the time zone used for timestamps written in the server log.
        Unlike <xref linkend="guc-timezone">, this value is cluster-wide,
        so that all sessions will report timestamps consistently.
        The built-in default is <literal>GMT</>, but that is typically
        overridden in <filename>postgresql.conf</>; <application>initdb</>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"> for more information.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        设置在服务器日志中写入的时间戳的时区。和<xref linkend="guc-timezone">不同，这个值是集簇范围的，因此所有会话将报告一致的时间戳。内建默认值是<literal>GMT</>，但是通常会被在<filename>postgresql.conf</>中覆盖。<application>initdb</>将安装一个对应于其系统环境的设置。详见<xref linkend="datatype-timezones">。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
     <sect2 id="runtime-config-logging-csvlog">
<!--==========================orignal english content==========================
     <title>Using CSV-Format Log Output</title>
____________________________________________________________________________-->
     <title>使用 CSV 格式的日志输出</title>

<!--==========================orignal english content==========================
       <para>
        Including <literal>csvlog</> in the <varname>log_destination</> list
        provides a convenient way to import log files into a database table.
        This option emits log lines in comma-separated-values
        (<acronym>CSV</>) format,
        with these columns:
        time stamp with milliseconds,
        user name,
        database name,
        process ID,
        client host:port number,
        session ID,
        per-session line number,
        command tag,
        session start time,
        virtual transaction ID,
        regular transaction ID,
        error severity,
        SQLSTATE code,
        error message,
        error message detail,
        hint,
        internal query that led to the error (if any),
        character count of the error position therein,
        error context,
        user query that led to the error (if any and enabled by
        <varname>log_min_error_statement</>),
        character count of the error position therein,
        location of the error in the PostgreSQL source code
        (if <varname>log_error_verbosity</> is set to <literal>verbose</>),
        and application name.
        Here is a sample table definition for storing CSV-format log output:

<programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
        包括在log_destination中的csvlog，提供了一个 便捷的方式向数据库中导入日志文件。这个选项以CSV格式发出日志行， 带有这些列： 以毫秒为单位的时间戳，用户名，数据库名，进程ID，客户端主机：端口号， 会话ID，每个会话的行号，命令标签，会话开始时间，虚拟事务ID，日常事务ID， 错误严重性，SQLSTATE代码，错误信息，错误信息的详细信息，建议， 导致错误的内部查询（如果存在），其中的错误位置的字符统计， 错误范围，导致错误的用户查询（如果存在，并且启用log_min_error_statement）， 其中的错误位置的字符统计，PostgreSQL源代码中报错的位置（如果 log_error_verbosity设置为verbose）和应用程序名。 下面是一个用于存储CSV格式日志暑促的简单表定义：
        在<varname>log_destination</>列表中包括<literal>csvlog</>提供了一种便捷方式将日志文件导入到一个数据库表。这个选项发出逗号分隔值（<acronym>CSV</>）格式的日志行，包括这些列：
        带毫秒的时间戳、
        用户名、
        数据库名、
        进程 ID、
        客户端主机:端口号、
        会话 ID、
        每个会话的行号、
        命令标签、
        会话开始时间、
        虚拟事务 ID、
        普通事务 ID、
        错误严重性、
        SQLSTATE 代码、
        错误消息、
        错误消息详情、
        提示、
        导致错误的内部查询（如果有）、
        错误位置所在的字符计数、
        错误上下文、
        导致错误的用户查询（如果有且被<varname>log_min_error_statement</>启用）、
        错误位置所在的字符计数、
        在 PostgreSQL 源代码中错误的位置（如果<varname>log_error_verbosity</>被设置为<literal>verbose</>）以及应用名。
        下面是一个定义用来存储 CSV 格式日志输出的样表：

<programlisting>
CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  PRIMARY KEY (session_id, session_line_num)
);
</programlisting>
       </para>

<!--==========================orignal english content==========================
       <para>
        To import a log file into this table, use the <command>COPY FROM</>
        command:

<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
        使用<command>COPY FROM</>命令将一个日志文件导入到这个表中：

<programlisting>
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;
</programlisting>
       </para>

<!--==========================orignal english content==========================
       <para>
       There are a few things you need to do to simplify importing CSV log
       files:

       <orderedlist>
         <listitem>
           <para>
            Set <varname>log_filename</varname> and
            <varname>log_rotation_age</> to provide a consistent,
            predictable naming scheme for your log files.  This lets you
            predict what the file name will be and know when an individual log
            file is complete and therefore ready to be imported.
         </para>
        </listitem>

        <listitem>
           <para>
            Set <varname>log_rotation_size</varname> to 0 to disable
            size-based log rotation, as it makes the log file name difficult
            to predict.
           </para>
        </listitem>

        <listitem>
          <para>
           Set <varname>log_truncate_on_rotation</varname> to <literal>on</> so
           that old log data isn't mixed with the new in the same file.
          </para>
        </listitem>

        <listitem>
          <para>
           The table definition above includes a primary key specification.
           This is useful to protect against accidentally importing the same
           information twice.  The <command>COPY</> command commits all of the
           data it imports at one time, so any error will cause the entire
           import to fail.  If you import a partial log file and later import
           the file again when it is complete, the primary key violation will
           cause the import to fail.  Wait until the log is complete and
           closed before importing.  This procedure will also protect against
           accidentally importing a partial line that hasn't been completely
           written, which would also cause <command>COPY</> to fail.
          </para>
        </listitem>
        </orderedlist>
      </para>
____________________________________________________________________________-->
       <para>
       你可以做一些事情来简化导入 CSV 日志文件：

       <orderedlist>
         <listitem>
           <para>
            设置<varname>log_filename</varname>和<varname>log_rotation_age</>为你的日志文件提供一种一致的、可预测的命名空间。这让你预测文件名会是怎样以及知道什么时候一个个体日志文件完成并且因此准备好被导入。
         </para>
        </listitem>

        <listitem>
           <para>
           将<varname>log_rotation_size</varname>设置为 0 来禁用基于尺寸的日志轮转，因为它使得日志文件名难以预测。
           </para>
        </listitem>

        <listitem>
          <para>
           将<varname>log_truncate_on_rotation</varname>设置为<literal>on</>，这样在同一个文件中旧日志数据不会与新数据混杂。
          </para>
        </listitem>

        <listitem>
          <para>
           上述表定义包括一个主键声明。这有助于避免意外地两次导入相同的信息。<command>COPY</>命令一次提交所有它导入的数据，因此任何错误将导致整个导入失败。如果你导入一个部分完成的日志文件并且稍后当它完全完成后再次导入，主键违背将导致导入失败。请等到日志完成且被关闭之后再导入。这个过程也可以避免意外地导入部分完成的行，这种行也将导致<command>COPY</>失败。
          </para>
        </listitem>
        </orderedlist>
      </para>

    </sect2>
    
    <sect2>
<!--==========================orignal english content==========================
    <title>Process Title</title>
____________________________________________________________________________-->
    <title>进程标题</title>

<!--==========================orignal english content==========================
    <para>
     These settings control how process titles of server processes are
     modified.  Process titles are typically viewed using programs like
     <application>ps</> or, on Windows, <application>Process Explorer</>.
     See <xref linkend="monitoring-ps"> for details.
    </para>
____________________________________________________________________________-->
    <para>
     这些设置控制进程标题如<command>ps</command>是如何被修改的。
     参阅<xref linkend="monitoring-ps">获取详情。
    </para>

    <variablelist>
     <varlistentry id="guc-cluster-name" xreflabel="cluster_name">
<!--==========================orignal english content==========================
      <term><varname>cluster_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>cluster_name</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>cluster_name</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>cluster_name</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the cluster name that appears in the process title for all
        server processes in this cluster. The name can be any string of less
        than <symbol>NAMEDATALEN</> characters (64 characters in a standard
        build). Only printable ASCII characters may be used in the
        <varname>cluster_name</varname> value. Other characters will be
        replaced with question marks (<literal>?</literal>).  No name is shown
        if this parameter is set to the empty string <literal>''</> (which is
        the default). This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        设置出现在集群中的所有进程标题中的集群名称。
        名称可以是任何小于<symbol>NAMEDATALEN</>字符（标准64字符）的字符串。
        只有可输出的ASCII字符可以用在<varname>cluster_name</varname>值中。
        其他字符将用问号替换(<literal>?</literal>)。
        如果此参数设置为空字符串<literal>''</>（即为缺省值），不显示名字。
        此参数只能在服务器启动时设置。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry id="guc-update-process-title" xreflabel="update_process_title">
<!--==========================orignal english content==========================
      <term><varname>update_process_title</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>update_process_title</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>update_process_title</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>update_process_title</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables updating of the process title every time a new SQL command
        is received by the server.
        This setting defaults to <literal>on</> on most platforms, but it
        defaults to <literal>off</> on Windows due to that platform's larger
        overhead for updating the process title.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para> 
        启用更新进程标题的特性，这个特性在每次服务器接收到一个新SQL命令时都会更新进程的标题。
       进程标题通常通过<command>ps</>命令来查看，
       或者在Windows中用<application>进程管理器</>查看。
       只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   </sect1>

   <sect1 id="runtime-config-statistics">
<!--==========================orignal english content==========================
    <title>Run-time Statistics</title>
____________________________________________________________________________-->
    <title>运行时统计数据</title>

    <sect2 id="runtime-config-statistics-collector">
<!--==========================orignal english content==========================
     <title>Query and Index Statistics Collector</title>
____________________________________________________________________________-->
     <title>查询和索引统计收集器</title>

<!--==========================orignal english content==========================
     <para>
      These parameters control server-wide statistics collection features.
      When statistics collection is enabled, the data that is produced can be
      accessed via the <structname>pg_stat</structname> and
      <structname>pg_statio</structname> family of system views.
      Refer to <xref linkend="monitoring"> for more information.
     </para>
____________________________________________________________________________-->
     <para>
      这些参数控制服务器范围的统计数据收集特性。当统计收集被启用时，被产生的数据可以通过<structname>pg_stat</structname>和<structname>pg_statio</structname>系统视图族访问。详见<xref linkend="monitoring">。
     </para>

     <variablelist>

     <varlistentry id="guc-track-activities" xreflabel="track_activities">
<!--==========================orignal english content==========================
      <term><varname>track_activities</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_activities</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_activities</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_activities</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables the collection of information on the currently
        executing command of each session, along with the time when
        that command began execution. This parameter is on by
        default. Note that even when enabled, this information is not
        visible to all users, only to superusers and the user owning
        the session being reported on, so it should not represent a
        security risk.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        启用对每个会话的当前执行命令的信息收集，还有命令开始执行的时间。这个参数默认为打开。注意即使被启用，这些信息也不是对所有用户可见，只有超级用户和拥有报告信息的会话的用户可见，因此它不会表现为一个安全风险。只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-activity-query-size" xreflabel="track_activity_query_size">
<!--==========================orignal english content==========================
      <term><varname>track_activity_query_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>track_activity_query_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_activity_query_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>track_activity_query_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
       Specifies the number of bytes reserved to track the currently
       executing command for each active session, for the
       <structname>pg_stat_activity</>.<structfield>query</> field.
       The default value is 1024. This parameter can only be set at server
       start.
       </para>
____________________________________________________________________________-->
       <para>
       声明保留的字节数，以跟踪每个活动会话的当前执行命令，对 pg_stat_activity.current_query段。 缺省值是1024。这个参数只能在服务器启动时设置。
       指定跟踪每个活动会话当前执行命令所保留的字节数，它们被用于<structname>pg_stat_activity</>.<structfield>query</>域。默认值是 1024。这个参数只能在服务器启动时被设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-counts" xreflabel="track_counts">
<!--==========================orignal english content==========================
      <term><varname>track_counts</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_counts</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_counts</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_counts</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables collection of statistics on database activity.
        This parameter is on by default, because the autovacuum
        daemon needs the collected information.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        启用在数据库活动上的统计收集。这个参数默认为打开，因为自动清理守护进程需要被收集的信息。只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-io-timing" xreflabel="track_io_timing">
<!--==========================orignal english content==========================
      <term><varname>track_io_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_io_timing</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_io_timing</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>track_io_timing</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables timing of database I/O calls.  This parameter is off by
        default, because it will repeatedly query the operating system for
        the current time, which may cause significant overhead on some
        platforms.  You can use the <xref linkend="pgtesttiming"> tool to
        measure the overhead of timing on your system.
        I/O timing information is
        displayed in <xref linkend="pg-stat-database-view">, in the output of
        <xref linkend="sql-explain"> when the <literal>BUFFERS</> option is
        used, and by <xref linkend="pgstatstatements">.  Only superusers can
        change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        启用对系统 I/O 调用的计时。这个参数默认为关闭，因为它将重复地向操作系统查询当前时间，这会在某些平台上导致显著的负荷。你可以使用<xref linkend="pgtesttiming">工具来度量你的系统中计时的开销。I/O 计时信息被显示在<xref linkend="pg-stat-database-view">中、当<literal>BUFFERS</>选项被使用时的<xref linkend="sql-explain">输出中以及<xref linkend="pgstatstatements">中。只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-track-functions" xreflabel="track_functions">
<!--==========================orignal english content==========================
      <term><varname>track_functions</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>track_functions</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>track_functions</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>track_functions</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables tracking of function call counts and time used. Specify
        <literal>pl</literal> to track only procedural-language functions,
        <literal>all</literal> to also track SQL and C language functions.
        The default is <literal>none</literal>, which disables function
        statistics tracking.  Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        启用跟踪函数调用计数和用时。指定<literal>pl</literal>只跟踪过程语言函数，指定<literal>all</literal>还会跟踪 SQL 和 C 语言函数。默认值是<literal>none</literal>，它禁用函数统计跟踪。只有超级用户可以更改这个设置。
       </para>

       <note>
<!--==========================orignal english content==========================
        <para>
         SQL-language functions that are simple enough to be <quote>inlined</>
         into the calling query will not be tracked, regardless of this
         setting.
        </para>
____________________________________________________________________________-->
        <para>
         简单到足以被<quote>内联</>到调用查询中的 SQL 语言函数不会被跟踪， 而不管这个设置。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-stats-temp-directory" xreflabel="stats_temp_directory">
<!--==========================orignal english content==========================
      <term><varname>stats_temp_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>stats_temp_directory</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>stats_temp_directory</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>stats_temp_directory</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the directory to store temporary statistics data in. This can be
        a path relative to the data directory or an absolute path. The default
        is <filename>pg_stat_tmp</filename>. Pointing this at a RAM-based
        file system will decrease physical I/O requirements and can lead to
        improved performance.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        设置存储临时统计数据的目录。这可以是一个相对于数据目录的路径或一个绝对路径。默认值是<filename>pg_stat_tmp</filename>。在一个基于 RAM 的文件系统上指明这个参数将降低物理 I/O 需求，并且提高性能。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-statistics-monitor">
<!--==========================orignal english content==========================
     <title>Statistics Monitoring</title>
____________________________________________________________________________-->
     <title>统计监控</title>
     <variablelist>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_statement_stats</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_statement_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_statement_stats</>配置参数</primary>
      </indexterm>
      </term>
<!--==========================orignal english content==========================
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_parser_stats</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_parser_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_parser_stats</>配置参数</primary>
      </indexterm>
      </term>
<!--==========================orignal english content==========================
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_planner_stats</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_planner_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_planner_stats</>配置参数</primary>
      </indexterm>
      </term>
<!--==========================orignal english content==========================
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_executor_stats</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_executor_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_executor_stats</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        For each query, output performance statistics of the respective
        module to the server log. This is a crude profiling
        instrument, similar to the Unix <function>getrusage()</> operating
        system facility.  <varname>log_statement_stats</varname> reports total
        statement statistics, while the others report per-module statistics.
        <varname>log_statement_stats</varname> cannot be enabled together with
        any of the per-module options.  All of these options are disabled by
        default.   Only superusers can change these settings.
       </para>
____________________________________________________________________________-->
       <para>
        对每个查询，向服务器日志里输出相应模块的性能统计。这是一种粗糙的分析工具。类似于 Unix 的<function>getrusage()</>系统功能。<varname>log_statement_stats</varname>报告总的语句统计，而其它的报告针每个模块的统计。<varname>log_statement_stats</varname>不能和 其它任何针对每个模块统计的选项一起启用。所有这些选项都是默认禁用的。只有超级用户可以更改这个设置。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>
   </sect1>

   <sect1 id="runtime-config-autovacuum">
<!--==========================orignal english content==========================
    <title>Automatic Vacuuming</title>
____________________________________________________________________________-->
    <title>自动清理</title>

<!--==========================orignal english content==========================
    <indexterm>
     <primary>autovacuum</primary>
     <secondary>configuration parameters</secondary>
    </indexterm>
____________________________________________________________________________-->
    <indexterm>
     <primary>自动清理</primary>
     <secondary>配置参数</secondary>
    </indexterm>

<!--==========================orignal english content==========================
     <para>
      These settings control the behavior of the <firstterm>autovacuum</>
      feature.  Refer to <xref linkend="autovacuum"> for more information.
      Note that many of these settings can be overridden on a per-table
      basis; see <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title">.
     </para>
____________________________________________________________________________-->
     <para>
      这些设置控制<firstterm>自动清理</>特性的行为。
      详情请见<xref linkend="autovacuum">。请注意在每个表基础上可以重写这些设置；
      参阅<xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title">。
     </para>

    <variablelist>

     <varlistentry id="guc-autovacuum" xreflabel="autovacuum">
<!--==========================orignal english content==========================
      <term><varname>autovacuum</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>autovacuum</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>autovacuum</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls whether the server should run the
        autovacuum launcher daemon.  This is on by default; however,
        <xref linkend="guc-track-counts"> must also be enabled for
        autovacuum to work.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line; however, autovacuuming can be
        disabled for individual tables by changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        控制服务器是否运行自动清理启动器后台进程。默认为开启，不过要自动清理正常工作还需要启用<xref linkend="guc-track-counts">。该参数只能在<filename>postgresql.conf</>文件或服务器命令行中设置。
        然而，为单表通过修改表存储参数可以禁用自动清理。
       </para>
<!--==========================orignal english content==========================
       <para>
        Note that even when this parameter is disabled, the system
        will launch autovacuum processes if necessary to
        prevent transaction ID wraparound.  See <xref
        linkend="vacuum-for-wraparound"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        注意即使该参数被禁用，系统也会在需要防止事务ID回卷时发起清理进程。详情请见<xref linkend="vacuum-for-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-log-autovacuum-min-duration" xreflabel="log_autovacuum_min_duration">
<!--==========================orignal english content==========================
      <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_autovacuum_min_duration</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>log_autovacuum_min_duration</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Causes each action executed by autovacuum to be logged if it ran for at
        least the specified number of milliseconds.  Setting this to zero logs
        all autovacuum actions. Minus-one (the default) disables logging
        autovacuum actions.  For example, if you set this to
        <literal>250ms</literal> then all automatic vacuums and analyzes that run
        250ms or longer will be logged.  In addition, when this parameter is
        set to any value other than <literal>-1</literal>, a message will be
        logged if an autovacuum action is skipped due to the existence of a
        conflicting lock.  Enabling this parameter can be helpful
        in tracking autovacuum activity.  This parameter can only be set in
        the <filename>postgresql.conf</> file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        如果自动清理运行至少该值所指定的毫秒数，被自动清理执行的每一个动作都会被日志记录。将该参数设置为0会记录所有的自动清理动作。-1（默认值）将禁用对自动清理动作的记录。例如，如果你将它设置为<literal>250ms</literal>，则所有运行250ms或更长时间的自动清理和分析将被记录。此外，当该参数被设置为除<literal>-1</literal>外的任何值时，如果一个自动清理动作由于存在一个锁冲突而被跳过，将会为此记录一个消息。开启这个参数对于追踪自动清理活动非常有用。该设置只能在<filename>postgresql.conf</>文件或者服务器命令行上设置。
        但是可以通过为单表修改表存储参数重写这个设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-max-workers" xreflabel="autovacuum_max_workers">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_max_workers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_max_workers</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_max_workers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum number of autovacuum processes (other than the
        autovacuum launcher) that may be running at any one time.  The default
        is three.  This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        指定能同时运行的自动清理进程（除了自动清理启动器之外）的最大数量。默认值为3。该参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-naptime" xreflabel="autovacuum_naptime">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_naptime</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_naptime</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_naptime</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the minimum delay between autovacuum runs on any given
        database.  In each round the daemon examines the
        database and issues <command>VACUUM</> and <command>ANALYZE</> commands
        as needed for tables in that database.  The delay is measured
        in seconds, and the default is one minute (<literal>1min</>).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        指定自动清理在任意给定数据库上运行的最小延迟。在每一轮中后台进程检查数据库并根据需要为数据库中的表发出<command>VACUUM</>和<command>ANALYZE</>命令。延迟以秒计，且默认值为1分钟（<literal>1min</>）。该参数只能在<filename>postgresql.conf</>文件或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-threshold" xreflabel="autovacuum_vacuum_threshold">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_vacuum_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_threshold</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the minimum number of updated or deleted tuples needed
        to trigger a <command>VACUUM</> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定能在一个表上触发<command>VACUUM</>的被插入、被更新或被删除元组的最小数量。默认值为50个元组。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-threshold" xreflabel="autovacuum_analyze_threshold">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_threshold</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_analyze_threshold</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_threshold</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the minimum number of inserted, updated or deleted tuples
        needed to trigger an <command>ANALYZE</> in any one table.
        The default is 50 tuples.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定能在一个表上触发<command>ANALYZE</>的被插入、被更新或被删除元组的最小数量。默认值为50个元组。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-scale-factor" xreflabel="autovacuum_vacuum_scale_factor">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_scale_factor</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_vacuum_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_scale_factor</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_vacuum_threshold</varname>
        when deciding whether to trigger a <command>VACUUM</>.
        The default is 0.2 (20% of table size).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定一个表尺寸的分数，在决定是否触发<command>VACUUM</>时将它加到<varname>autovacuum_vacuum_threshold</varname>上。默认值为0.2（表尺寸的20%）。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-analyze-scale-factor" xreflabel="autovacuum_analyze_scale_factor">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_scale_factor</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_analyze_scale_factor</varname> (<type>floating point</type>)
      <indexterm>
       <primary><varname>autovacuum_analyze_scale_factor</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies a fraction of the table size to add to
        <varname>autovacuum_analyze_threshold</varname>
        when deciding whether to trigger an <command>ANALYZE</>.
        The default is 0.1 (10% of table size).
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定一个表尺寸的分数，在决定是否触发<command>ANALYZE</>时将它加到<varname>autovacuum_analyze_threshold</varname>上。默认值为0.1（表尺寸的10%）。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-freeze-max-age" xreflabel="autovacuum_freeze_max_age">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_freeze_max_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_freeze_max_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum age (in transactions) that a table's
        <structname>pg_class</>.<structfield>relfrozenxid</> field can
        attain before a <command>VACUUM</> operation is forced
        to prevent transaction ID wraparound within the table.
        Note that the system will launch autovacuum processes to
        prevent wraparound even when autovacuum is otherwise disabled.
       </para>
____________________________________________________________________________-->
       <para>
        指定在一个<command>VACUUM</>操作被强制执行来防止表中事务ID回卷之前，一个表的<structname>pg_class</>.<structfield>relfrozenxid</>域能保持的最大年龄（事务的）。注意即便自动清理被禁用，系统也将发起自动清理进程来阻止回卷。
       </para>

<!--==========================orignal english content==========================
       <para>
        Vacuum also allows removal of old files from the
        <filename>pg_clog</> subdirectory, which is why the default
        is a relatively low 200 million transactions.
        This parameter can only be set at server start, but the setting
        can be reduced for individual tables by
        changing table storage parameters.
        For more information see <xref linkend="vacuum-for-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        清理也允许从<filename>pg_clog</>子目录中移除旧文件，这也是为什么默认值被设置为较低的2亿事务。该参数只能在服务器启动时设置，但是对于个别表可以通过修改存储参数来降低该设置。详见<xref linkend="vacuum-for-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-multixact-freeze-max-age" xreflabel="autovacuum_multixact_freeze_max_age">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_multixact_freeze_max_age</varname> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_multixact_freeze_max_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_multixact_freeze_max_age</varname>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the maximum age (in multixacts) that a table's
        <structname>pg_class</>.<structfield>relminmxid</> field can
        attain before a <command>VACUUM</> operation is forced to
        prevent multixact ID wraparound within the table.
        Note that the system will launch autovacuum processes to
        prevent wraparound even when autovacuum is otherwise disabled.
       </para>
____________________________________________________________________________-->
       <para>
        指定在一个<command>VACUUM</>操作被强制执行来防止表中多事务ID回卷之前，一个表的<structname>pg_class</>.<structfield>relminmxid</>域能保持的最大年龄（多事务的）。注意即便自动清理被禁用，系统也将发起自动清理进程来阻止回卷。
       </para>

<!--==========================orignal english content==========================
       <para>
        Vacuuming multixacts also allows removal of old files from the
        <filename>pg_multixact/members</> and <filename>pg_multixact/offsets</>
        subdirectories, which is why the default is a relatively low
        400 million multixacts.
        This parameter can only be set at server start, but the setting can
        be reduced for individual tables by changing table storage parameters.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        清理多事务也允许从<filename>pg_multixact/members</>和<filename>pg_multixact/offsets</>子目录中移除旧文件，这也是为什么默认值被设置为较低的400万多事务。该参数只能在服务器启动时设置，但是对于个别表可以通过修改存储参数来降低该设置。详见<xref linkend="vacuum-for-multixact-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-delay" xreflabel="autovacuum_vacuum_cost_delay">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_vacuum_cost_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the cost delay value that will be used in automatic
        <command>VACUUM</> operations.  If -1 is specified, the regular
        <xref linkend="guc-vacuum-cost-delay"> value will be used.
        The default value is 20 milliseconds.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定用于自动<command>VACUUM</>操作中的代价延迟值。如果指定-1（默认值），则使用<xref linkend="guc-vacuum-cost-delay">值。默认值为20毫秒。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-autovacuum-vacuum-cost-limit" xreflabel="autovacuum_vacuum_cost_limit">
<!--==========================orignal english content==========================
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>autovacuum_vacuum_cost_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>autovacuum_vacuum_cost_limit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the cost limit value that will be used in automatic
        <command>VACUUM</> operations.  If -1 is specified (which is the
        default), the regular
        <xref linkend="guc-vacuum-cost-limit"> value will be used.  Note that
        the value is distributed proportionally among the running autovacuum
        workers, if there is more than one, so that the sum of the limits for
        each worker does not exceed the value of this variable.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line;
        but the setting can be overridden for individual tables by
        changing table storage parameters.
       </para>
____________________________________________________________________________-->
       <para>
        指定用于自动<command>VACUUM</>操作中的代价限制值。如果指定-1（默认值），则使用<xref linkend="guc-vacuum-cost-limit">值。注意该值被按比例地分配到运行中的自动清理工作者上（如果有多个），因此每一个工作者的限制值之和绝不会超过这个变量中的限制值。该参数只能在<filename>postgresql.conf</>文件或在服务器命令中设置。对个别表可以通过修改存储参数来覆盖该设置。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-client">
<!--==========================orignal english content==========================
    <title>Client Connection Defaults</title>
____________________________________________________________________________-->
    <title>客户端连接默认值</title>

    <sect2 id="runtime-config-client-statement">
<!--==========================orignal english content==========================
     <title>Statement Behavior</title>
____________________________________________________________________________-->
     <title>语句行为</title>
     <variablelist>

     <varlistentry id="guc-search-path" xreflabel="search_path">
<!--==========================orignal english content==========================
      <term><varname>search_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>search_path</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>path</><secondary>for schemas</></>
      </term>
____________________________________________________________________________-->
      <term><varname>search_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>search_path</>配置参数</primary>
      </indexterm>
      <indexterm><primary>path</><secondary>for schemas</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies the order in which schemas are searched
        when an object (table, data type, function, etc.) is referenced by a
        simple name with no schema specified.  When there are objects of
        identical names in different schemas, the one found first
        in the search path is used.  An object that is not in any of the
        schemas in the search path can only be referenced by specifying
        its containing schema with a qualified (dotted) name.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定当一个对象（表、数据类型、函数等）被用一个无模式限定的简单名称引用时，用于进行搜索该对象的模式顺序。当在不同模式中有同名对象时，将使用第一个在搜索路径中被找到的对象。一个不属于搜索路径中任何一个模式的对象只能通过用限定名（带点号）指定包含它的模式来引用。
       </para>

<!--==========================orignal english content==========================
       <para>
        The value for <varname>search_path</varname> must be a comma-separated
        list of schema names.  Any name that is not an existing schema, or is
        a schema for which the user does not have <literal>USAGE</>
        permission, is silently ignored.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>search_path</varname>的值必需是一个逗号分隔的模式名列表。任何不是一个已有模式的名称，或者是一个用户不具有<literal>USAGE</>权限的模式，将被安静地忽略。
       </para>

<!--==========================orignal english content==========================
       <para>
        If one of the list items is the special name
        <literal>$user</literal>, then the schema having the name returned by
        <function>SESSION_USER</> is substituted, if there is such a schema
        and the user has <literal>USAGE</> permission for it.
        (If not, <literal>$user</literal> is ignored.)
       </para>
____________________________________________________________________________-->
       <para>
        如果列表项之一是特殊名<literal>$user</literal>，则具有<function>SESSION_USER</>返回的名字的模式将取代它（如果有这样一个模式并且该用户有该模式的<literal>USAGE</>权限；如果没有，<literal>$user</literal>会被忽略）。
       </para>

<!--==========================orignal english content==========================
       <para>
        The system catalog schema, <literal>pg_catalog</>, is always
        searched, whether it is mentioned in the path or not.  If it is
        mentioned in the path then it will be searched in the specified
        order.  If <literal>pg_catalog</> is not in the path then it will
        be searched <emphasis>before</> searching any of the path items.
       </para>
____________________________________________________________________________-->
       <para>
        系统目录模式<literal>pg_catalog</>总是被搜索，不管它是否在搜索路径中被提及。如果它在路径中被提及，那么它将被按照路径指定的顺序搜索。如果<literal>pg_catalog</>不在路径中，则它将在任何路径项<emphasis>之前</>被搜索。
       </para>

<!--==========================orignal english content==========================
       <para>
        Likewise, the current session's temporary-table schema,
        <literal>pg_temp_<replaceable>nnn</></>, is always searched if it
        exists.  It can be explicitly listed in the path by using the
        alias <literal>pg_temp</><indexterm><primary>pg_temp</></>.  If it is not listed in the path then
        it is searched first (even before <literal>pg_catalog</>).  However,
        the temporary schema is only searched for relation (table, view,
        sequence, etc) and data type names.  It is never searched for
        function or operator names.
       </para>
____________________________________________________________________________-->
       <para>
        同样，当前会话的临时表模式<literal>pg_temp_<replaceable>nnn</></>也总是被搜索（如果存在）。它可以在路径中通过使用别名<literal>pg_temp</><indexterm><primary>pg_temp</></>显式列出。如果在路径中没有列出，那么会首先对它进行搜索（甚至是在<literal>pg_catalog</>之前）。然而，临时模式只被用来搜索关系（表、视图、序列等）和数据类型名。它从不用于搜索函数或操作符名。
       </para>

<!--==========================orignal english content==========================
       <para>
        When objects are created without specifying a particular target
        schema, they will be placed in the first valid schema named in
        <varname>search_path</varname>.  An error is reported if the search
        path is empty.
       </para>
____________________________________________________________________________-->
       <para>
        当对象创建时没有指定一个特定目标模式，它们将被放置在<varname>search_path</varname>中第一个合法模式中。如果搜索路径为空将报告一个错误。
       </para>

<!--==========================orignal english content==========================
       <para>
        The default value for this parameter is
        <literal>"$user", public</literal>.
        This setting supports shared use of a database (where no users
        have private schemas, and all share use of <literal>public</>),
        private per-user schemas, and combinations of these.  Other
        effects can be obtained by altering the default search path
        setting, either globally or per-user.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数的缺省值是<literal>"$user", public</literal>。这种设置支持一个数据库（其中没有用户拥有私有模式，并且所有人共享使用<literal>public</>）   、每个用户私有模式及其组合的共享使用。其它效果可以通过全局或者针对每个用户修改默认搜索路径设置获得。
       </para>

<!--==========================orignal english content==========================
       <para>
        The current effective value of the search path can be examined
        via the <acronym>SQL</acronym> function
        <function>current_schemas</>
        (see <xref linkend="functions-info">).
        This is not quite the same as
        examining the value of <varname>search_path</varname>, since
        <function>current_schemas</> shows how the items
        appearing in <varname>search_path</varname> were resolved.
       </para>
____________________________________________________________________________-->
       <para>
        搜索路径的当前有效值可以通过<acronym>SQL</acronym>函数<function>current_schemas</>检查（见<xref linkend="functions-info">）。它和检查<varname>search_path</varname>的值不太一样，因为<function>current_schemas</>显示出现在<varname>search_path</varname>中的项如何被解析。
       </para>

<!--==========================orignal english content==========================
       <para>
        For more information on schema handling, see <xref linkend="ddl-schemas">.
       </para>
____________________________________________________________________________-->
       <para>
        更多关于模式处理的信息，请见<xref linkend="ddl-schemas">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-row-security" xreflabel="row_security">
<!--==========================orignal english content==========================
      <term><varname>row_security</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>row_security</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>row_security</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>row_security</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable controls whether to raise an error in lieu of applying a
        row security policy.  When set to <literal>on</>, policies apply
        normally.  When set to <literal>off</>, queries fail which would
        otherwise apply at least one policy.  The default is <literal>on</>.
        Change to <literal>off</> where limited row visibility could cause
        incorrect results; for example, <application>pg_dump</> makes that
        change by default.  This variable has no effect on roles which bypass
        every row security policy, to wit, superusers and roles with
        the <literal>BYPASSRLS</> attribute.
       </para>
____________________________________________________________________________-->
       <para>
        此变量控制是否提高错误以代替应用行安全策略。
        当设置为<literal>on</>时，策略往往适用。
        当设置为<literal>off</>时，查询失败，这将应用至少一个策略。
        默认为<literal>on</>。
        在有限的行可见性引起不正确的结果的位置更改为<literal>off</>。
        例如，<application>pg_dump</>使用缺省更改。
        这个变量不影响避开每行安全策略的角色，
        即超级用户和具有<literal>BYPASSRLS</>属性的角色。
       </para>

<!--==========================orignal english content==========================
       <para>
        For more information on row security policies,
        see <xref linkend="SQL-CREATEPOLICY">.
       </para>
____________________________________________________________________________-->
       <para>
        关于行安全策略的更多信息，参阅<xref linkend="SQL-CREATEPOLICY">。
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry id="guc-default-tablespace" xreflabel="default_tablespace">
<!--==========================orignal english content==========================
      <term><varname>default_tablespace</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_tablespace</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>default</></>
      </term>
____________________________________________________________________________-->
      <term><varname>default_tablespace</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_tablespace</>配置参数</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>default</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies the default tablespace in which to create
        objects (tables and indexes) when a <command>CREATE</> command does
        not explicitly specify a tablespace.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定当一个<command>CREATE</>命令没有显式指定一个表空间时，创建对象（表和索引）的默认表空间。
       </para>

<!--==========================orignal english content==========================
       <para>
        The value is either the name of a tablespace, or an empty string
        to specify using the default tablespace of the current database.
        If the value does not match the name of any existing tablespace,
        <productname>PostgreSQL</> will automatically use the default
        tablespace of the current database.  If a nondefault tablespace
        is specified, the user must have <literal>CREATE</> privilege
        for it, or creation attempts will fail.
       </para>
____________________________________________________________________________-->
       <para>
        该值要么是一个表空间的名字，要么是一个指定使用当前数据库默认表空间的空字符串。如果该值和任何现有表空间的名字都不匹配，<productname>PostgreSQL</>将自动使用当前数据库的默认表空间。如果指定了一个非默认的表空间，用户必须对它有<literal>CREATE</>权限，否则创建企图将失败。
       </para>

<!--==========================orignal english content==========================
       <para>
        This variable is not used for temporary tables; for them,
        <xref linkend="guc-temp-tablespaces"> is consulted instead.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量不被用于临时表，对临时表会使用<xref linkend="guc-temp-tablespaces">。
       </para>

<!--==========================orignal english content==========================
       <para>
        This variable is also not used when creating databases.
        By default, a new database inherits its tablespace setting from
        the template database it is copied from.
       </para>
____________________________________________________________________________-->
       <para>
        当创建数据库时也会使用这个变量。默认情况下，一个新数据库会从它的模板数据库继承其表空间设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        For more information on tablespaces,
        see <xref linkend="manage-ag-tablespaces">.
       </para>
____________________________________________________________________________-->
       <para>
        有关表空间的更多的信息，请见<xref linkend="manage-ag-tablespaces">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-temp-tablespaces" xreflabel="temp_tablespaces">
<!--==========================orignal english content==========================
      <term><varname>temp_tablespaces</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>temp_tablespaces</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>temporary</></>
      </term>
____________________________________________________________________________-->
      <term><varname>temp_tablespaces</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>temp_tablespaces</>配置参数</primary>
      </indexterm>
      <indexterm><primary>tablespace</><secondary>temporary</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies tablespaces in which to create temporary
        objects (temp tables and indexes on temp tables) when a
        <command>CREATE</> command does not explicitly specify a tablespace.
        Temporary files for purposes such as sorting large data sets
        are also created in these tablespaces.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定当一个<command>CREATE</>命令没有显式指定一个表空间时，创建临时对象（临时表和临时表上的索引）的默认表空间。用于排序大型数据集的临时文件也被创建在这些表空间中。
       </para>

<!--==========================orignal english content==========================
       <para>
        The value is a list of names of tablespaces.  When there is more than
        one name in the list, <productname>PostgreSQL</> chooses a random
        member of the list each time a temporary object is to be created;
        except that within a transaction, successively created temporary
        objects are placed in successive tablespaces from the list.
        If the selected element of the list is an empty string,
        <productname>PostgreSQL</> will automatically use the default
        tablespace of the current database instead.
       </para>
____________________________________________________________________________-->
       <para>
        该值是一个表空间名字的列表。当列表中有多于一个名称时，每次一个临时对象被创建时<productname>PostgreSQL</>随机选择列表中的一个成员。例外是在一个事务中，连续创建的临时对象被放置在里表中的连续表空间中。如果列表被选中元素是一个空字符串，<productname>PostgreSQL</>将自动使用当前数据库的默认表空间。
       </para>

<!--==========================orignal english content==========================
       <para>
        When <varname>temp_tablespaces</> is set interactively, specifying a
        nonexistent tablespace is an error, as is specifying a tablespace for
        which the user does not have <literal>CREATE</> privilege.  However,
        when using a previously set value, nonexistent tablespaces are
        ignored, as are tablespaces for which the user lacks
        <literal>CREATE</> privilege.  In particular, this rule applies when
        using a value set in <filename>postgresql.conf</>.
       </para>
____________________________________________________________________________-->
       <para>
        当<varname>temp_tablespaces</>被交互式地设置时，指定一个不存在的表空间是一种错误，类似于为用户指定一个不具有<literal>CREATE</>权限的表空间。不过，当使用一个之前设置的值时，不存在的表空间会被忽略，就像用户缺少<literal>CREATE</>权限的表空间一样。特殊地，使用一个在<filename>postgresql.conf</>中设置的值时，这条规则起效。
       </para>

<!--==========================orignal english content==========================
       <para>
        The default value is an empty string, which results in all temporary
        objects being created in the default tablespace of the current
        database.
       </para>
____________________________________________________________________________-->
       <para>
        默认值是一个空字符串，它使得所有临时对象被创建在当前数据库的默认表空间中。
       </para>

<!--==========================orignal english content==========================
       <para>
        See also <xref linkend="guc-default-tablespace">.
       </para>
____________________________________________________________________________-->
       <para>
        参阅<xref linkend="guc-default-tablespace">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-check-function-bodies" xreflabel="check_function_bodies">
<!--==========================orignal english content==========================
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>check_function_bodies</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>check_function_bodies</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>check_function_bodies</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This parameter is normally on. When set to <literal>off</>, it
        disables validation of the function body string during <xref
        linkend="sql-createfunction">.  Disabling validation avoids side
        effects of the validation process and avoids false positives due
        to problems such as forward references.  Set this parameter
        to <literal>off</> before loading functions on behalf of other
        users; <application>pg_dump</> does so automatically.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数通常为打开 。当设置为<literal>off</>时，它禁用<xref linkend="sql-createfunction">期间对函数体字符串的验证。禁用验证避免了验证处理的副作用并且避免了如向前引用导致的伪肯定。在代表其他用户载入函数之前设置这个参数为<literal>off</>；<application>pg_dump</>会自动这样做。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-isolation" xreflabel="default_transaction_isolation">
<!--==========================orignal english content==========================
      <term><varname>default_transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_transaction_isolation</varname> (<type>enum</type>)
      <indexterm>
       <primary>transaction isolation level</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_isolation</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Each SQL transaction has an isolation level, which can be
        either <quote>read uncommitted</quote>, <quote>read
        committed</quote>, <quote>repeatable read</quote>, or
        <quote>serializable</quote>.  This parameter controls the
        default isolation level of each new transaction. The default
        is <quote>read committed</quote>.
       </para>
____________________________________________________________________________-->
       <para>
        每个 SQL 事务都有一个隔离级别，可以是<quote>读未提交</quote>、<quote>读已提交</quote>、<quote>可重复读</quote>或者<quote>可序列化</quote>。这个参数控制每个新事务的默认隔离级别。默认是<quote>读已提交</quote>。
       </para>

<!--==========================orignal english content==========================
       <para>
        Consult <xref linkend="mvcc"> and <xref
        linkend="sql-set-transaction"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        更多信息请参阅<xref linkend="mvcc">和<xref linkend="sql-set-transaction">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-read-only" xreflabel="default_transaction_read_only">
<!--==========================orignal english content==========================
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_transaction_read_only</varname> (<type>boolean</type>)
      <indexterm>
       <primary>read-only transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_read_only</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        A read-only SQL transaction cannot alter non-temporary tables.
        This parameter controls the default read-only status of each new
        transaction. The default is <literal>off</> (read/write).
       </para>
____________________________________________________________________________-->
       <para>
        一个只读的 SQL 事务不能修改非临时表。这个参数控制每个新事务的默认只读状态 。默认是<literal>off</>（读/写）。
       </para>

<!--==========================orignal english content==========================
       <para>
        Consult <xref linkend="sql-set-transaction"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        更多信息请参考<xref linkend="sql-set-transaction">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-transaction-deferrable" xreflabel="default_transaction_deferrable">
<!--==========================orignal english content==========================
      <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_transaction_deferrable</varname> (<type>boolean</type>)
      <indexterm>
       <primary>deferrable transaction</primary>
       <secondary>setting default</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>default_transaction_deferrable</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When running at the <literal>serializable</> isolation level,
        a deferrable read-only SQL transaction may be delayed before
        it is allowed to proceed.  However, once it begins executing
        it does not incur any of the overhead required to ensure
        serializability; so serialization code will have no reason to
        force it to abort because of concurrent updates, making this
        option suitable for long-running read-only transactions.
        </para>
____________________________________________________________________________-->
       <para>
        当运行在<literal>可序列化</>隔离级别时，一个可延迟只读 SQL 事务可以在它被允许继续之前延迟一段时间。但是，一旦它开始执行就不会产生任何用来保证可序列化性的负荷；因此序列化代码将没有任何理由因为并发更新而强制它中断，使得这个选项适合于长时间运行的只读事务。
        </para>

<!--==========================orignal english content==========================
        <para>
        This parameter controls the default deferrable status of each
        new transaction.  It currently has no effect on read-write
        transactions or those operating at isolation levels lower
        than <literal>serializable</>. The default is <literal>off</>.
       </para>
____________________________________________________________________________-->
        <para>
        这个参数控制每个新事务的默认可延迟状态。目前它对读写事务或者那些操作在低于<literal>可序列化</>隔离级别上的事务无效。默认值是<literal>off</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        Consult <xref linkend="sql-set-transaction"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        详情请参阅<xref linkend="sql-set-transaction">。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-replication-role" xreflabel="session_replication_role">
<!--==========================orignal english content==========================
      <term><varname>session_replication_role</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>session_replication_role</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>session_replication_role</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>session_replication_role</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Controls firing of replication-related triggers and rules for the
        current session.  Setting this variable requires
        superuser privilege and results in discarding any previously cached
        query plans.  Possible values are <literal>origin</> (the default),
        <literal>replica</> and <literal>local</>.
        See <xref linkend="sql-altertable"> for
        more information.
       </para>
____________________________________________________________________________-->
       <para>
        为当前会话控制复制相关的触发器和规则的触发。需要超级用户权限才能设置这个变量，并且会导致丢弃任何之前缓存下来的查询计划。可能的值有<literal>origin</>（默认）、<literal>replica</>和<literal>local</>。详见<xref linkend="sql-altertable">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-statement-timeout" xreflabel="statement_timeout">
<!--==========================orignal english content==========================
      <term><varname>statement_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>statement_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>statement_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>statement_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Abort any statement that takes more than the specified number of
        milliseconds, starting from the time the command arrives at the server
        from the client.  If <varname>log_min_error_statement</> is set to
        <literal>ERROR</> or lower, the statement that timed out will also be
        logged.  A value of zero (the default) turns this off.
       </para>
____________________________________________________________________________-->
       <para>
        中止任何使用了超过指定毫秒数的语句，从命令到达服务器开始计时。如果<varname>log_min_error_statement</>被设置为<literal>ERROR</>或更低，语句如果超时也会被记录。一个零值（默认）将关闭这个参数。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting <varname>statement_timeout</> in
        <filename>postgresql.conf</> is not recommended because it would
        affect all sessions.
       </para>
____________________________________________________________________________-->
       <para>
        我们不推荐在<filename>postgresql.conf</>中设置<varname>statement_timeout</>，因为它会影响所有会话。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lock-timeout" xreflabel="lock_timeout">
<!--==========================orignal english content==========================
      <term><varname>lock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>lock_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>lock_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Abort any statement that waits longer than the specified number of
        milliseconds while attempting to acquire a lock on a table, index,
        row, or other database object.  The time limit applies separately to
        each lock acquisition attempt.  The limit applies both to explicit
        locking requests (such as <command>LOCK TABLE</>, or <command>SELECT
        FOR UPDATE</> without <literal>NOWAIT</>) and to implicitly-acquired
        locks.  If <varname>log_min_error_statement</> is set to
        <literal>ERROR</> or lower, the statement that timed out will be
        logged.  A value of zero (the default) turns this off.
       </para>
____________________________________________________________________________-->
       <para>
        如果任何语句在试图获取表、索引、行或其他数据库对象上的锁时等到超过指定的毫秒数，该语句将被中止。该时间限制独立地应用于每一次锁获取尝试。该限制会应用到显式锁定请求（如<command>LOCK TABLE</>或不带<literal>NOWAIT</>的<command>SELECT FOR UPDATE</> without <literal>NOWAIT</>）和隐式获得的锁。如果<varname>log_min_error_statement</>被设置为<literal>ERROR</>或更低，超时的语句会被记录。一个零值（默认）将关闭这个参数。
       </para>

<!--==========================orignal english content==========================
       <para>
        Unlike <varname>statement_timeout</>, this timeout can only occur
        while waiting for locks.  Note that if <varname>statement_timeout</>
        is nonzero, it is rather pointless to set <varname>lock_timeout</> to
        the same or larger value, since the statement timeout would always
        trigger first.
       </para>
____________________________________________________________________________-->
       <para>
        与<varname>statement_timeout</>不同，这个超时只在等待锁时发生。注意如果<varname>statement_timeout</>为非零，设置<varname>lock_timeout</>为相同或更大的值没有意义，因为事务超时将总是第一个被触发。
       </para>

<!--==========================orignal english content==========================
       <para>
        Setting <varname>lock_timeout</> in
        <filename>postgresql.conf</> is not recommended because it would
        affect all sessions.
       </para>
____________________________________________________________________________-->
       <para>
        我们不推荐在<filename>postgresql.conf</>中设置<varname>lock_timeout</>，因为它会影响所有会话。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="guc-idle-in-transaction-session-timeout" xreflabel="idle_in_transaction_session_timeout">
<!--==========================orignal english content==========================
      <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>idle_in_transaction_session_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>idle_in_transaction_session_timeout</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
       Terminate any session with an open transaction that has been idle for
       longer than the specified duration in milliseconds. This allows any
       locks held by that session to be released and the connection slot to be reused;
       it also allows tuples visible only to this transaction to be vacuumed.  See
       <xref linkend="routine-vacuuming"> for more details about this.
       </para>
____________________________________________________________________________-->
       <para>
       终止任何已经闲置超过这个参数所指定的时间（以毫秒计）的打开事务的会话。
       这使得该会话所持有的任何锁被释放，并且其所持有的连接槽可以被重用，
       它也允许只对这个事务可见的元组被清理。有关于此的详情请见
       <xref linkend="routine-vacuuming">。
       </para>
<!--==========================orignal english content==========================
       <para>
       The default value of 0 disables this feature.
       </para>
____________________________________________________________________________-->
       <para>
       默认值 0 会禁用这个特性。

       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-table-age" xreflabel="vacuum_freeze_table_age">
<!--==========================orignal english content==========================
      <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>vacuum_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_table_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        <command>VACUUM</> performs an aggressive scan if the table's
        <structname>pg_class</>.<structfield>relfrozenxid</> field has reached
        the age specified by this setting.  An aggressive scan differs from
        a regular <command>VACUUM</> in that it visits every page that might
        contain unfrozen XIDs or MXIDs, not just those that might contain dead
        tuples.  The default is 150 million transactions.  Although users can
        set this value anywhere from zero to two billions, <command>VACUUM</>
        will silently limit the effective value to 95% of
        <xref linkend="guc-autovacuum-freeze-max-age">, so that a
        periodical manual <command>VACUUM</> has a chance to run before an
        anti-wraparound autovacuum is launched for the table. For more
        information see
        <xref linkend="vacuum-for-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        当表的<structname>pg_class</>.<structfield>relfrozenxid</>域达到该设置指定的年龄时，<command>VACUUM</>会执行一次全表扫描。默认值是 1.5 亿个事务。尽管用户可以把这个值设置为从 0 到 20 亿，<command>VACUUM</>会悄悄地将有效值设置为<xref linkend="guc-autovacuum-freeze-max-age">值的95%，因此在表上启动一次反回卷自动清理之前有机会进行一次定期手动<command>VACUUM</>。更多信息请见<xref linkend="vacuum-for-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-freeze-min-age" xreflabel="vacuum_freeze_min_age">
<!--==========================orignal english content==========================
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>vacuum_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_freeze_min_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the cutoff age (in transactions) that <command>VACUUM</>
        should use to decide whether to freeze row versions
        while scanning a table.
        The default is 50 million transactions.  Although
        users can set this value anywhere from zero to one billion,
        <command>VACUUM</> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-freeze-max-age">, so
        that there is not an unreasonably short time between forced
        autovacuums.  For more information see <xref
        linkend="vacuum-for-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        指定<command>VACUUM</>在扫描表时用来决定是否冻结行版本的切断年龄（以事务计）。默认值是 5 千万个事务。尽管用户可以将这个值设置为从 0 到 10 亿，<command>VACUUM</>会悄悄地将有效值设置为<xref linkend="guc-autovacuum-freeze-max-age">值的一半，这样在强制执行的自动清理之间不会有过短的时间间隔。更多信息请见<xref linkend="vacuum-for-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-table-age" xreflabel="vacuum_multixact_freeze_table_age">
<!--==========================orignal english content==========================
      <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_table_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>vacuum_multixact_freeze_table_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_table_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        <command>VACUUM</> performs an aggressive scan if the table's
        <structname>pg_class</>.<structfield>relminmxid</> field has reached
        the age specified by this setting.  An aggressive scan differs from
        a regular <command>VACUUM</> in that it visits every page that might
        contain unfrozen XIDs or MXIDs, not just those that might contain dead
        tuples.  The default is 150 million multixacts.
        Although users can set this value anywhere from zero to two billions,
        <command>VACUUM</> will silently limit the effective value to 95% of
        <xref linkend="guc-autovacuum-multixact-freeze-max-age">, so that a
        periodical manual <command>VACUUM</> has a chance to run before an
        anti-wraparound is launched for the table.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        如果表的<structname>pg_class</>.<structfield>relminmxid</>域超过了这个设置指定的年龄，<command>VACUUM</>会执行一次全表扫描。默认值是 1.5 亿个组合事务。尽管用户可以把这个值设置为从 0 到 20 亿，<command>VACUUM</>会悄悄地将有效值设置为<xref linkend="guc-autovacuum-multixact-freeze-max-age">值的95%，因此在表上启动一次反回卷自动清理之前有机会进行一次定期手动<command>VACUUM</>。更多信息请见<xref linkend="vacuum-for-multixact-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-vacuum-multixact-freeze-min-age" xreflabel="vacuum_multixact_freeze_min_age">
<!--==========================orignal english content==========================
      <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_min_age</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>vacuum_multixact_freeze_min_age</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>vacuum_multixact_freeze_min_age</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Specifies the cutoff age (in multixacts) that <command>VACUUM</>
        should use to decide whether to replace multixact IDs with a newer
        transaction ID or multixact ID while scanning a table.  The default
        is 5 million multixacts.
        Although users can set this value anywhere from zero to one billion,
        <command>VACUUM</> will silently limit the effective value to half
        the value of <xref linkend="guc-autovacuum-multixact-freeze-max-age">,
        so that there is not an unreasonably short time between forced
        autovacuums.
        For more information see <xref linkend="vacuum-for-multixact-wraparound">.
       </para>
____________________________________________________________________________-->
       <para>
        指定<command>VACUUM</>在扫描表时用来决定是否把组合事务 ID 替换为一个更新的事务 ID 或组合事务 ID 的切断年龄（以组合事务计）。默认值是 5 千万个组合事务。尽管用户可以将这个值设置为从 0 到 10 亿，<command>VACUUM</>会悄悄地将有效值设置为<xref linkend="guc-autovacuum-multixact-freeze-max-age">值的一半，这样在强制执行的自动清理之间不会有过短的时间间隔。更多信息请见<xref linkend="vacuum-for-multixact-wraparound">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-bytea-output" xreflabel="bytea_output">
<!--==========================orignal english content==========================
      <term><varname>bytea_output</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>bytea_output</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>bytea_output</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>bytea_output</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the output format for values of type <type>bytea</type>.
        Valid values are <literal>hex</literal> (the default)
        and <literal>escape</literal> (the traditional PostgreSQL
        format).  See <xref linkend="datatype-binary"> for more
        information.  The <type>bytea</type> type always
        accepts both formats on input, regardless of this setting.
       </para>
____________________________________________________________________________-->
       <para>
        设置<type>bytea</type>类型值的输出格式。有效值是<literal>hex</literal>（默认）和 <literal>escape</literal>（传统的 PostgreSQL 格式）。详见<xref linkend="datatype-binary">。不管这个设置的值如何，<type>bytea</type>类型总是接受这两种格式的输入。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmlbinary" xreflabel="xmlbinary">
<!--==========================orignal english content==========================
      <term><varname>xmlbinary</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmlbinary</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>xmlbinary</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmlbinary</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets how binary values are to be encoded in XML.  This applies
        for example when <type>bytea</type> values are converted to
        XML by the functions <function>xmlelement</function> or
        <function>xmlforest</function>.  Possible values are
        <literal>base64</literal> and <literal>hex</literal>, which
        are both defined in the XML Schema standard.  The default is
        <literal>base64</literal>.  For further information about
        XML-related functions, see <xref linkend="functions-xml">.
       </para>
____________________________________________________________________________-->
       <para>
        设置二进制值如何被编码为 XML。例如，这适用于通过<function>xmlelement</function>函数或<function>xmlforest</function>函数将<type>bytea</type>值转换到 XML 值。可能的值有<literal>base64</literal>和<literal>hex</literal>，它们都是用 XML 模式标准定义的。默认值是<literal>base64</literal>。更多关于 XML 相关函数的信息可参阅<xref linkend="functions-xml">。
       </para>

<!--==========================orignal english content==========================
       <para>
        The actual choice here is mostly a matter of taste,
        constrained only by possible restrictions in client
        applications.  Both methods support all possible values,
        although the hex encoding will be somewhat larger than the
        base64 encoding.
       </para>
____________________________________________________________________________-->
       <para>
        这里的实际选择都是根据爱好做出的，只受客户端应用中可能存在的限制的约束。两种方法都支持所有可能的值，尽管十六进制编码将比 base64 编码更大。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-xmloption" xreflabel="xmloption">
<!--==========================orignal english content==========================
      <term><varname>xmloption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmloption</> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>xmloption</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>xmloption</>配置参数</primary>
      </indexterm>
      <indexterm>
       <primary><varname>SET XML OPTION</></primary>
      </indexterm>
      <indexterm>
       <primary>XML option</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets whether <literal>DOCUMENT</literal> or
        <literal>CONTENT</literal> is implicit when converting between
        XML and character string values.  See <xref
        linkend="datatype-xml"> for a description of this.  Valid
        values are <literal>DOCUMENT</literal> and
        <literal>CONTENT</literal>.  The default is
        <literal>CONTENT</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        当在XML和字符串值之间进行转换时，无论设置DOCUMENT或 CONTENT都是隐式的。可参阅Section 8.13。 有效值是DOCUMENT和CONTENT。 缺省值是CONTENT。
        当在 XML 和字符串值之间进行转换时，设置<literal>DOCUMENT</literal>或<literal>CONTENT</literal>都是隐式的。详见<xref linkend="datatype-xml">。有效值是<literal>DOCUMENT</literal>和<literal>CONTENT</literal>。默认值是<literal>CONTENT</literal>。
       </para>

<!--==========================orignal english content==========================
       <para>
        According to the SQL standard, the command to set this option is
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
        This syntax is also available in PostgreSQL.
       </para>
____________________________________________________________________________-->
       <para>
        根据 SQL 标准，设置这个选项的命令是：
<synopsis>
SET XML OPTION { DOCUMENT | CONTENT };
</synopsis>
        这种语法在 PostgreSQL 也可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-pending-list-limit" xreflabel="gin_pending_list_limit">
<!--==========================orignal english content==========================
      <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>gin_pending_list_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_pending_list_limit</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the maximum size of the GIN pending list which is used
        when <literal>fastupdate</> is enabled. If the list grows
        larger than this maximum size, it is cleaned up by moving
        the entries in it to the main GIN data structure in bulk.
        The default is four megabytes (<literal>4MB</>). This setting
        can be overridden for individual GIN indexes by changing
        index storage parameters.
         See <xref linkend="gin-fast-update"> and <xref linkend="gin-tips">
         for more information.
       </para>
____________________________________________________________________________-->
       <para>
         当启用<literal>fastupdate</>时，设置正在使用的GIN挂起列表的最大尺寸。
         如果列表增长大于这个最大尺寸，
         通过移动块存储的主要的GIN数据结构项进行清理。
         默认值为四字节(<literal>4MB</>)。
         为单个GIN索引改变索引存储参数来重写此设置。
         参阅<xref linkend="gin-fast-update">和<xref linkend="gin-tips">
         获取更多信息。
       </para>
      </listitem>
     </varlistentry>
     
     </variablelist>
    </sect2>
     <sect2 id="runtime-config-client-format">
<!--==========================orignal english content==========================
     <title>Locale and Formatting</title>
____________________________________________________________________________-->
     <title>区域和格式化</title>

     <variablelist>

     <varlistentry id="guc-datestyle" xreflabel="DateStyle">
<!--==========================orignal english content==========================
      <term><varname>DateStyle</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>DateStyle</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>DateStyle</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>DateStyle</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the display format for date and time values, as well as the
        rules for interpreting ambiguous date input values. For
        historical reasons, this variable contains two independent
        components: the output format specification (<literal>ISO</>,
        <literal>Postgres</>, <literal>SQL</>, or <literal>German</>)
        and the input/output specification for year/month/day ordering
        (<literal>DMY</>, <literal>MDY</>, or <literal>YMD</>). These
        can be set separately or together. The keywords <literal>Euro</>
        and <literal>European</> are synonyms for <literal>DMY</>; the
        keywords <literal>US</>, <literal>NonEuro</>, and
        <literal>NonEuropean</> are synonyms for <literal>MDY</>. See
        <xref linkend="datatype-datetime"> for more information. The
        built-in default is <literal>ISO, MDY</>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        behavior of the chosen <varname>lc_time</varname> locale.
       </para>
____________________________________________________________________________-->
       <para>
        设置日期和时间值的显示格式，以及解释有歧义的日期输入值的规则。由于历史原因， 这个变量包含两个独立的部分：输出格式声明（<literal>ISO</>、<literal>Postgres</>、<literal>SQL</>或<literal>German</>）、 输入/输出的年/月/日顺序（<literal>DMY</>、<literal>MDY</>或<literal>YMD</>）。这些可以被独立设置或者一起设置。关键字<literal>Euro</>和<literal>European</>是<literal>DMY</>的同义词；关键字<literal>US</>、<literal>NonEuro</>和<literal>NonEuropean</>是<literal>MDY</>的同义词。详见<xref linkend="datatype-datetime">。内建默认值是<literal>ISO, MDY</>，但是<application>initdb</application>将用对应于选中的<varname>lc_time</varname>区域行为的设置初始化配置文件。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-intervalstyle" xreflabel="IntervalStyle">
<!--==========================orignal english content==========================
      <term><varname>IntervalStyle</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>IntervalStyle</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>IntervalStyle</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>IntervalStyle</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the display format for interval values.
        The value <literal>sql_standard</> will produce
        output matching <acronym>SQL</acronym> standard interval literals.
        The value <literal>postgres</> (which is the default) will produce
        output matching <productname>PostgreSQL</> releases prior to 8.4
        when the <xref linkend="guc-datestyle">
        parameter was set to <literal>ISO</>.
        The value <literal>postgres_verbose</> will produce output
        matching <productname>PostgreSQL</> releases prior to 8.4
        when the <varname>DateStyle</>
        parameter was set to non-<literal>ISO</> output.
        The value <literal>iso_8601</> will produce output matching the time
        interval <quote>format with designators</> defined in section
        4.4.3.2 of ISO 8601.
       </para>
____________________________________________________________________________-->
       <para>
        设置间隔值的显示格式。值<literal>sql_standard</>将产生匹配 SQL 标准间隔文本的输出。当<xref linkend="guc-datestyle">参数被设置为<literal>ISO</>时，值<literal>postgres</>（默认）将产生匹配<productname>PostgreSQL</>发行 8.4 之前的输出。当<varname>DateStyle</>参数被设置为非<literal>ISO</>输出时，值<literal>postgres_verbose</>会产生匹配<productname>PostgreSQL</>发行 8.4 之前的输出。值<literal>iso_8601</>会产生匹配在 ISO 8601 的 4.4.3.2 节中定义的<quote>带标志符格式</>的时间间隔的输出。
       </para>
<!--==========================orignal english content==========================
       <para>
        The <varname>IntervalStyle</> parameter also affects the
        interpretation of ambiguous interval input.  See
        <xref linkend="datatype-interval-input"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        <varname>IntervalStyle</>参数也可以影响对有歧义的间隔输入的解释。详见<xref linkend="datatype-interval-input">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone" xreflabel="TimeZone">
<!--==========================orignal english content==========================
      <term><varname>TimeZone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>TimeZone</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone</></>
      </term>
____________________________________________________________________________-->
      <term><varname>TimeZone</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>TimeZone</>配置参数</primary>
      </indexterm>
      <indexterm><primary>time zone</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the time zone for displaying and interpreting time stamps.
        The built-in default is <literal>GMT</>, but that is typically
        overridden in <filename>postgresql.conf</>; <application>initdb</>
        will install a setting there corresponding to its system environment.
        See <xref linkend="datatype-timezones"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        设置用于显示和解释时间戳的时区。内建默认值是<literal>GMT</>，但是它通常会在<filename>postgresql.conf</>中被覆盖；<application>initdb</>将安装一个对应于其系统环境的设置。详见<xref linkend="datatype-timezones">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-timezone-abbreviations" xreflabel="timezone_abbreviations">
<!--==========================orignal english content==========================
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>timezone_abbreviations</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>time zone names</></>
      </term>
____________________________________________________________________________-->
      <term><varname>timezone_abbreviations</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>timezone_abbreviations</>配置参数</primary>
      </indexterm>
      <indexterm><primary>time zone names</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the collection of time zone abbreviations that will be accepted
        by the server for datetime input.  The default is <literal>'Default'</>,
        which is a collection that works in most of the world; there are
        also <literal>'Australia'</literal> and <literal>'India'</literal>,
        and other collections can be defined for a particular installation.
        See <xref linkend="datetime-config-files"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        设置服务器接受的日期时间输入中使用的时区缩写集合。默认值为<literal>'Default'</>， 这个集合在全世界大多数地方都能工作。也还有<literal>'Australia'</literal>和<literal>'India'</literal>，以及可能为一种特定安装定义的其他集合。详见<xref linkend="datetime-config-files">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-extra-float-digits" xreflabel="extra_float_digits">
<!--==========================orignal english content==========================
      <term><varname>extra_float_digits</varname> (<type>integer</type>)
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>extra_float_digits</varname> (<type>integer</type>)
      <indexterm>
       <primary>significant digits</primary>
      </indexterm>
      <indexterm>
       <primary>floating-point</primary>
       <secondary>display</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>extra_float_digits</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This parameter adjusts the number of digits displayed for
        floating-point values, including <type>float4</>, <type>float8</>,
        and geometric data types.  The parameter value is added to the
        standard number of digits (<literal>FLT_DIG</> or <literal>DBL_DIG</>
        as appropriate).  The value can be set as high as 3, to include
        partially-significant digits; this is especially useful for dumping
        float data that needs to be restored exactly.  Or it can be set
        negative to suppress unwanted digits.
        See also <xref linkend="datatype-float">.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数为浮点值调整显示的位数，包括<type>float4</>、<type>float8</>以及几何数据类型。参数值被加在标准的位数（<literal>FLT_DIG</>或<literal>DBL_DIG</>，视情况而定）上。该值最高可以被设置为 3 来包括部分有效位；这特别有助于转储需要被准确恢复的否点数据。或者它可以被设置为负值来消除不需要的位。另请参见<xref linkend="datatype-float">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-client-encoding" xreflabel="client_encoding">
<!--==========================orignal english content==========================
      <term><varname>client_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>client_encoding</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</></>
      </term>
____________________________________________________________________________-->
      <term><varname>client_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>client_encoding</>配置参数</primary>
      </indexterm>
      <indexterm><primary>character set</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the client-side encoding (character set).
        The default is to use the database encoding.
        The character sets supported by the <productname>PostgreSQL</productname>
        server are described in <xref linkend="multibyte-charset-supported">.
       </para>
____________________________________________________________________________-->
       <para>
        设置客户端编码（字符集）。默认使用数据库编码。<productname>PostgreSQL</productname>服务器所支持的字符集在<xref linkend="multibyte-charset-supported">中描述。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-messages" xreflabel="lc_messages">
<!--==========================orignal english content==========================
      <term><varname>lc_messages</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_messages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_messages</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_messages</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the language in which messages are displayed.  Acceptable
        values are system-dependent; see <xref linkend="locale"> for
        more information.  If this variable is set to the empty string
        (which is the default) then the value is inherited from the
        execution environment of the server in a system-dependent way.
       </para>
____________________________________________________________________________-->
       <para>
        设置消息显示的语言。可接受的值是系统相关的；详见<xref linkend="locale">。如果这个变量被设置为空字符串（默认），那么该值将以一种系统相关的方式从服务器的执行环境中继承。
       </para>

<!--==========================orignal english content==========================
       <para>
        On some systems, this locale category does not exist.  Setting
        this variable will still work, but there will be no effect.
        Also, there is a chance that no translated messages for the
        desired language exist.  In that case you will continue to see
        the English messages.
       </para>
____________________________________________________________________________-->
       <para>
        在一些系统上，这个区域分类并不存在。仍然可以设置这个变量，只是不会有任何效果。同样，所期望语言的翻译消息也可能不存在。在这种情况下，你将仍然继续看到英文消息。
       </para>

<!--==========================orignal english content==========================
       <para>
        Only superusers can change this setting, because it affects the
        messages sent to the server log as well as to the client, and
        an improper value might obscure the readability of the server
        logs.
       </para>
____________________________________________________________________________-->
       <para>
        只有超级用户可以改变这个设置。因为它同时影响发送到服务器日志和客户端的消息。一个不正确的值可能会降低服务器日志的可读性。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-monetary" xreflabel="lc_monetary">
<!--==========================orignal english content==========================
      <term><varname>lc_monetary</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_monetary</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_monetary</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_monetary</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the locale to use for formatting monetary amounts, for
        example with the <function>to_char</function> family of
        functions.  Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
____________________________________________________________________________-->
       <para>
        设置用于格式化货币量的区域，例如用<function>to_char</function>函数族。可接受的值是系统相关的；详见<xref linkend="locale">。如果这个变量被设置为空字符串（默认），那么该值将以一种系统相关的方式从服务器的执行环境中继承。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-numeric" xreflabel="lc_numeric">
<!--==========================orignal english content==========================
      <term><varname>lc_numeric</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_numeric</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_numeric</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_numeric</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the locale to use for formatting numbers, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
____________________________________________________________________________-->
       <para>
        设置用于格式化数字的区域，例如用<function>to_char</function>函数族。可接受的值是系统相关的；详见<xref linkend="locale">。如果这个变量被设置为空字符串（默认），那么该值将以一种系统相关的方式从服务器的执行环境中继承。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-time" xreflabel="lc_time">
<!--==========================orignal english content==========================
      <term><varname>lc_time</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_time</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_time</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_time</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Sets the locale to use for formatting dates and times, for example
        with the <function>to_char</function> family of
        functions. Acceptable values are system-dependent; see <xref
        linkend="locale"> for more information.  If this variable is
        set to the empty string (which is the default) then the value
        is inherited from the execution environment of the server in a
        system-dependent way.
       </para>
____________________________________________________________________________-->
       <para>
        设置用于格式化日期和时间的区域，例如用<function>to_char</function>函数族。可接受的值是系统相关的；详见<xref linkend="locale">。如果这个变量被设置为空字符串（默认），那么该值将以一种系统相关的方式从服务器的执行环境中继承。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-text-search-config" xreflabel="default_text_search_config">
<!--==========================orignal english content==========================
      <term><varname>default_text_search_config</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_text_search_config</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_text_search_config</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>default_text_search_config</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Selects the text search configuration that is used by those variants
        of the text search functions that do not have an explicit argument
        specifying the configuration.
        See <xref linkend="textsearch"> for further information.
        The built-in default is <literal>pg_catalog.simple</>, but
        <application>initdb</application> will initialize the
        configuration file with a setting that corresponds to the
        chosen <varname>lc_ctype</varname> locale, if a configuration
        matching that locale can be identified.
       </para>
____________________________________________________________________________-->
       <para>
        选择被那些没有显式参数指定配置的文本搜索函数变体使用的文本搜索配置。详见<xref linkend="textsearch">。内建默认值是<literal>pg_catalog.simple</>，但是如果能够标识一个匹配区域的配置，<application>initdb</application>将用对应于选中的<varname>lc_ctype</varname>区域的设置初始化配置文件。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>

    </sect2>

     <sect2 id="runtime-config-client-preload">
<!--==========================orignal english content==========================
     <title>Shared Library Preloading</title>
____________________________________________________________________________-->
     <title>共享库预载入</title>

<!--==========================orignal english content==========================
     <para>
      Several settings are available for preloading shared libraries into the
      server, in order to load additional functionality or achieve performance
      benefits.  For example, a setting of
      <literal>'$libdir/mylib'</literal> would cause
      <literal>mylib.so</> (or on some platforms,
      <literal>mylib.sl</>) to be preloaded from the installation's standard
      library directory.  The differences between the settings are when they
      take effect and what privileges are required to change them.
     </para>
____________________________________________________________________________-->
     <para>
      为了载入附加的功能或者达到提高性能的目的，可用多个设置来预先载入共享库到服务器中。
      例如<literal>'$libdir/mylib'</literal>设置可能会导致<literal>mylib.so</>（或者某些平台上的<literal>mylib.sl</>）从安装的标准库目录被预装载。这些设置之间的区别在于生效的时间以及改变它们所需的特权。
     </para>

<!--==========================orignal english content==========================
     <para>
      <productname>PostgreSQL</productname> procedural language libraries can
      be preloaded in this way, typically by using the
      syntax <literal>'$libdir/plXXX'</literal> where
      <literal>XXX</literal> is <literal>pgsql</>, <literal>perl</>,
      <literal>tcl</>, or <literal>python</>.
     </para>
____________________________________________________________________________-->
     <para>
      可以用这个方法预装载<productname>PostgreSQL</productname>的过程语言库，通常是使用<literal>'$libdir/plXXX'</literal>语法，其中的<literal>XXX</literal>是<literal>pgsql</>、<literal>perl</>、<literal>tcl</>或<literal>python</>。
     </para>

<!--==========================orignal english content==========================
     <para>
      For each parameter, if more than one library is to be loaded, separate
      their names with commas.  All library names are converted to lower case
      unless double-quoted.
     </para>
____________________________________________________________________________-->
     <para>
      对于每个参数，如果要载入多于一个库，用逗号分隔它们的名称。除非被双引号包围，所有的库名
      称会被转换成小写形式。
     </para>

<!--==========================orignal english content==========================
     <para>
      Only shared libraries specifically intended to be used with PostgreSQL
      can be loaded this way.  Every PostgreSQL-supported library has
      a <quote>magic block</> that is checked to guarantee compatibility.  For
      this reason, non-PostgreSQL libraries cannot be loaded in this way.  You
      might be able to use operating-system facilities such
      as <envar>LD_PRELOAD</envar> for that.
     </para>
____________________________________________________________________________-->
     <para>
      只有特别为与PostgreSQL一起使用设计的共享库才能以这种方式载入。每一个PostgreSQL支持
      的库都有一个<quote>魔法块</>，它会被检查以保证兼容性。由于这个原因，非PostgreSQL无法
      以这种方式被载入。你可能可以使用操作系统的工具（如<envar>LD_PRELOAD</envar>）载入它。
     </para>

<!--==========================orignal english content==========================
     <para>
      In general, refer to the documentation of a specific module for the
      recommended way to load that module.
     </para>
____________________________________________________________________________-->
     <para>
      总之，请参考特定模块的文档来用推荐的方法载入它。
     </para>

     <variablelist>
     <varlistentry id="guc-local-preload-libraries" xreflabel="local_preload_libraries">
<!--==========================orignal english content==========================
      <term><varname>local_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>local_preload_libraries</> configuration parameter</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</></primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>local_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>local_preload_libraries</>配置参数</primary>
      </indexterm>
      <indexterm>
       <primary><filename>$libdir/plugins</></primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定一个或者多个要在连接开始时预载入的共享库。
        这个参数在连接启动时起作用，对后续更改没有影响。
        如果指定的库没有找到，连接尝试将会失败。    
       </para>

<!--==========================orignal english content==========================
       <para>
        This option can be set by any user.  Because of that, the libraries
        that can be loaded are restricted to those appearing in the
        <filename>plugins</> subdirectory of the installation's
        standard library directory.  (It is the database administrator's
        responsibility to ensure that only <quote>safe</> libraries
        are installed there.)  Entries in <varname>local_preload_libraries</>
        can specify this directory explicitly, for example
        <literal>$libdir/plugins/mylib</literal>, or just specify
        the library name &mdash; <literal>mylib</literal> would have
        the same effect as <literal>$libdir/plugins/mylib</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        任何用户都能设置这个选项。正因为如此，能被这样载入的库被严格限制为出现于安装的标准库
        目录中<filename>plugins</>子目录下的共享库（保证只有<quote>安全的</>库被安装到
        这里是数据库管理员的责任）。<varname>local_preload_libraries</>中的项可以显式
        指定这个目录，例如<literal>$libdir/plugins/mylib</literal>，或者只是指定库的
        名称 &mdash; <literal>mylib</literal> 和
        <literal>$libdir/plugins/mylib</literal>的效果是相同的。
       </para>

<!--==========================orignal english content==========================
       <para>
        The intent of this feature is to allow unprivileged users to load
        debugging or performance-measurement libraries into specific sessions
        without requiring an explicit <command>LOAD</> command.  To that end,
        it would be typical to set this parameter using
        the <envar>PGOPTIONS</envar> environment variable on the client or by
        using
        <command>ALTER ROLE SET</>.
       </para>
____________________________________________________________________________-->
       <para>
        这个功能的目的是允许非特权用户加载调试或性能测量库到特定会话，
        而不需要显式的<command>LOAD</>命令。
        为达到此目的，典型的使用<envar>PGOPTIONS</envar>环境变量或使用<command>ALTER ROLE SET</>设置这个参数。
       </para>
       
<!--==========================orignal english content==========================
       <para>
        However, unless a module is specifically designed to be used in this way by
        non-superusers, this is usually not the right setting to use.  Look
        at <xref linkend="guc-session-preload-libraries"> instead.
       </para>
____________________________________________________________________________-->
       <para>
        除非一个模块被特别设计成由非超级用户以这种方式使用，通常不推荐使用这个设置。应该看看
        <xref linkend="guc-session-preload-libraries">。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-session-preload-libraries" xreflabel="session_preload_libraries">
<!--==========================orignal english content==========================
      <term><varname>session_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>session_preload_libraries</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>session_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>session_preload_libraries</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies one or more shared libraries that are to be
        preloaded at connection start.  Only superusers can change this setting.
        The parameter value only takes effect at the start of the connection.
        Subsequent changes have no effect.  If a specified library is not
        found, the connection attempt will fail.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定一个或者多个要在连接开始时预载入的共享库。只有超级用户更够更改这个设置。
        这个参数只在连接开始时起效。后续的改变没有效果。如果指定的库没有找到，连接尝试将会失败。
       </para>

<!--==========================orignal english content==========================
       <para>
        The intent of this feature is to allow debugging or
        performance-measurement libraries to be loaded into specific sessions
        without an explicit
        <command>LOAD</> command being given.  For
        example, <xref linkend="auto-explain"> could be enabled for all
        sessions under a given user name by setting this parameter
        with <command>ALTER ROLE SET</>.  Also, this parameter can be changed
        without restarting the server (but changes only take effect when a new
        session is started), so it is easier to add new modules this way, even
        if they should apply to all sessions.
       </para>
____________________________________________________________________________-->
       <para>
        这个特性的意图是允许在特定会话中载入调试用的或者测量性能的库，而不需要显式的给出一个
        <command>LOAD</>命令。例如，通过用<command>ALTER ROLE SET</>设置这个参数可以
        为一个给定用户名下的所有会话启用<xref linkend="auto-explain">。还有，无需重启
        服务器就能更改这个参数（但是只有新会话启动时才会生效），这样可以以这种方式更容易地增
        加新模块，即便它们会应用到所有会话。
       </para>

<!--==========================orignal english content==========================
       <para>
        Unlike <xref linkend="guc-shared-preload-libraries">, there is no large
        performance advantage to loading a library at session start rather than
        when it is first used.  There is some advantage, however, when
        connection pooling is used.
       </para>
____________________________________________________________________________-->
       <para>
        和<xref linkend="guc-shared-preload-libraries">不同，相对于在库被第一次使用
        时载入它，在会话开始时载入库并没有什么性能优势。不过，当使用连接池时这样做还是有一些
        优势。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-shared-preload-libraries" xreflabel="shared_preload_libraries">
<!--==========================orignal english content==========================
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>shared_preload_libraries</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>shared_preload_libraries</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This variable specifies one or more shared libraries to be preloaded at
        server start.  This parameter can only be set at server
        start.  If a specified library is not found, the server will fail to
        start.
       </para>
____________________________________________________________________________-->
       <para>
        这个变量指定一个或者多个要在服务器启动时预载入的共享库。这个参数只能在服务器启动时设置。
        如果指定的库没有找到，服务器将无法启动。
       </para>

<!--==========================orignal english content==========================
       <para>
        Some libraries need to perform certain operations that can only take
        place at postmaster start, such as allocating shared memory, reserving
        light-weight locks, or starting background workers.  Those libraries
        must be loaded at server start through this parameter.  See the
        documentation of each library for details.
       </para>
____________________________________________________________________________-->
       <para>
        有些库需要执行只能在postmaster启动时发生的特定操作，例如分配共享内存、保留轻量级锁
        或者启动后台工作者。这些库必须通过这个参数在服务器启动时载入。每个库的详情请见文档。
       </para>

<!--==========================orignal english content==========================
       <para>
        Other libraries can also be preloaded.  By preloading a shared library,
        the library startup time is avoided when the library is first used.
        However, the time to start each new server process might increase
        slightly, even if that process never uses the library.  So this
        parameter is recommended only for libraries that will be used in most
        sessions.  Also, changing this parameter requires a server restart, so
        this is not the right setting to use for short-term debugging tasks,
        say.  Use <xref linkend="guc-session-preload-libraries"> for that
        instead.
       </para>
____________________________________________________________________________-->
       <para>
        其他库也能被预载入。通过预载入一个共享库，当该库被第一次使用时就可以避免库的启动时间。
        不过，启动每个新服务器进程的时间可能会略有增加，即使该进程从不使用该库。因此，推荐只
        把这个参数用于那些要在大多数会话中使用的库上。还有，改变这个参数要求重启服务器，因此
        对于短期的调试任务来说这不是好的选择，应该转用
        <xref linkend="guc-session-preload-libraries">。
       </para>

      <note>
<!--==========================orignal english content==========================
       <para>
        On Windows hosts, preloading a library at server start will not reduce
        the time required to start each new server process; each server process
        will re-load all preload libraries.  However, <varname>shared_preload_libraries
        </varname> is still useful on Windows hosts for libraries that need to
        perform operations at postmaster start time.
       </para>
____________________________________________________________________________-->
       <para>
        在 Windows 主机上，在服务器启动时预载入一个库并不会减少启动每个新服务器进程所需的
        时间；每一个服务器进程将会重新载入预载入的库。不过，对于那些要在postmaster启动时
        执行操作的库来说，Windows 主机上的
        <varname>shared_preload_libraries</varname>任然有用。
       </para>
      </note>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

     <sect2 id="runtime-config-client-other">
<!--==========================orignal english content==========================
     <title>Other Defaults</title>
____________________________________________________________________________-->
     <title>其他默认值</title>

     <variablelist>

     <varlistentry id="guc-dynamic-library-path" xreflabel="dynamic_library_path">
<!--==========================orignal english content==========================
      <term><varname>dynamic_library_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>dynamic_library_path</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</></>
      </term>
____________________________________________________________________________-->
      <term><varname>dynamic_library_path</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>dynamic_library_path</>配置参数</primary>
      </indexterm>
      <indexterm><primary>dynamic loading</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If a dynamically loadable module needs to be opened and the
        file name specified in the <command>CREATE FUNCTION</command> or
        <command>LOAD</command> command
        does not have a directory component (i.e., the
        name does not contain a slash), the system will search this
        path for the required file.
       </para>
____________________________________________________________________________-->
       <para>
        如果需要打开一个可以动态装载的模块并且在<command>CREATE FUNCTION</command>或<command>LOAD</command>命令中指定的文件名没有目录部分（即名字中不包含斜线），那么系统将搜索这个路径以查找所需的文件。
       </para>

<!--==========================orignal english content==========================
       <para>
        The value for <varname>dynamic_library_path</varname> must be a
        list of absolute directory paths separated by colons (or semi-colons
        on Windows).  If a list element starts
        with the special string <literal>$libdir</literal>, the
        compiled-in <productname>PostgreSQL</productname> package
        library directory is substituted for <literal>$libdir</literal>; this
        is where the modules provided by the standard
        <productname>PostgreSQL</productname> distribution are installed.
        (Use <literal>pg_config -&minus;pkglibdir</literal> to find out the name of
        this directory.) For example:
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
        or, in a Windows environment:
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>
____________________________________________________________________________-->
       <para>
        <varname>dynamic_library_path</varname>的值必须是一个冒号分隔（或者在 Windows 上以分号分隔）的绝对目录路径的列表。如果一个列表元素以特殊字符串开始，<literal>$libdir</literal>会被替换为<productname>PostgreSQL</productname>包中已编译好的库目录。这里是<productname>PostgreSQL</productname>发布提供的模块被安装的位置（使用<literal>pg_config --pkglibdir</literal>来找到这个目录的名字）。例如：
<programlisting>
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'
</programlisting>
        或者在 Windows 环境中：
<programlisting>
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'
</programlisting>
       </para>

<!--==========================orignal english content==========================
       <para>
        The default value for this parameter is
        <literal>'$libdir'</literal>. If the value is set to an empty
        string, the automatic path search is turned off.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数的默认值是<literal>'$libdir'</literal>。如果该值被设置为一个空字符串，则关闭自动路径搜索。
       </para>

<!--==========================orignal english content==========================
       <para>
        This parameter can be changed at run time by superusers, but a
        setting done that way will only persist until the end of the
        client connection, so this method should be reserved for
        development purposes. The recommended way to set this parameter
        is in the <filename>postgresql.conf</filename> configuration
        file.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数可以在运行时由超级用户修改，但是这样修改的设置只能保持到这个客户端连接的结尾，因此这个方法应该保留给开发目的。 我们建议在<filename>postgresql.conf</filename>配置文件中设置这个参数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-gin-fuzzy-search-limit" xreflabel="gin_fuzzy_search_limit">
<!--==========================orignal english content==========================
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>gin_fuzzy_search_limit</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>gin_fuzzy_search_limit</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Soft upper limit of the size of the set returned by GIN index scans. For more
        information see <xref linkend="gin-tips">.
       </para>
____________________________________________________________________________-->
       <para>
        GIN 索引返回的集合尺寸的软上限。详见<xref linkend="gin-tips">。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-locks">
<!--==========================orignal english content==========================
    <title>Lock Management</title>
____________________________________________________________________________-->
    <title>锁管理</title>

     <variablelist>

     <varlistentry id="guc-deadlock-timeout" xreflabel="deadlock_timeout">
<!--==========================orignal english content==========================
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>deadlock_timeout</varname> (<type>integer</type>)
      <indexterm>
       <primary>deadlock</primary>
       <secondary>timeout during</secondary>
      </indexterm>
      <indexterm>
       <primary>timeout</primary>
       <secondary>deadlock</secondary>
      </indexterm>
      <indexterm>
       <primary><varname>deadlock_timeout</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This is the amount of time, in milliseconds, to wait on a lock
        before checking to see if there is a deadlock condition. The
        check for deadlock is relatively expensive, so the server doesn't run
        it every time it waits for a lock. We optimistically assume
        that deadlocks are not common in production applications and
        just wait on the lock for a while before checking for a
        deadlock. Increasing this value reduces the amount of time
        wasted in needless deadlock checks, but slows down reporting of
        real deadlock errors. The default is one second (<literal>1s</>),
        which is probably about the smallest value you would want in
        practice. On a heavily loaded server you might want to raise it.
        Ideally the setting should exceed your typical transaction time,
        so as to improve the odds that a lock will be released before
        the waiter decides to check for deadlock.  Only superusers can change
        this setting.
       </para>
____________________________________________________________________________-->
       <para>
        这是进行死锁检测之前在一个锁上等待的总时间（以毫秒计）。死锁检测相对昂贵，因此服务器不会在每次等待锁时都运行这个它。我们乐观地假设在生产应用中死锁是不常出现的，并且只在开始检测死锁之前等待一会儿。增加这个值就减少了浪费在无用的死锁检测上的时间，但是减慢了报告真正死锁错误的速度。默认是 1 秒（<literal>1s</>），这可能是实际中你想要的最小值。在一个高负载的服务器上，你可能需要增大它。这个值的理想设置应该超过你通常的事务时间，这样就可以减少在锁释放之前就开始死锁检查的机会。只有超级用户可以更改这个设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        When <xref linkend="guc-log-lock-waits"> is set,
        this parameter also determines the length of time to wait before
        a log message is issued about the lock wait.  If you are trying
        to investigate locking delays you might want to set a shorter than
        normal <varname>deadlock_timeout</varname>.
       </para>
____________________________________________________________________________-->
       <para>
        当<xref linkend="guc-log-lock-waits">被设置时，这个参数还可以决定发出关于锁等待的日志之前等待的时长。如果你想调查锁延迟，你可能希望设置一个比正常的<varname>deadlock_timeout</varname>小的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-locks-per-transaction" xreflabel="max_locks_per_transaction">
<!--==========================orignal english content==========================
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_locks_per_transaction</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_locks_per_transaction</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The shared lock table tracks locks on
        <varname>max_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) objects (e.g.,  tables);
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter controls the average number of object
        locks allocated for each transaction;  individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has historically proven sufficient, but you might need to
        raise this value if you have queries that touch many different
        tables in a single transaction, e.g. query of a parent table with
        many children.  This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        共享锁表跟踪在<varname>max_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) 个对象（如表）上的锁。因此，在任何一个时刻，只有不超过这么多个可区分对象能够被锁住。这个参数控制为每个事务分配的对象锁的平均数量。个体事务可以锁住更多对象，数量可以和锁表中能容纳的所有事务的锁一样多。这<emphasis>not</>是能被锁住的行数，那个值是没有限制的。默认值 64 已经被历史证明是足够的，但是如果你有需要在一个事务中使用很多不同表的查询（例如查询一个有很多子表的父表），你可能需要提高这个值。这个参数只能在服务器启动时设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        When running a standby server, you must set this parameter to the
        same or higher value than on the master server. Otherwise, queries
        will not be allowed in the standby server.
       </para>
____________________________________________________________________________-->
       <para>
        当运行一个后备服务器时，你必须设置这个参数为大于等于主服务器上的值。否则，后备服务器上将不允许查询。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-pred-locks-per-transaction" xreflabel="max_pred_locks_per_transaction">
<!--==========================orignal english content==========================
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_pred_locks_per_transaction</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_pred_locks_per_transaction</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        The shared predicate lock table tracks locks on
        <varname>max_pred_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) objects (e.g., tables);
        hence, no more than this many distinct objects can be locked at
        any one time.  This parameter controls the average number of object
        locks allocated for each transaction;  individual transactions
        can lock more objects as long as the locks of all transactions
        fit in the lock table.  This is <emphasis>not</> the number of
        rows that can be locked; that value is unlimited.  The default,
        64, has generally been sufficient in testing, but you might need to
        raise this value if you have clients that touch many different
        tables in a single serializable transaction. This parameter can
        only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        共享谓词锁表跟踪在<varname>max_pred_locks_per_transaction</varname> * (<xref
        linkend="guc-max-connections"> + <xref
        linkend="guc-max-prepared-transactions">) 个对象（如表）上的锁。因此，在任何一个时刻，只有不超过这么多个可区分对象能够被锁住。这个参数控制为每个事务分配的对象锁的平均数量。个体事务可以锁住更多对象，数量可以和锁表中能容纳的所有事务的锁一样多。这<emphasis>not</>是能被锁住的行数，那个值是没有限制的。默认值 64 已经在测试中被证明通常是足够的，但是如果你有需要在一个可序列化事务中使用很多不同表的查询（例如查询一个有很多子表的父表），你可能需要提高这个值。这个参数只能在服务器启动时设置。
       </para>

      </listitem>
     </varlistentry>

     </variablelist>
   </sect1>

   <sect1 id="runtime-config-compatible">
<!--==========================orignal english content==========================
    <title>Version and Platform Compatibility</title>
____________________________________________________________________________-->
    <title>版本和平台兼容性</title>

    <sect2 id="runtime-config-compatible-version">
<!--==========================orignal english content==========================
     <title>Previous PostgreSQL Versions</title>
____________________________________________________________________________-->
     <title>以前的 PostgreSQL 版本</title>

     <variablelist>

     <varlistentry id="guc-array-nulls" xreflabel="array_nulls">
<!--==========================orignal english content==========================
      <term><varname>array_nulls</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>array_nulls</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>array_nulls</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>array_nulls</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This controls whether the array input parser recognizes
        unquoted <literal>NULL</> as specifying a null array element.
        By default, this is <literal>on</>, allowing array values containing
        null values to be entered.  However, <productname>PostgreSQL</> versions
        before 8.2 did not support null values in arrays, and therefore would
        treat <literal>NULL</> as specifying a normal array element with
        the string value <quote>NULL</>.  For backward compatibility with
        applications that require the old behavior, this variable can be
        turned <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数控制数组输入解析器是否把未用引号的<literal>NULL</>识别为一个空数组元素。默认为<literal>on</>，允许输入包含空值的数组值。但是<productname>PostgreSQL</> 8.2 之前的版本不支持数组中的空值，并且因此将把<literal>NULL</>当作指定一个值为字符串<quote>NULL</>的正常数组元素。对于那些要求旧行为的应用的向后兼容性，这个变量可以被设置为<literal>off</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        Note that it is possible to create array values containing null values
        even when this variable is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        注意即使这个变量为<literal>off</>也能够创建包含空值的数组值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-backslash-quote" xreflabel="backslash_quote">
<!--==========================orignal english content==========================
      <term><varname>backslash_quote</varname> (<type>enum</type>)
      <indexterm><primary>strings</><secondary>backslash quotes</></>
      <indexterm>
       <primary><varname>backslash_quote</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>backslash_quote</varname> (<type>enum</type>)
      <indexterm><primary>strings</><secondary>backslash quotes</></>
      <indexterm>
       <primary><varname>backslash_quote</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This controls whether a quote mark can be represented by
        <literal>\'</> in a string literal.  The preferred, SQL-standard way
        to represent a quote mark is by doubling it (<literal>''</>) but
        <productname>PostgreSQL</> has historically also accepted
        <literal>\'</>. However, use of <literal>\'</> creates security risks
        because in some client character set encodings, there are multibyte
        characters in which the last byte is numerically equivalent to ASCII
        <literal>\</>.  If client-side code does escaping incorrectly then a
        SQL-injection attack is possible.  This risk can be prevented by
        making the server reject queries in which a quote mark appears to be
        escaped by a backslash.
        The allowed values of <varname>backslash_quote</> are
        <literal>on</> (allow <literal>\'</> always),
        <literal>off</> (reject always), and
        <literal>safe_encoding</> (allow only if client encoding does not
        allow ASCII <literal>\</> within a multibyte character).
        <literal>safe_encoding</> is the default setting.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数控制字符串文本中的单引号是否能够用<literal>\'</>来表示。首选的 SQL 标准的方法是将其双写（<literal>''</>），但是<productname>PostgreSQL</>在历史上也接受<literal>\'</>。不过使用<literal>\'</>容易导致安全风险，因为在某些客户端字符集编码中，有多字节字符的最后一个字节在数值上等价于 ASCII 的<literal>\'</>。如果客户端代码没有做到正确转义，那么将会导致 SQL 注入攻击。如果服务器拒绝看起来带有被反斜线转义的单引号的查询，那么就可以避免这种风险。<varname>backslash_quote</>的可用值是<literal>on</>（总是允许<literal>\'</>）、<literal>off</>（总是拒绝）以及<literal>safe_encoding</>（只有客户端编码不允许在多字节字符中存在 ASCII <literal>\</>时允许）。<literal>safe_encoding</>是默认设置。
       </para>

<!--==========================orignal english content==========================
       <para>
        Note that in a standard-conforming string literal, <literal>\</> just
        means <literal>\</> anyway.  This parameter only affects the handling of
        non-standard-conforming literals, including
        escape string syntax (<literal>E'...'</>).
       </para>
____________________________________________________________________________-->
       <para>
        注意在符合标准的字符串文本中，<literal>\</>就表示<literal>\</>。这个参数只影响不符合标准的文本的处理，包括转义字符串语法（<literal>E'...'</>）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-default-with-oids" xreflabel="default_with_oids">
<!--==========================orignal english content==========================
      <term><varname>default_with_oids</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>default_with_oids</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>default_with_oids</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>default_with_oids</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This controls whether <command>CREATE TABLE</command> and
        <command>CREATE TABLE AS</command> include an OID column in
        newly-created tables, if neither <literal>WITH OIDS</literal>
        nor <literal>WITHOUT OIDS</literal> is specified. It also
        determines whether OIDs will be included in tables created by
        <command>SELECT INTO</command>. The parameter is <literal>off</>
        by default; in <productname>PostgreSQL</> 8.0 and earlier, it
        was <literal>on</> by default.
       </para>
____________________________________________________________________________-->
       <para>
        这个参数控制<command>CREATE TABLE</command>和<command>CREATE TABLE AS</command>在既没有指定<literal>WITH OIDS</literal>也没有指定<literal>WITHOUT OIDS</literal>的情况下，是否在新创建的表中包含 OID 列。它还决定被<command>SELECT INTO</command>创建的表里面是否包含 OID 。这个参数在默认情况下为<literal>off</>。在<productname>PostgreSQL</> 8.0 及更早的版本中，它默认为<literal>on</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        The use of OIDs in user tables is considered deprecated, so
        most installations should leave this variable disabled.
        Applications that require OIDs for a particular table should
        specify <literal>WITH OIDS</literal> when creating the
        table. This variable can be enabled for compatibility with old
        applications that do not follow this behavior.
       </para>
____________________________________________________________________________-->
       <para>
        我们反对在用户表中使用 OID ，因此大多数安装应该禁用这个变量。需要为一个特殊表使用 OID 的应用应该在创建表的时候指定<literal>WITH OIDS</literal>。为了兼容不遵循这一行为的老旧应用，这个变量可以被启用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-escape-string-warning" xreflabel="escape_string_warning">
<!--==========================orignal english content==========================
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>escape warning</></>
      <indexterm>
       <primary><varname>escape_string_warning</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>escape_string_warning</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>escape warning</></>
      <indexterm>
       <primary><varname>escape_string_warning</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When on, a warning is issued if a backslash (<literal>\</>)
        appears in an ordinary string literal (<literal>'...'</>
        syntax) and <varname>standard_conforming_strings</varname> is off.
        The default is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        打开时，如果在普通字符串文本中（<literal>'...'</>语法）出现了 一个反斜线（<literal>\</>）并且<varname>standard_conforming_strings</varname>为关闭，那么就会发出一个警告。默认值是<literal>on</>。
       </para>
<!--==========================orignal english content==========================
       <para>
        Applications that wish to use backslash as escape should be
        modified to use escape string syntax (<literal>E'...'</>),
        because the default behavior of ordinary strings is now to treat
        backslash as an ordinary character, per SQL standard.  This variable
        can be enabled to help locate code that needs to be changed.
       </para>
____________________________________________________________________________-->
       <para>
        希望使用反斜线作为转义符的应用应该被修改来使用转义字符串语法（<literal>E'...'</>），因为在 SQL 标准中普通字符串的默认行为是将反斜线视作一个普通字符。这个变量可以被启用来帮助定位需要被更改的代码。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lo-compat-privileges" xreflabel="lo_compat_privileges">
<!--==========================orignal english content==========================
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>lo_compat_privileges</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lo_compat_privileges</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>lo_compat_privileges</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        In <productname>PostgreSQL</> releases prior to 9.0, large objects
        did not have access privileges and were, therefore, always readable
        and writable by all users.  Setting this variable to <literal>on</>
        disables the new privilege checks, for compatibility with prior
        releases.  The default is <literal>off</>.
        Only superusers can change this setting.
       </para>
____________________________________________________________________________-->
       <para>
        在9.0之前的版本中，大对象没有连接权限，并且对所有用户哦都是可读可写的。 
        将这个变量设置为on，从而禁用新的权限检查，以与以前的版本兼容。 默认是off。
        只有超级用户可以更改这个设置。
       </para>
<!--==========================orignal english content==========================
       <para>
        Setting this variable does not disable all security checks related to
        large objects &mdash; only those for which the default behavior has
        changed in <productname>PostgreSQL</> 9.0.
        For example, <literal>lo_import()</literal> and
        <literal>lo_export()</literal> need superuser privileges regardless
        of this setting.
       </para>
____________________________________________________________________________-->
       <para>
        设置这个参数不会禁用所有与大对象相关的安全检查 &mdash; 除了那些在<productname>PostgreSQL</> 9.0中已经修改了的默认行为。例如，<literal>lo_import()</literal>和<literal>lo_export()</literal>需要超级用户权限而不管这个设置。
       </para>
      </listitem>
     </varlistentry>
         
     <varlistentry id="guc-operator-precedence-warning" xreflabel="operator_precedence_warning">
<!--==========================orignal english content==========================
      <term><varname>operator_precedence_warning</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>operator_precedence_warning</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>operator_precedence_warning</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>operator_precedence_warning</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When on, the parser will emit a warning for any construct that might
        have changed meanings since <productname>PostgreSQL</> 9.4 as a result
        of changes in operator precedence.  This is useful for auditing
        applications to see if precedence changes have broken anything; but it
        is not meant to be kept turned on in production, since it will warn
        about some perfectly valid, standard-compliant SQL code.
        The default is <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        当开启时，解析器为了可能修改的任何结构发出警告，
        意味着<productname>PostgreSQL</> 9.4操作符优先级中作为修改结果。     
        对审计应用程序是非常有用的，
        看看是否优先更改会打断任何东西；
        但它并不意味着在生成过程中保持开启，
        因为它会对一些完全有效的，符合标准的SQL代码发出警告。
        缺省<literal>off</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        See <xref linkend="sql-precedence"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
           参阅<xref linkend="sql-precedence">获取更多信息。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-quote-all-identifiers" xreflabel="quote-all-identifiers">
<!--==========================orignal english content==========================
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>quote_all_identifiers</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>quote_all_identifiers</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>quote_all_identifiers</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When the database generates SQL, force all identifiers to be quoted,
        even if they are not (currently) keywords.  This will affect the
        output of <command>EXPLAIN</> as well as the results of functions
        like <function>pg_get_viewdef</>.  See also the
        <option>-&minus;quote-all-identifiers</option> option of
        <xref linkend="app-pgdump"> and <xref linkend="app-pg-dumpall">.
       </para>
____________________________________________________________________________-->
       <para>
        当数据库产生 SQL 时，强制所有标识符被引号包围，即使它们（当前）不是关键字。这将影响<command>EXPLAIN</>的输出以及<function>pg_get_viewdef</>等函数的结果。另请参阅<xref linkend="app-pgdump">和<xref linkend="app-pg-dumpall">的<option>--quote-all-identifiers</option>选项。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-sql-inheritance" xreflabel="sql_inheritance">
<!--==========================orignal english content==========================
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>sql_inheritance</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>inheritance</></>
      </term>
____________________________________________________________________________-->
      <term><varname>sql_inheritance</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>sql_inheritance</>配置参数</primary>
      </indexterm>
      <indexterm><primary>inheritance</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This setting controls whether undecorated table references are
        considered to include inheritance child tables.  The default is
        <literal>on</>, which means child tables are included (thus,
        a <literal>*</> suffix is assumed by default).  If turned
        <literal>off</>, child tables are not included (thus, an
        <literal>ONLY</literal> prefix is assumed).  The SQL standard
        requires child tables to be included, so the <literal>off</> setting
        is not spec-compliant, but it is provided for compatibility with
        <productname>PostgreSQL</> releases prior to 7.1.
        See <xref linkend="ddl-inherit"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        这个设置控制未修饰的表引用是否被视作要包括继承的子表。默认值是<literal>on</>，它表示包括子表（因此，默认假定一个<literal>*</>后缀）。如果被设置为<literal>off</>，不包括子表（因此，假设一个<literal>ONLY</literal>前缀）。SQL 标准要求子表被包括在内，因此<literal>off</>设置不是说明兼容的，但是被提供用来满足对<productname>PostgreSQL</>版本 7.1 之前的兼容性。详见<xref linkend="ddl-inherit">。
       </para>

<!--==========================orignal english content==========================
       <para>
        Turning <varname>sql_inheritance</> off is deprecated, because that
        behavior has been found to be error-prone as well as contrary to SQL
        standard.  Discussions of inheritance behavior elsewhere in this
        manual generally assume that it is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        我们已经废弃了关闭<varname>sql_inheritance</>，因为那个行为已经被发现容易产生错误并且与 SQL 标准矛盾。本手册中其他地方讨论继承行为时通常假设它被设置为<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-standard-conforming-strings" xreflabel="standard_conforming_strings">
<!--==========================orignal english content==========================
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>standard conforming</></>
      <indexterm>
       <primary><varname>standard_conforming_strings</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>standard_conforming_strings</varname> (<type>boolean</type>)
      <indexterm><primary>strings</><secondary>standard conforming</></>
      <indexterm>
       <primary><varname>standard_conforming_strings</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This controls whether ordinary string literals
        (<literal>'...'</>) treat backslashes literally, as specified in
        the SQL standard.
        Beginning in <productname>PostgreSQL</productname> 9.1, the default is
        <literal>on</> (prior releases defaulted to <literal>off</>).
        Applications can check this
        parameter to determine how string literals will be processed.
        The presence of this parameter can also be taken as an indication
        that the escape string syntax (<literal>E'...'</>) is supported.
        Escape string syntax (<xref linkend="sql-syntax-strings-escape">)
        should be used if an application desires
        backslashes to be treated as escape characters.
       </para>
____________________________________________________________________________-->
       <para>
        控制普通字符串文本（<literal>'...'</>）是否按照 SQL 标准把反斜线当普通文本。从<productname>PostgreSQL</productname> 9.1 开始，默认值为<literal>on</>（之前的发行中默认值为<literal>off</>）。应用可以检查这个参数来判断字符串文本如何被处理。这个参数的存在也可以被当做转义字符串语法（<literal>E'...'</>）被支持的标志。如果一个应用希望反斜线被当做转义字符，应该使用转义字符串语法（<xref linkend="sql-syntax-strings-escape">）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-synchronize-seqscans" xreflabel="synchronize_seqscans">
<!--==========================orignal english content==========================
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>synchronize_seqscans</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>synchronize_seqscans</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>synchronize_seqscans</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        This allows sequential scans of large tables to synchronize with each
        other, so that concurrent scans read the same block at about the
        same time and hence share the I/O workload.  When this is enabled,
        a scan might start in the middle of the table and then <quote>wrap
        around</> the end to cover all rows, so as to synchronize with the
        activity of scans already in progress.  This can result in
        unpredictable changes in the row ordering returned by queries that
        have no <literal>ORDER BY</> clause.  Setting this parameter to
        <literal>off</> ensures the pre-8.3 behavior in which a sequential
        scan always starts from the beginning of the table.  The default
        is <literal>on</>.
       </para>
____________________________________________________________________________-->
       <para>
        它允许对大型表的顺序扫描与其他扫描同步，因此并发扫描可以在几乎相同的时刻读取相同的块，这样可以分担 I/O 负载。当启用这个参数时，一个扫描可能会从表的中间开始并且之后<quote>绕回</>到开头以覆盖所有的行，这样可以与已在进行中的扫描活动同步。对于没有<literal>ORDER BY</>子句的查询来，这样的扫描会在返回行的顺序中造成不可预料的改变。将这个参数设置为<literal>off</>以保证 8.3 之前的行为（顺序扫描总是从表的起始处开始）。默认值是<literal>on</>。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>

    <sect2 id="runtime-config-compatible-clients">
<!--==========================orignal english content==========================
     <title>Platform and Client Compatibility</title>
____________________________________________________________________________-->
     <title>平台和客户端兼容性</title>
     <variablelist>

     <varlistentry id="guc-transform-null-equals" xreflabel="transform_null_equals">
<!--==========================orignal english content==========================
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)
      <indexterm><primary>IS NULL</></>
      <indexterm>
       <primary><varname>transform_null_equals</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>transform_null_equals</varname> (<type>boolean</type>)
      <indexterm><primary>IS NULL</></>
      <indexterm>
       <primary><varname>transform_null_equals</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When on, expressions of the form <literal><replaceable>expr</> =
        NULL</literal> (or <literal>NULL =
        <replaceable>expr</></literal>) are treated as
        <literal><replaceable>expr</> IS NULL</literal>, that is, they
        return true if <replaceable>expr</> evaluates to the null value,
        and false otherwise. The correct SQL-spec-compliant behavior of
        <literal><replaceable>expr</> = NULL</literal> is to always
        return null (unknown). Therefore this parameter defaults to
        <literal>off</>.
       </para>
____________________________________________________________________________-->
       <para>
        当打开时，形为<literal><replaceable>expr</> = NULL</literal>（或<literal>NULL =  <replaceable>expr</></literal>）的表达式将被当做<literal><replaceable>expr</> IS NULL</literal>， 也就是说，如果<replaceable>expr</>得出空值值则返回真，否则返回假。正确的 SQL 标准兼容的<literal><replaceable>expr</> = NULL</literal>行为总是返回空（未知）。因此这个参数默认为<literal>off</>。
       </para>

<!--==========================orignal english content==========================
       <para>
        However, filtered forms in <productname>Microsoft
        Access</productname> generate queries that appear to use
        <literal><replaceable>expr</> = NULL</literal> to test for
        null values, so if you use that interface to access the database you
        might want to turn this option on.  Since expressions of the
        form <literal><replaceable>expr</> = NULL</literal> always
        return the null value (using the SQL standard interpretation), they are not
        very useful and do not appear often in normal applications so
        this option does little harm in practice.  But new users are
        frequently confused about the semantics of expressions
        involving null values, so this option is off by default.
       </para>
____________________________________________________________________________-->
       <para>
        不过，在<productname>Microsoft Access</productname>里的过滤表单生成的查询似乎使用<literal><replaceable>expr</> = NULL</literal>来测试空值，因此，如果你使用这个接口访问数据库，你可能想把这个选项打开。因为<literal><replaceable>expr</> = NULL</literal>形式的表达式总是返回空值（使用 SQL 标准解释）。它们不是非常有用并且在普通应用中也不常见，在应用中也不常见，因此这个选项实际上没有什么危害。但是新用户常常对涉及 空值的表达式的语义上感到困惑，因此这个选项默认为关闭。
       </para>

<!--==========================orignal english content==========================
       <para>
        Note that this option only affects the exact form <literal>= NULL</>,
        not other comparison operators or other expressions
        that are computationally equivalent to some expression
        involving the equals operator (such as <literal>IN</literal>).
        Thus, this option is not a general fix for bad programming.
       </para>
____________________________________________________________________________-->
       <para>
        请注意这个选项只影响<literal>= NULL</>形式，而不影响其它比较操作符或者其它与一些涉及等值操作符的表达式在计算上等效的其他表达式（例如<literal>IN</literal>）。因此，这个选项不是劣质程序的一般修复。
       </para>

<!--==========================orignal english content==========================
       <para>
        Refer to <xref linkend="functions-comparison"> for related information.
       </para>
____________________________________________________________________________-->
       <para>
        相关信息请见<xref linkend="functions-comparison">。
       </para>
      </listitem>
     </varlistentry>

     </variablelist>
    </sect2>
   </sect1>

   <sect1 id="runtime-config-error-handling">
<!--==========================orignal english content==========================
    <title>Error Handling</title>
____________________________________________________________________________-->
    <title>错误处理</title>

    <variablelist>

     <varlistentry id="guc-exit-on-error" xreflabel="exit_on_error">
<!--==========================orignal english content==========================
      <term><varname>exit_on_error</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>exit_on_error</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>exit_on_error</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>exit_on_error</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If true, any error will terminate the current session.  By default,
        this is set to false, so that only FATAL errors will terminate the
        session.
       </para>
____________________________________________________________________________-->
       <para>
        如果为真，任何错误将中止当前会话。默认情况下，这个值被设置为假，这样只有 FATAL 错误（致命）将中止会话。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-restart-after-crash" xreflabel="restart_after_crash">
<!--==========================orignal english content==========================
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>restart_after_crash</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>restart_after_crash</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>restart_after_crash</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        When set to true, which is the default, <productname>PostgreSQL</>
        will automatically reinitialize after a backend crash.  Leaving this
        value set to true is normally the best way to maximize the availability
        of the database.  However, in some circumstances, such as when
        <productname>PostgreSQL</> is being invoked by clusterware, it may be
        useful to disable the restart so that the clusterware can gain
        control and take any actions it deems appropriate.
       </para>
____________________________________________________________________________-->
       <para>
        当被设置为真（默认值）时，<productname>PostgreSQL</>将在一次后端崩溃后自动重新初始化。让这个值设置为真通常是将数据库可用性最大化的最佳方法。但是在某些环境中，例如<productname>PostgreSQL</>被集群软件调用时，禁用重启可能很有用，这样集群软件可以得到控制并且采取它认为适当的行动。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

   </sect1>

   <sect1 id="runtime-config-preset">
<!--==========================orignal english content==========================
    <title>Preset Options</title>
____________________________________________________________________________-->
    <title>预置选项</title>

<!--==========================orignal english content==========================
    <para>
     The following <quote>parameters</> are read-only, and are determined
     when <productname>PostgreSQL</productname> is compiled or when it is
     installed. As such, they have been excluded from the sample
     <filename>postgresql.conf</> file.  These options report
     various aspects of <productname>PostgreSQL</productname> behavior
     that might be of interest to certain applications, particularly
     administrative front-ends.
    </para>
____________________________________________________________________________-->
    <para>
     下列<quote>参数</>是只读的，它们是在编译或安装<productname>PostgreSQL</productname>时决定的。同样，它们被排除在<filename>postgresql.conf</>文件例子之外。这些选项报告特定应用可能感兴趣的多种<productname>PostgreSQL</productname>行为，特别是管理前端相关的行为。
    </para>

    <variablelist>

     <varlistentry id="guc-block-size" xreflabel="block_size">
<!--==========================orignal english content==========================
      <term><varname>block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>block_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>block_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the size of a disk block.  It is determined by the value
        of <literal>BLCKSZ</> when building the server. The default
        value is 8192 bytes.  The meaning of some configuration
        variables (such as <xref linkend="guc-shared-buffers">) is
        influenced by <varname>block_size</varname>. See <xref
        linkend="runtime-config-resource"> for information.
       </para>
____________________________________________________________________________-->
       <para>
        报告一个磁盘块的大小。它由编译服务器时<literal>BLCKSZ</>的值确定。默认值是 8192 字节。有些配置变量的含义（例如<xref linkend="guc-shared-buffers">）会被<varname>block_size</varname>影响。详见<xref linkend="runtime-config-resource">。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-data-checksums" xreflabel="data_checksums">
<!--==========================orignal english content==========================
      <term><varname>data_checksums</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_checksums</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>data_checksums</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>data_checksums</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports whether data checksums are enabled for this cluster.
        See <xref linkend="app-initdb-data-checksums"> for more information.
       </para>
____________________________________________________________________________-->
       <para>
        报告对这个集簇是否启用了数据校验码。详见<xref linkend="app-initdb-data-checksums">。
       </para>
      </listitem>
     </varlistentry>
      
     <varlistentry id="guc-debug-assertions" xreflabel="debug_assertions">
<!--==========================orignal english content==========================
      <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_assertions</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_assertions</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_assertions</>配置参数</primary>
      </indexterm>
      </term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports whether <productname>PostgreSQL</productname> has been built
        with assertions enabled. That is the case if the
        macro <symbol>USE_ASSERT_CHECKING</symbol> is defined
        when <productname>PostgreSQL</productname> is built (accomplished
        e.g. by the <command>configure</command> option
        <option>-&minus;enable-cassert</option>). By
        default <productname>PostgreSQL</productname> is built without
        assertions.
       </para>
____________________________________________________________________________-->
       <para>
        报告是否启用断言编译<productname>PostgreSQL</productname>。
       当构建<productname>PostgreSQL</productname>时（比如通过<command>configure</command>选项
        <option>--enable-cassert</option>完成），
        如果是这样的话，定义宏<symbol>USE_ASSERT_CHECKING</symbol>。
        缺省情况下编译没有断言的<productname>PostgreSQL</productname>。        
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-integer-datetimes" xreflabel="integer_datetimes">
<!--==========================orignal english content==========================
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>integer_datetimes</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>integer_datetimes</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>integer_datetimes</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports whether <productname>PostgreSQL</> was built with
        support for 64-bit-integer dates and times.  This can be
        disabled by configuring with <literal>-&minus;disable-integer-datetimes</>
        when building <productname>PostgreSQL</>.  The default value is
        <literal>on</literal>.
       </para>
____________________________________________________________________________-->
       <para>
        报告<productname>PostgreSQL</>是否在编译时打开了 64 位整数日期和时间。这可以在编译<productname>PostgreSQL</>时通过使用<literal>--disable-integer-datetimes</>配置来禁用。默认值是<literal>on</literal>。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-collate" xreflabel="lc_collate">
<!--==========================orignal english content==========================
      <term><varname>lc_collate</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_collate</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_collate</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_collate</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the locale in which sorting of textual data is done.
        See <xref linkend="locale"> for more information.
        This value is determined when a database is created.
       </para>
____________________________________________________________________________-->
       <para>
        报告文本数据排序使用的区域。详见<xref linkend="locale">。该值是在数据库被创建时确定的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-lc-ctype" xreflabel="lc_ctype">
<!--==========================orignal english content==========================
      <term><varname>lc_ctype</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_ctype</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>lc_ctype</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>lc_ctype</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the locale that determines character classifications.
        See <xref linkend="locale"> for more information.
        This value is determined when a database is created.
        Ordinarily this will be the same as <varname>lc_collate</varname>,
        but for special applications it might be set differently.
       </para>
____________________________________________________________________________-->
       <para>
        报告决定字符分类的区域。详见<xref linkend="locale">。该值是在数据库被创建时决定的。通常它和<varname>lc_collate</varname>一样，但是可以为特殊应用设置成不同的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-function-args" xreflabel="max_function_args">
<!--==========================orignal english content==========================
      <term><varname>max_function_args</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_function_args</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_function_args</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_function_args</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the maximum number of function arguments. It is determined by
        the value of <literal>FUNC_MAX_ARGS</> when building the server. The
        default value is 100 arguments.
       </para>
____________________________________________________________________________-->
       <para>
        报告函数参数的最大数量。它由编译服务器时的<literal>FUNC_MAX_ARGS</>值决定的。默认值是 100 个参数。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-identifier-length" xreflabel="max_identifier_length">
<!--==========================orignal english content==========================
      <term><varname>max_identifier_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_identifier_length</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_identifier_length</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_identifier_length</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the maximum identifier length. It is determined as one
        less than the value of <literal>NAMEDATALEN</> when building
        the server. The default value of <literal>NAMEDATALEN</> is
        64; therefore the default
        <varname>max_identifier_length</varname> is 63 bytes, which
        can be less than 63 characters when using multibyte encodings.
       </para>
____________________________________________________________________________-->
       <para>
        报告标识符的最大长度。它由编译服务器时的<literal>NAMEDATALEN</>值减一决定。<literal>NAMEDATALEN</>的默认值是 64 ；因此<varname>max_identifier_length</varname>的默认值是 63，但是在使用多字节编码时可以少于 63 个字符。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-max-index-keys" xreflabel="max_index_keys">
<!--==========================orignal english content==========================
      <term><varname>max_index_keys</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_index_keys</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>max_index_keys</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>max_index_keys</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the maximum number of index keys. It is determined by
        the value of <literal>INDEX_MAX_KEYS</> when building the server. The
        default value is 32 keys.
       </para>
____________________________________________________________________________-->
       <para>
        报告索引键的最大数目。它由编译服务器时的<literal>INDEX_MAX_KEYS</>值决定。默认值是 32 个键。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-segment-size" xreflabel="segment_size">
<!--==========================orignal english content==========================
      <term><varname>segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>segment_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>segment_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the number of blocks (pages) that can be stored within a file
        segment.  It is determined by the value of <literal>RELSEG_SIZE</>
        when building the server.  The maximum size of a segment file in bytes
        is equal to <varname>segment_size</> multiplied by
        <varname>block_size</>; by default this is 1GB.
       </para>
____________________________________________________________________________-->
       <para>
        报告一个文件段中可以存储的块（页）的数量。由编译服务器时的<literal>RELSEG_SIZE</>值决定。一个段文件的最大尺寸（以字节计）等于<varname>segment_size</>乘以<varname>block_size</>， 默认是 1GB。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-encoding" xreflabel="server_encoding">
<!--==========================orignal english content==========================
      <term><varname>server_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_encoding</> configuration parameter</primary>
      </indexterm>
      <indexterm><primary>character set</></>
      </term>
____________________________________________________________________________-->
      <term><varname>server_encoding</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_encoding</>配置参数</primary>
      </indexterm>
      <indexterm><primary>character set</></></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the database encoding (character set).
        It is determined when the database is created.  Ordinarily,
        clients need only be concerned with the value of <xref
        linkend="guc-client-encoding">.
       </para>
____________________________________________________________________________-->
       <para>
        报告数据库的编码（字符集）。这是在数据库被创建时决定的。通常，客户端只需要关心<xref linkend="guc-client-encoding">的值。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version" xreflabel="server_version">
<!--==========================orignal english content==========================
      <term><varname>server_version</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_version</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>server_version</varname> (<type>string</type>)
      <indexterm>
       <primary><varname>server_version</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the version number of the server. It is determined by the
        value of <literal>PG_VERSION</> when building the server.
       </para>
____________________________________________________________________________-->
       <para>
        报告服务器版本数值。它是由编译服务器时的<literal>PG_VERSION</>值决定的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-server-version-num" xreflabel="server_version_num">
<!--==========================orignal english content==========================
      <term><varname>server_version_num</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>server_version_num</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>server_version_num</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>server_version_num</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the version number of the server as an integer. It is determined
        by the value of <literal>PG_VERSION_NUM</> when building the server.
       </para>
____________________________________________________________________________-->
       <para>
        报告服务器版本数值的整数值。它是由编译服务器时的<literal>PG_VERSION_NUM</>值决定的。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-block-size" xreflabel="wal_block_size">
<!--==========================orignal english content==========================
      <term><varname>wal_block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_block_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_block_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_block_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the size of a WAL disk block.  It is determined by the value
        of <literal>XLOG_BLCKSZ</> when building the server. The default value
        is 8192 bytes.
       </para>
____________________________________________________________________________-->
       <para>
        报告一个 WAL 磁盘块的尺寸。由编译服务器时的<literal>XLOG_BLCKSZ</>值决定。默认是 8192 字节。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-segment-size" xreflabel="wal_segment_size">
<!--==========================orignal english content==========================
      <term><varname>wal_segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_segment_size</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_segment_size</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>wal_segment_size</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Reports the number of blocks (pages) in a WAL segment file.
        The total size of a WAL segment file in bytes is equal to
        <varname>wal_segment_size</> multiplied by <varname>wal_block_size</>;
        by default this is 16MB.  See <xref linkend="wal-configuration"> for
        more information.
       </para>
____________________________________________________________________________-->
       <para>
        报告 WAL 段文件中的块（页）数。WAL 段文件的总尺寸（以字节计）等于 <varname>wal_segment_size</>乘以<varname>wal_block_size</>，默认是 16MB。详见<xref linkend="wal-configuration">。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </sect1>

   <sect1 id="runtime-config-custom">
<!--==========================orignal english content==========================
    <title>Customized Options</title>
____________________________________________________________________________-->
    <title>自定义选项</title>

<!--==========================orignal english content==========================
    <para>
     This feature was designed to allow parameters not normally known to
     <productname>PostgreSQL</productname> to be added by add-on modules
     (such as procedural languages).  This allows extension modules to be
     configured in the standard ways.
    </para>
____________________________________________________________________________-->
    <para>
     这个特性被设计用来由附加模块向<productname>PostgreSQL</productname>添加通常不为系统知道的参数（例如过程语言）。这允许使用标准方法配制扩展模块。
    </para>

<!--==========================orignal english content==========================
    <para>
     Custom options have two-part names: an extension name, then a dot, then
     the parameter name proper, much like qualified names in SQL.  An example
     is <literal>plpgsql.variable_conflict</>.
    </para>
____________________________________________________________________________-->
    <para>
     自定义选项有两部分名称：一个扩展名，然后是一个句点，再然后是正确的参数名，就像 SQL 中的合格名称。一个例子是<literal>plpgsql.variable_conflict</>。
    </para>

<!--==========================orignal english content==========================
    <para>
     Because custom options may need to be set in processes that have not
     loaded the relevant extension module, <productname>PostgreSQL</>
     will accept a setting for any two-part parameter name.  Such variables
     are treated as placeholders and have no function until the module that
     defines them is loaded. When an extension module is loaded, it will add
     its variable definitions, convert any placeholder values according to
     those definitions, and issue warnings for any unrecognized placeholders
     that begin with its extension name.
    </para>
____________________________________________________________________________-->
    <para>
     因为自定义选项可能需要在没有载入相关扩展模块的进程中设置，<productname>PostgreSQL</>将接收任意两部分参数名的设置。这种变量被认为是占位符并且在定义它们的模块被载入之前不会有实际功能。当一个扩展模块被载入，它将加入它的变量定义、根据那些定义转换任何占位符值并且对以其扩展名开始的任意未识别占位符发出警告。
    </para>
   </sect1>

   <sect1 id="runtime-config-developer">
<!--==========================orignal english content==========================
    <title>Developer Options</title>
____________________________________________________________________________-->
    <title>开发者选项</title>

<!--==========================orignal english content==========================
    <para>
     The following parameters are intended for work on the
     <productname>PostgreSQL</productname> source code, and in some cases
     to assist with recovery of severely damaged databases.  There
     should be no reason to use them on a production database.
     As such, they have been excluded from the sample
     <filename>postgresql.conf</> file.  Note that many of these
     parameters require special source compilation flags to work at all.
    </para>
____________________________________________________________________________-->
    <para>
     下面的参数目的是用在<productname>PostgreSQL</productname>源代码上， 并且在某些情况下可以帮助恢复严重损坏了的数据库。在一个生产数据库中没有理由使用它们。同样，它们被从例子<filename>postgresql.conf</>文件中排除。请注意许多这些参数要求特殊的源代码编译标志才能工作。
    </para>

    <variablelist>
     <varlistentry id="guc-allow-system-table-mods" xreflabel="allow_system_table_mods">
<!--==========================orignal english content==========================
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_system_table_mods</varname> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>allow_system_table_mods</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>allow_system_table_mods</varname>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Allows modification of the structure of system tables.
        This is used by <command>initdb</command>.
        This parameter can only be set at server start.
       </para>
____________________________________________________________________________-->
       <para>
        允许对系统表结构的修改。它可以被<command>initdb</command>使用。这个参数只能在服务器启动时设置。
       </para>
      </listitem>
     </varlistentry>


     <varlistentry id="guc-ignore-system-indexes" xreflabel="ignore_system_indexes">
<!--==========================orignal english content==========================
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>ignore_system_indexes</varname> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ignore_system_indexes</varname> (<type>boolean</type>)
      <indexterm>
        <primary><varname>ignore_system_indexes</varname>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Ignore system indexes when reading system tables (but still
        update the indexes when modifying the tables).  This is useful
        when recovering from damaged system indexes.
        This parameter cannot be changed after session start.
       </para>
____________________________________________________________________________-->
       <para>
        读取系统表时忽略系统索引（但是修改系统表时依然同时更新索引）。这在从被破坏的系统索引中恢复数据的时有用。这个参数在会话开始之后不能被更改。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-post-auth-delay" xreflabel="post_auth_delay">
<!--==========================orignal english content==========================
      <term><varname>post_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>post_auth_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>post_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>post_auth_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If nonzero, a delay of this many seconds occurs when a new
        server process is started, after it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger.
        This parameter cannot be changed after session start.
       </para>
____________________________________________________________________________-->
       <para>
        如果为非零，那么在一个新的服务器进程派生出来之后并且在它开始认证过程之前，就会发生这么多秒的延迟。这是为了给开发者们一个机会在一个服务器进程上附加一个调试器。这个参数在会话开始之后不能被更改。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-pre-auth-delay" xreflabel="pre_auth_delay">
<!--==========================orignal english content==========================
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>pre_auth_delay</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>pre_auth_delay</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>pre_auth_delay</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If nonzero, a delay of this many seconds occurs just after a
        new server process is forked, before it conducts the
        authentication procedure.  This is intended to give developers an
        opportunity to attach to the server process with a debugger to
        trace down misbehavior in authentication.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        如果为非零，那么在一个新的服务器进程派生出来之后并且在它开始认证过程之前，就会发生这么多秒的延迟。这是为了给开发者们一个机会在一个服务器进程上附加一个调试器来跟踪认证过程中的不当行为。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-notify" xreflabel="trace_notify">
<!--==========================orignal english content==========================
      <term><varname>trace_notify</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_notify</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_notify</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_notify</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Generates a great amount of debugging output for the
        <command>LISTEN</command> and <command>NOTIFY</command>
        commands.  <xref linkend="guc-client-min-messages"> or
        <xref linkend="guc-log-min-messages"> must be
        <literal>DEBUG1</literal> or lower to send this output to the
        client or server logs, respectively.
       </para>
____________________________________________________________________________-->
       <para>
        为<command>LISTEN</command>和<command>NOTIFY</command>命令生成大量调试输出。<xref linkend="guc-client-min-messages">和<xref linkend="guc-log-min-messages">必须是<literal>DEBUG1</literal>或者更低才能把这种输出分别发送到客户端或者服务器日志。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-recovery-messages" xreflabel="trace_recovery_messages">
<!--==========================orignal english content==========================
      <term><varname>trace_recovery_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>trace_recovery_messages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_recovery_messages</varname> (<type>enum</type>)
      <indexterm>
       <primary><varname>trace_recovery_messages</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Enables logging of recovery-related debugging output that otherwise
        would not be logged. This parameter allows the user to override the
        normal setting of <xref linkend="guc-log-min-messages">, but only for
        specific messages. This is intended for use in debugging Hot Standby.
        Valid values are <literal>DEBUG5</>, <literal>DEBUG4</>,
        <literal>DEBUG3</>, <literal>DEBUG2</>, <literal>DEBUG1</>, and
        <literal>LOG</>.  The default, <literal>LOG</>, does not affect
        logging decisions at all.  The other values cause recovery-related
        debug messages of that priority or higher to be logged as though they
        had <literal>LOG</> priority; for common settings of
        <varname>log_min_messages</> this results in unconditionally sending
        them to the server log.
        This parameter can only be set in the <filename>postgresql.conf</>
        file or on the server command line.
       </para>
____________________________________________________________________________-->
       <para>
        启用记录与恢复有关的调试输出，否则无法记录。这个参数允许用户覆盖<xref linkend="guc-log-min-messages">的正常设置，但只用于指定的消息。这个参数的目的是用来调试热后备。有效值包括<literal>DEBUG5</>、<literal>DEBUG4</>、<literal>DEBUG3</>、<literal>DEBUG2</>、<literal>DEBUG1</>和<literal>LOG</>。默认值<literal>LOG</>完全不会影响日志决定。其他值会记录相关级别或更高级别的与恢复相关的调试消息，就好像它们具有<literal>LOG</>优先级一样；对于<varname>log_min_messages</>的通用设置，这会无条件的将消息发送给服务器日志。这个参数只能在<filename>postgresql.conf</>文件中或在服务器命令行上设置。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-trace-sort" xreflabel="trace_sort">
<!--==========================orignal english content==========================
      <term><varname>trace_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_sort</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_sort</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_sort</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If on, emit information about resource usage during sort operations.
        This parameter is only available if the <symbol>TRACE_SORT</symbol> macro
        was defined when <productname>PostgreSQL</productname> was compiled.
        (However, <symbol>TRACE_SORT</symbol> is currently defined by default.)
       </para>
____________________________________________________________________________-->
       <para>
        如果打开，发出在排序操作中的资源使用的相关信息。只有在编译<productname>PostgreSQL</productname>时定义了<symbol>TRACE_SORT</symbol>宏， 这个参数才可用（不过，当前在默认情况下就定义了<symbol>TRACE_SORT</symbol>）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>trace_locks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_locks</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_locks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_locks</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If on, emit information about lock usage.  Information dumped
        includes the type of lock operation, the type of lock and the unique
        identifier of the object being locked or unlocked.  Also included
        are bit masks for the lock types already granted on this object as
        well as for the lock types awaited on this object.  For each lock
        type a count of the number of granted locks and waiting locks is
        also dumped as well as the totals.  An example of the log file output
        is shown here:
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
        Details of the structure being dumped may be found in
        <filename>src/include/storage/lock.h</filename>.
       </para>
____________________________________________________________________________-->
       <para>
        如果开启，发出锁使用情况的信息。被转储信息中包括锁操作的类型、锁的类型和 被锁或被解锁对象的唯一标识符。同样包括的还有已经授予这个对象的锁类型的位掩码和 等待这个对象的锁类型的位掩码。对每一种锁类型，已授权锁和等待锁的计数也会被一起转储。一个日志文件输出的例子如下：
<screen>
LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)
</screen>
        被转储结构的详细信息可以在<filename>src/include/storage/lock.h</filename>中找到。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_lwlocks</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_lwlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_lwlocks</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If on, emit information about lightweight lock usage.  Lightweight
        locks are intended primarily to provide mutual exclusion of access
        to shared-memory data structures.
       </para>
____________________________________________________________________________-->
       <para>
        如果开启，发出轻量级锁的使用信息。轻量级锁主要是为了提供对共享内存数据结构的互斥访问。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_userlocks</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_userlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>trace_userlocks</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If on, emit information about user lock usage.  Output is the same
        as for <symbol>trace_locks</symbol>, only for advisory locks.
       </para>
____________________________________________________________________________-->
       <para>
        如果开启，发出关于用户锁使用的信息。与<symbol>trace_locks</symbol>的输出一样，但只用于咨询锁。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_oidmin</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_lock_oidmin</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_oidmin</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If set, do not trace locks for tables below this OID. (use to avoid
        output on system tables)
       </para>
____________________________________________________________________________-->
       <para>
        如果设置，不会跟踪小于这个 OID 的锁（用于避免在系统表上的输出）。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>trace_lock_table</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_table</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>trace_lock_table</varname> (<type>integer</type>)
      <indexterm>
       <primary><varname>trace_lock_table</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Unconditionally trace locks on this table (OID).
       </para>
____________________________________________________________________________-->
       <para>
        无条件地跟踪此表（OID）上的锁。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_deadlocks</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>debug_deadlocks</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>debug_deadlocks</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If set, dumps information about all current locks when a
        deadlock timeout occurs.
       </para>
____________________________________________________________________________-->
       <para>
        如果设置，当死锁超时发生时，转储所有当前锁的信息。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>LOCK_DEBUG</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>LOCK_DEBUG</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--==========================orignal english content==========================
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_btree_build_stats</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>log_btree_build_stats</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>log_btree_build_stats</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If set, logs system resource usage statistics (memory and CPU) on
        various B-tree operations.
       </para>
____________________________________________________________________________-->
       <para>
        如果设置，会记录 B 树操作上的系统资源使用情况统计（内存和 CPU）。
       </para>
<!--==========================orignal english content==========================
       <para>
        This parameter is only available if the <symbol>BTREE_BUILD_STATS</symbol>
        macro was defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        只有在编译<productname>PostgreSQL</productname>时定义了<symbol>BTREE_BUILD_STATS</symbol>宏， 这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry id="guc-wal-debug" xreflabel="wal_debug">
<!--==========================orignal english content==========================
      <term><varname>wal_debug</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_debug</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>wal_debug</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>wal_debug</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        If on, emit WAL-related debugging output. This parameter is
        only available if the <symbol>WAL_DEBUG</symbol> macro was
        defined when <productname>PostgreSQL</productname> was
        compiled.
       </para>
____________________________________________________________________________-->
       <para>
        如果被打开，WAL 相关的调试输出将被发出。只有在编译<productname>PostgreSQL</productname>时定义了<symbol>WAL_DEBUG</symbol>宏的情况下，这个参数才可用。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-ignore-checksum-failure" xreflabel="ignore_checksum_failure">
<!--==========================orignal english content==========================
      <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_checksum_failure</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>ignore_checksum_failure</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>ignore_checksum_failure</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Only has effect if <xref linkend="app-initdb-data-checksums"> are enabled.
       </para>
____________________________________________________________________________-->
       <para>
        只有当<xref linkend="app-initdb-data-checksums">被启用时才有效。
       </para>
<!--==========================orignal english content==========================
       <para>
        Detection of a checksum failure during a read normally causes
        <productname>PostgreSQL</> to report an error, aborting the current
        transaction.  Setting <varname>ignore_checksum_failure</> to on causes
        the system to ignore the failure (but still report a warning), and
        continue processing.  This behavior may <emphasis>cause crashes, propagate
        or hide corruption, or other serious problems</>.  However, it may allow
        you to get past the error and retrieve undamaged tuples that might still be
        present in the table if the block header is still sane. If the header is
        corrupt an error will be reported even if this option is enabled. The
        default setting is <literal>off</>, and it can only be changed by a superuser.
       </para>
____________________________________________________________________________-->
       <para>
        在读取过程中检测到一次校验码失败通常会导致<productname>PostgreSQL</>报告一个错误。设置<varname>ignore_checksum_failure</>为打开会导致系统忽略失败（但是仍然报告一个警告），并且继续执行。这种行为可能<emphasis>导致崩溃、传播或隐藏损坏或者其他严重的问题</>。但是，它允许你绕过错误并且在块头部仍然健全的情况下从表中检索未损坏的元组。如果头部被损坏，即便这个选项被启用系统也将报告一个错误。默认设置是<literal>off</>，并且只能被超级用户改变。
       </para>
      </listitem>
     </varlistentry>

    <varlistentry id="guc-zero-damaged-pages" xreflabel="zero_damaged_pages">
<!--==========================orignal english content==========================
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>zero_damaged_pages</> configuration parameter</primary>
      </indexterm>
      </term>
____________________________________________________________________________-->
      <term><varname>zero_damaged_pages</varname> (<type>boolean</type>)
      <indexterm>
       <primary><varname>zero_damaged_pages</>配置参数</primary>
      </indexterm></term>
      <listitem>
<!--==========================orignal english content==========================
       <para>
        Detection of a damaged page header normally causes
        <productname>PostgreSQL</> to report an error, aborting the current
        transaction.  Setting <varname>zero_damaged_pages</> to on causes
        the system to instead report a warning, zero out the damaged
        page in memory, and continue processing.  This behavior <emphasis>will destroy data</>,
        namely all the rows on the damaged page.  However, it does allow you to get
        past the error and retrieve rows from any undamaged pages that might
        be present in the table.  It is useful for recovering data if
        corruption has occurred due to a hardware or software error.  You should
        generally not set this on until you have given up hope of recovering
        data from the damaged pages of a table.  Zeroed-out pages are not
        forced to disk so it is recommended to recreate the table or
        the index before turning this parameter off again.  The
        default setting is <literal>off</>, and it can only be changed
        by a superuser.
       </para>
____________________________________________________________________________-->
       <para>
        检测到一个损坏的页面头部通常会导致<productname>PostgreSQL</>报告一个错误，并且中止当前事务。把<varname>zero_damaged_pages</>设置为打开会让系统报告一个警告、把损坏的页面填充零，然后继续处理。这种行为会<emphasis>毁掉数据</>，即被损坏页面上的所有行。但是它允许你绕开错误并且从可能存在表中的任何未损坏页面中检索行。如果由于一次硬件或软件错误而发生毁坏，这种方法可用于恢复数据。通常你不应该把它设置为打开，除非你已经彻底放弃从表的损坏页面中恢复数据。被填充零的页面不会被强制到磁盘上，因此我们推荐在再次关闭这个参数之前先重建表或索引。默认的设置是<literal>off</>，并且只有超级用户可以改变它。
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </sect1>
  <sect1 id="runtime-config-short">
<!--==========================orignal english content==========================
   <title>Short Options</title>
____________________________________________________________________________-->
   <title>短选项</title>

<!--==========================orignal english content==========================
   <para>
    For convenience there are also single letter command-line option
    switches available for some parameters.  They are described in
    <xref linkend="runtime-config-short-table">.  Some of these
    options exist for historical reasons, and their presence as a
    single-letter option does not necessarily indicate an endorsement
    to use the option heavily.
   </para>
____________________________________________________________________________-->
   <para>
    为了方便起见，系统中还为一些参数提供了单字母的命令行选项开关。它们在<xref linkend="runtime-config-short-table">中描述。其中一些选项是由于历史原因而存在，并且它们作为一个单字母选项存在并不表示它们会被大量使用。
   </para>

    <table id="runtime-config-short-table">
<!--==========================orignal english content==========================
     <title>Short Option Key</title>
____________________________________________________________________________-->
     <title>短选项键</title>
     <tgroup cols="2">
      <thead>
<!--==========================orignal english content==========================
       <row>
        <entry>Short Option</entry>
        <entry>Equivalent</entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry>短选项</entry>
        <entry>等效于</entry>
       </row>
      </thead>

      <tbody>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-B <replaceable>x</replaceable></option></entry>
        <entry><literal>shared_buffers = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-d <replaceable>x</replaceable></option></entry>
        <entry><literal>log_min_messages = DEBUG<replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-e</option></entry>
        <entry><literal>datestyle = euro</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</>,
          <literal>enable_hashjoin = off</>,
          <literal>enable_indexscan = off</>,
          <literal>enable_mergejoin = off</>,
          <literal>enable_nestloop = off</>,
          <literal>enable_indexonlyscan = off</>,
          <literal>enable_seqscan = off</>,
          <literal>enable_tidscan = off</>
         </entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry>
          <option>-fb</option>, <option>-fh</option>, <option>-fi</option>,
          <option>-fm</option>, <option>-fn</option>, <option>-fo</option>,
          <option>-fs</option>, <option>-ft</option>
         </entry>
         <entry>
          <literal>enable_bitmapscan = off</>,
          <literal>enable_hashjoin = off</>,
          <literal>enable_indexscan = off</>,
          <literal>enable_mergejoin = off</>,
          <literal>enable_nestloop = off</>,
          <literal>enable_indexonlyscan = off</>,
          <literal>enable_seqscan = off</>,
          <literal>enable_tidscan = off</>
         </entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-F</option></entry>
        <entry><literal>fsync = off</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-h <replaceable>x</replaceable></option></entry>
        <entry><literal>listen_addresses = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-i</option></entry>
        <entry><literal>listen_addresses = '*'</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directories = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-k <replaceable>x</replaceable></option></entry>
        <entry><literal>unix_socket_directories = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-l</option></entry>
        <entry><literal>ssl = on</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-N <replaceable>x</replaceable></option></entry>
        <entry><literal>max_connections = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-O</option></entry>
        <entry><literal>allow_system_table_mods = on</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-p <replaceable>x</replaceable></option></entry>
        <entry><literal>port = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-P</option></entry>
        <entry><literal>ignore_system_indexes = on</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-s</option></entry>
        <entry><literal>log_statement_stats = on</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-S <replaceable>x</replaceable></option></entry>
        <entry><literal>work_mem = <replaceable>x</replaceable></></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</>,
        <literal>log_planner_stats = on</>,
        <literal>log_executor_stats = on</></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-tpa</option>, <option>-tpl</option>, <option>-te</option></entry>
        <entry><literal>log_parser_stats = on</>,
        <literal>log_planner_stats = on</>,
        <literal>log_executor_stats = on</></entry>
       </row>
<!--==========================orignal english content==========================
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></></entry>
       </row>
____________________________________________________________________________-->
       <row>
        <entry><option>-W <replaceable>x</replaceable></option></entry>
        <entry><literal>post_auth_delay = <replaceable>x</replaceable></></entry>
       </row>
      </tbody>
     </tgroup>
    </table>

  </sect1>
</chapter>
