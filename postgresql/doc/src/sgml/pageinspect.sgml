<!-- doc/src/sgml/pageinspect.sgml -->

<sect1 id="pageinspect" xreflabel="pageinspect">
<!--==========================orignal english content==========================
 <title>pageinspect</title>
____________________________________________________________________________-->
 <title>pageinspect</title>

<!--==========================orignal english content==========================
 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="pageinspect">
  <primary>pageinspect</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>pageinspect</> module provides functions that allow you to
  inspect the contents of database pages at a low level, which is useful for
  debugging purposes.  All of these functions may be used only by superusers.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>pageinspect</>模块提供函数让你从低层次观察数据库页面的内容，这对于调试目的很有用。所有这些函数只能被超级用户使用。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Functions</title>
____________________________________________________________________________-->
  <title>函数</title>

  <variablelist>
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>get_raw_page(relname text, fork text, blkno int) returns bytea</function>
     <indexterm>
      <primary>get_raw_page</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>get_raw_page(relname text, fork text, blkno int) 返回 bytea</function>
    <indexterm>
     <primary>get_raw_page</primary>
    </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>get_raw_page</function> reads the specified block of the named
      relation and returns a copy as a <type>bytea</> value.  This allows a
      single time-consistent copy of the block to be obtained.
      <replaceable>fork</replaceable> should be <literal>'main'</literal> for
      the main data fork, <literal>'fsm'</literal> for the free space map,
      <literal>'vm'</literal> for the visibility map, or <literal>'init'</literal>
      for the initialization fork.
     </para>
____________________________________________________________________________-->
     <para>
      <function>get_raw_page</function>读取提及的关系中的指定块并且以一个<type>bytea</>值的形式返回一个拷贝。这允许得到该块的一个单一的时间一致的拷贝。对于主数据分叉，<replaceable>fork</replaceable>应该是<literal>'main'</literal>，对于空闲空间映射应该是<literal>'fsm'</literal>，对于可见性映射应该是<literal>'vm'</literal>，对于初始化分叉应该是<literal>'init'</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>get_raw_page(relname text, blkno int) returns bytea</function>
    </term>
____________________________________________________________________________-->
    <term>
     <function>get_raw_page(relname text, blkno int) 返回 bytea</function>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      A shorthand version of <function>get_raw_page</function>, for reading
      from the main fork.  Equivalent to
      <literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
____________________________________________________________________________-->
     <para>
      一个简写版的<function>get_raw_page</function>，用于读取主分叉。等效于<literal>get_raw_page(relname, 'main', blkno)</literal>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>page_header(page bytea) returns record</function>
     <indexterm>
      <primary>page_header</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>page_header(page bytea) 返回 record</function>
    <indexterm>
     <primary>page_header</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>page_header</function> shows fields that are common to all
      <productname>PostgreSQL</> heap and index pages.
     </para>
____________________________________________________________________________-->
     <para>
      <function>page_header</function>显示所有<productname>PostgreSQL</>堆和索引页面的公共域。
     </para>

<!--==========================orignal english content==========================
     <para>
      A page image obtained with <function>get_raw_page</function> should be
      passed as argument.  For example:
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-
 0/24A1B50 |        1 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      The returned columns correspond to the fields in the
      <structname>PageHeaderData</> struct.
      See <filename>src/include/storage/bufpage.h</> for details.
    </para>
____________________________________________________________________________-->
     <para>
      用<function>get_raw_page</function>获得的一个页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM page_header(get_raw_page('pg_class', 0));
    lsn    | checksum | flags  | lower | upper | special | pagesize | version | prune_xid
-----------+----------+--------+-------+-------+---------+----------+---------+-----------
 0/24A1B50 |        1 |      1 |   232 |   368 |    8192 |     8192 |       4 |         0
</screen>
      返回的列对应于<structname>PageHeaderData</>结构中的域。详见<filename>src/include/storage/bufpage.h</>。
    </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>heap_page_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>heap_page_items</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>heap_page_items(page bytea) 返回 setof record</function>
    <indexterm>
     <primary>heap_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>heap_page_items</function> shows all line pointers on a heap
      page.  For those line pointers that are in use, tuple headers as well
      as tuple raw data are also shown. All tuples are shown, whether or not
      the tuples were visible to an MVCC snapshot at the time the raw page
      was copied.
     </para>
____________________________________________________________________________-->
     <para>
      <function>heap_page_items</function>显示一个堆页面上所有的行指针。
      对那些使用中的行指针，元组头部和元组原始数据也会被显示。
      不管元组对于拷贝原始页面时的 MVCC 快照是否可见，它们都会被显示。
     </para>
<!--==========================orignal english content==========================
     <para>
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      See <filename>src/include/storage/itemid.h</> and
      <filename>src/include/access/htup_details.h</> for explanations of the fields
      returned.
     </para>
____________________________________________________________________________-->
     <para>
      用<function>get_raw_page</function>获得的一个堆页面映像应该作为参数传递。例如：
<screen>
test=# SELECT * FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      返回的域的解释可见<filename>src/include/storage/itemid.h</>和<filename>src/include/access/htup_details.h</>。
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>tuple_data_split(rel_oid, t_data bytea, t_infomask integer, t_infomask2 integer, t_bits text [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>tuple_data_split</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>tuple_data_split(rel_oid, t_data bytea, t_infomask integer, t_infomask2 integer, t_bits text [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>tuple_data_split</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>tuple_data_split</function> splits tuple data into attributes
      in the same way as backend internals.
<screen>
test=# SELECT tuple_data_split('pg_class'::regclass, t_data, t_infomask, t_infomask2, t_bits) FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      This function should be called with the same arguments as the return
      attributes of <function>heap_page_items</function>.
     </para>
____________________________________________________________________________-->
     <para>
      <function>tuple_data_split</function>将元组数据分隔成属性，就像后端的内部处理那样。
<screen>
test=# SELECT tuple_data_split('pg_class'::regclass, t_data, t_infomask, t_infomask2, t_bits) FROM heap_page_items(get_raw_page('pg_class', 0));
</screen>
      该函数应该使用和<function>heap_page_items</function>的返回属性相同的参数调用。
     </para>
<!--==========================orignal english content==========================
     <para>
      If <parameter>do_detoast</parameter> is <literal>true</literal>,
      attribute that will be detoasted as needed. Default value is
      <literal>false</literal>.
     </para>
____________________________________________________________________________-->
     <para>
      如果<parameter>do_detoast</parameter>为<literal>true</literal>，
      属性将在需要时detoast。默认值是<literal>false</literal>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>heap_page_item_attrs(rel_oid, t_data bytea, [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>heap_page_item_attrs</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>heap_page_item_attrs(rel_oid, t_data bytea, [, do_detoast bool]) returns bytea[]</function>
     <indexterm>
      <primary>heap_page_item_attrs</primary>
     </indexterm>
    </term>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>heap_page_item_attrs</function> is equivalent to
      <function>heap_page_items</function> except that it returns
      tuple raw data as an array of attributes that can optionally
      be detoasted by <parameter>do_detoast</parameter> which is
      <literal>false</literal> by default.
     </para>
____________________________________________________________________________-->
     <para>
      <function>heap_page_item_attrs</function>等效于
      <function>heap_page_items</function>，不过它会把元组原始数据
      返回为属性的数组，如果<parameter>do_detoast</parameter>为真（
      默认为<literal>false</literal>），这些属性会被反 TOAST。
     </para>
<!--==========================orignal english content==========================
     <para>
      A heap page image obtained with <function>get_raw_page</function> should
      be passed as argument.  For example:
<screen>
test=# SELECT * FROM heap_page_item_attrs(get_raw_page('pg_class', 0), 'pg_class'::regclass);
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      应该把用<function>get_raw_page</function>得到的一个堆页面映像
      作为参数传入。例如：
<screen>
test=# SELECT * FROM heap_page_item_attrs(get_raw_page('pg_class', 0), 'pg_class'::regclass);
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>bt_metap(relname text) returns record</function>
     <indexterm>
      <primary>bt_metap</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>bt_metap(relname text) 返回 record</function>
    <indexterm>
     <primary>bt_metap</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>bt_metap</function> returns information about a B-tree
      index's metapage.  For example:
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-&minus;-&minus;-
magic     | 340322
version   | 2
root      | 1
level     | 0
fastroot  | 1
fastlevel | 0
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_metap</function>返回关于一个 B-树索引元页的信息。例如：
<screen>
test=# SELECT * FROM bt_metap('pg_cast_oid_index');
-[ RECORD 1 ]-----
magic     | 340322
version   | 2
root      | 1
level     | 0
fastroot  | 1
fastlevel | 0
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>bt_page_stats(relname text, blkno int) returns record</function>
     <indexterm>
      <primary>bt_page_stats</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>bt_page_stats(relname text, blkno int) 返回 record</function>
    <indexterm>
     <primary>bt_page_stats</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>bt_page_stats</function> returns summary information about
      single pages of B-tree indexes.  For example:
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-&minus;-&minus;-
blkno         | 1
type          | l
live_items    | 256
dead_items    | 0
avg_item_size | 12
page_size     | 8192
free_size     | 4056
btpo_prev     | 0
btpo_next     | 0
btpo          | 0
btpo_flags    | 3
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_page_stats</function>返回有关 B-树索引单一页面的总计信息。例如：
<screen>
test=# SELECT * FROM bt_page_stats('pg_cast_oid_index', 1);
-[ RECORD 1 ]-+-----
blkno         | 1
type          | l
live_items    | 256
dead_items    | 0
avg_item_size | 12
page_size     | 8192
free_size     | 4056
btpo_prev     | 0
btpo_next     | 0
btpo          | 0
btpo_flags    | 3
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>bt_page_items(relname text, blkno int) returns setof record</function>
     <indexterm>
      <primary>bt_page_items</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>bt_page_items(relname text, blkno int) 返回 setof record</function>
    <indexterm>
     <primary>bt_page_items</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>bt_page_items</function> returns detailed information about
      all of the items on a B-tree index page.  For example:
<screen>
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);
 itemoffset |  ctid   | itemlen | nulls | vars |    data
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00
</screen>
      In a B-tree leaf page, <structfield>ctid</> points to a heap tuple.
      In an internal page, the block number part of <structfield>ctid</>
      points to another page in the index itself, while the offset part
      (the second number) is ignored and is usually 1.
     </para>
____________________________________________________________________________-->
     <para>
      <function>bt_page_items</function>返回一个 B-树索引页面上项的所有细节信息。例如：
<screen>
test=# SELECT * FROM bt_page_items('pg_cast_oid_index', 1);
 itemoffset |  ctid   | itemlen | nulls | vars |    data
------------+---------+---------+-------+------+-------------
          1 | (0,1)   |      12 | f     | f    | 23 27 00 00
          2 | (0,2)   |      12 | f     | f    | 24 27 00 00
          3 | (0,3)   |      12 | f     | f    | 25 27 00 00
          4 | (0,4)   |      12 | f     | f    | 26 27 00 00
          5 | (0,5)   |      12 | f     | f    | 27 27 00 00
          6 | (0,6)   |      12 | f     | f    | 28 27 00 00
          7 | (0,7)   |      12 | f     | f    | 29 27 00 00
          8 | (0,8)   |      12 | f     | f    | 2a 27 00 00
</screen>
      在一个 B 树叶子页面中，<structfield>ctid</>指向一个堆元组。在一个
      内部页面中， <structfield>ctid</>的块号部分指向索引本身中的另一个
      页面，而偏移量部分（第二个数字）会被忽略并且通常为 1。
     </para>
<!--==========================orignal english content==========================
     <para>
      Note that the first item on any non-rightmost page (any page with
      a non-zero value in the <structfield>btpo_next</> field) is the
      page's <quote>high key</quote>, meaning its <structfield>data</>
      serves as an upper bound on all items appearing on the page, while
      its <structfield>ctid</> field is meaningless.  Also, on non-leaf
      pages, the first real data item (the first item that is not a high
      key) is a <quote>minus infinity</quote> item, with no actual value
      in its <structfield>data</> field.  Such an item does have a valid
      downlink in its <structfield>ctid</> field, however.
     </para>
____________________________________________________________________________-->
     <para>
      注意在任何非最右页面（页面的<structfield>btpo_next</>域中有非零
      值）上的第一个项是该页的<quote>high key</quote>，表示它的
      <structfield>data</>是作为该页面上所有项的一个上界存在，而它的
      <structfield>ctid</>域没有意义。还有，在非叶子页面上，第一个真正
      的数据项（第一个不是 high key 的项）是一个<quote>负无穷</quote>
      项，它的<structfield>data</>域中没有实际值。不过，这样一个项确实
      在其有<structfield>ctid</>域中有向下的链接。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>brin_page_type(page bytea) returns text</function>
     <indexterm>
      <primary>brin_page_type</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>brin_page_type</function> returns the page type of the given
      <acronym>BRIN</acronym> index page, or throws an error if the page is
      not a valid <acronym>BRIN</acronym> page.  For example:
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type 
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 meta
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>brin_page_type</function>返回一个给定的
      <acronym>BRIN</acronym>索引页面的页面类型，如果该页面不是
      一个合法的<acronym>BRIN</acronym>页面则抛出错误。例如：
<screen>
test=# SELECT brin_page_type(get_raw_page('brinidx', 0));
 brin_page_type 
----------------
 meta
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>brin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>brin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>brin_metapage_info</function> returns assorted information
      about a <acronym>BRIN</acronym> index metapage.  For example:
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage 
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>brin_metapage_info</function>返回有关一个
      <acronym>BRIN</acronym>索引元页的各类信息。例如：
<screen>
test=# SELECT * FROM brin_metapage_info(get_raw_page('brinidx', 0));
   magic    | version | pagesperrange | lastrevmappage 
------------+---------+---------------+----------------
 0xA8109CFA |       1 |             4 |              2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>brin_revmap_data(page bytea) returns setof tid</function>
     <indexterm>
      <primary>brin_revmap_data</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>brin_revmap_data</function> returns the list of tuple
      identifiers in a <acronym>BRIN</acronym> index range map page.
      For example:
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) limit 5;
  pages  
-&minus;-&minus;-&minus;-&minus;-
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>brin_revmap_data</function>返回一个
      <acronym>BRIN</acronym>索引范围映射页面中元组标识符的列表。
      例如：
<screen>
test=# SELECT * FROM brin_revmap_data(get_raw_page('brinidx', 2)) limit 5;
  pages  
---------
 (6,137)
 (6,138)
 (6,139)
 (6,140)
 (6,141)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>brin_page_items(page bytea, index oid) returns setof record</function>
     <indexterm>
      <primary>brin_page_items</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>brin_page_items</function> returns the data stored in the
      <acronym>BRIN</acronym> data page.  For example:
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value     
-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
        137 |      0 |      1 | t        | f        | f           | 
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           | 
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           | 
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
      The returned columns correspond to the fields in the
      <structname>BrinMemTuple</> and <structname>BrinValues</> structs.
      See <filename>src/include/access/brin_tuple.h</> for details.
     </para>
____________________________________________________________________________-->
     <para>
      <function>brin_page_items</function>返回存储在
      <acronym>BRIN</acronym>数据页面中存储的数据。例如：
<screen>
test=# SELECT * FROM brin_page_items(get_raw_page('brinidx', 5),
                                     'brinidx')
       ORDER BY blknum, attnum LIMIT 6;
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |    value     
------------+--------+--------+----------+----------+-------------+--------------
        137 |      0 |      1 | t        | f        | f           | 
        137 |      0 |      2 | f        | f        | f           | {1 .. 88}
        138 |      4 |      1 | t        | f        | f           | 
        138 |      4 |      2 | f        | f        | f           | {89 .. 176}
        139 |      8 |      1 | t        | f        | f           | 
        139 |      8 |      2 | f        | f        | f           | {177 .. 264}
</screen>
      返回的列对应于<structname>BrinMemTuple</>和
      <structname>BrinValues</>结构中的域。详见
      <filename>src/include/access/brin_tuple.h</>。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>gin_metapage_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_metapage_info</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>gin_metapage_info</function> returns information about
      a <acronym>GIN</acronym> index metapage.  For example:
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>gin_metapage_info</function>返回有关一个
      <acronym>GIN</acronym>索引元页的信息。例如：
<screen>
test=# SELECT * FROM gin_metapage_info(get_raw_page('gin_index', 0));
-[ RECORD 1 ]----+-----------
pending_head     | 4294967295
pending_tail     | 4294967295
tail_free_size   | 0
n_pending_pages  | 0
n_pending_tuples | 0
n_total_pages    | 7
n_entry_pages    | 6
n_data_pages     | 0
n_entries        | 693
version          | 2
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>gin_page_opaque_info(page bytea) returns record</function>
     <indexterm>
      <primary>gin_page_opaque_info</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>gin_page_opaque_info</function> returns information about
      a <acronym>GIN</acronym> index opaque area, like the page type.
      For example:
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>gin_page_opaque_info</function>返回有关一个
      <acronym>GIN</acronym>索引不透明区域的信息，如页面类型等。例如：
<screen>
test=# SELECT * FROM gin_page_opaque_info(get_raw_page('gin_index', 2));
 rightlink | maxoff |         flags
-----------+--------+------------------------
         5 |      0 | {data,leaf,compressed}
(1 row)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>gin_leafpage_items(page bytea) returns setof record</function>
     <indexterm>
      <primary>gin_leafpage_items</primary>
     </indexterm>
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>gin_leafpage_items</function> returns information about
      the data stored in a <acronym>GIN</acronym> leaf page.  For example:
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] as some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-&minus;-&minus;-&minus;-&minus;-&minus;-+-&minus;-&minus;-&minus;-&minus;+-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;-&minus;
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
____________________________________________________________________________-->
     <para>
      <function>gin_leafpage_items</function>返回有关存储在一个
      <acronym>GIN</acronym>叶子页面中的数据的信息。例如：
<screen>
test=# SELECT first_tid, nbytes, tids[0:5] as some_tids
        FROM gin_leafpage_items(get_raw_page('gin_test_idx', 2));
 first_tid | nbytes |                        some_tids
-----------+--------+----------------------------------------------------------
 (8,41)    |    244 | {"(8,41)","(8,43)","(8,44)","(8,45)","(8,46)"}
 (10,45)   |    248 | {"(10,45)","(10,46)","(10,47)","(10,48)","(10,49)"}
 (12,52)   |    248 | {"(12,52)","(12,53)","(12,54)","(12,55)","(12,56)"}
 (14,59)   |    320 | {"(14,59)","(14,60)","(14,61)","(14,62)","(14,63)"}
 (167,16)  |    376 | {"(167,16)","(167,17)","(167,18)","(167,19)","(167,20)"}
 (170,30)  |    376 | {"(170,30)","(170,31)","(170,32)","(170,33)","(170,34)"}
 (173,44)  |    197 | {"(173,44)","(173,45)","(173,46)","(173,47)","(173,48)"}
(7 rows)
</screen>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
<!--==========================orignal english content==========================
    <term>
     <function>fsm_page_contents(page bytea) returns text</function>
     <indexterm>
      <primary>fsm_page_contents</primary>
     </indexterm>
    </term>
____________________________________________________________________________-->
    <term>
     <function>fsm_page_contents(page bytea) 返回 text</function>
    <indexterm>
     <primary>fsm_page_contents</primary>
    </indexterm>    
    </term>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <function>fsm_page_contents</function> shows the internal node structure
      of a FSM page. The output is a multiline string, with one line per
      node in the binary tree within the page. Only those nodes that are not
      zero are printed. The so-called "next" pointer, which points to the
      next slot to be returned from the page, is also printed.
     </para>
____________________________________________________________________________-->
     <para>
      <function>fsm_page_contents</function>显示一个 FSM 页面的内部结点结构。输出是一个多行字符串，每一行对应页面中二叉树的一个结点。只有非零节点会被打印。所谓的“next”指针也会被打印，它指向页面中下一个要被返回的槽。
     </para>
<!--==========================orignal english content==========================
     <para>
      See <filename>src/backend/storage/freespace/README</> for more
      information on the structure of an FSM page.
     </para>
____________________________________________________________________________-->
     <para>
      关于一个 FSM 页面的结构详见<filename>src/backend/storage/freespace/README</>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>
